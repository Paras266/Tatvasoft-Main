/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { commandIcons } from '../../config/command-icons';
import { Directive, Inject, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-toolbar";
import * as i2 from "@progress/kendo-angular-l10n";
import * as i3 from "../../common/provider.service";
import * as i4 from "../tools.service";
const MY_TOKEN = new InjectionToken('COMMAND_TOKEN');
/**
 * @hidden
 */
export class EditorCommandBaseDirective {
    constructor(command, button, localization, providerService, toolsService) {
        this.command = command;
        this.button = button;
        this.localization = localization;
        this.toolsService = toolsService;
        this.editor = providerService.editor;
        setTimeout(() => {
            const text = this.localization.get(this.command);
            if (text) {
                this.button.showText = 'overflow';
                this.button.showIcon = 'both';
                this.button.text = text;
            }
            if (!this.button.toolbarOptions.icon) {
                this.button.icon = commandIcons[this.command];
            }
            this.button.title = text;
            this.toolsService.needsCheck.next();
        });
    }
    ngOnInit() {
        this.subs = this.editor.stateChange.subscribe(this.onStateChange.bind(this));
        this.subs.add(this.button.click.subscribe((this.clickHandler.bind(this))));
        this.subs.add(this.button.pointerdown.subscribe((this.pointerdownHandler.bind(this))));
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    // eslint-disable -next-line
    clickHandler() { }
    // eslint-disable -next-line
    pointerdownHandler(_event) { }
    // eslint-disable -next-line
    onStateChange(_toolBarState) { }
}
EditorCommandBaseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCommandBaseDirective, deps: [{ token: MY_TOKEN }, { token: i1.ToolBarButtonComponent }, { token: i2.LocalizationService }, { token: i3.ProviderService }, { token: i4.EditorToolsService }], target: i0.ɵɵFactoryTarget.Directive });
EditorCommandBaseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorCommandBaseDirective, selector: "[kendoEditorCommandBase]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCommandBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoEditorCommandBase]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MY_TOKEN]
                }] }, { type: i1.ToolBarButtonComponent }, { type: i2.LocalizationService }, { type: i3.ProviderService }, { type: i4.EditorToolsService }]; } });
