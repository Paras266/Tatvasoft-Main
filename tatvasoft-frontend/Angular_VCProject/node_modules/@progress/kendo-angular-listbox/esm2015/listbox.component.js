/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, ContentChild, EventEmitter, HostBinding, Input, isDevMode, Output } from '@angular/core';
import { validatePackage } from '@progress/kendo-licensing';
import { Subscription } from 'rxjs';
import { packageMetadata } from './package-metadata';
import { ListBoxSelectionService } from './selection.service';
import { ItemTemplateDirective } from './item-template.directive';
import { defaultItemDisabled, fieldAccessor, getTools } from './util';
import { allTools, DEFAULT_TOOLBAR_POSITION, sizeClassMap, toolbarClasses } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "./selection.service";
import * as i2 from "@angular/common";
import * as i3 from "@progress/kendo-angular-buttons";
import * as i4 from "./item-selectable.directive";
/**
 * Represents the [Kendo UI ListBox component for Angular]({% slug overview_listbox %}).
 */
export class ListBoxComponent {
    constructor(selectionService, renderer, hostElement) {
        this.selectionService = selectionService;
        this.renderer = renderer;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.listboxClassName = true;
        /**
         * The data which will be displayed by the ListBox.
         */
        this.data = [];
        /**
         * Sets the size of the component.
         *
         * The possible values are:
         * - `'small'`
         * - `'medium'` (default)
         * - `'large'`
         */
        this.size = 'medium';
        /**
         * A function which determines if a specific item is disabled.
         */
        this.itemDisabled = defaultItemDisabled;
        /**
         * Fires when the user selects a different ListBox item. Also fires when a node is moved, since that also changes its index.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires when the user clicks a ListBox item.
         */
        this.actionClick = new EventEmitter();
        /**
         * @hidden
         */
        this.selectedTools = allTools;
        this.sub = new Subscription();
        validatePackage(packageMetadata);
        this.setToolbarClass(DEFAULT_TOOLBAR_POSITION);
        this.sub.add(this.selectionService.onSelect.subscribe((e) => {
            this.selectionChange.next(e);
        }));
    }
    /**
     * Sets whether a toolbar should be displayed with the ListBox, as well as what tools and position should be used.
     */
    set toolbar(config) {
        let position = DEFAULT_TOOLBAR_POSITION;
        if (typeof config === 'boolean') {
            this.selectedTools = config ? allTools : [];
        }
        else {
            this.selectedTools = config.tools ? getTools(config.tools) : allTools;
            if (config.position) {
                position = config.position;
            }
        }
        this.setToolbarClass(position);
    }
    /**
     * @hidden
     */
    get listClasses() {
        return `k-list k-list-${sizeClassMap[this.size]}`;
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
    /**
     * @hidden
     */
    performAction(actionName) {
        this.actionClick.next(actionName);
    }
    /**
     * Programmatically selects a ListBox node.
     */
    selectItem(index) {
        this.selectionService.selectedIndex = index;
    }
    /**
     * Programmatically clears the ListBox selection.
     */
    clearSelection() {
        this.selectionService.clearSelection();
    }
    /**
     * The index of the currently selected item in the ListBox.
     */
    get selectedIndex() {
        return this.selectionService.selectedIndex;
    }
    /**
     * @hidden
     */
    getText(dataItem) {
        if (typeof dataItem !== 'string' && !this.textField && isDevMode()) {
            throw new Error('Missing textField input. When passing an array of objects as data, please set the textField input of the ListBox accordingly.');
        }
        return fieldAccessor(dataItem, this.textField);
    }
    setToolbarClass(pos) {
        Object.keys(toolbarClasses).forEach((className) => {
            if (pos === className) {
                this.renderer.addClass(this.hostElement.nativeElement, toolbarClasses[className]);
            }
            else {
                this.renderer.removeClass(this.hostElement.nativeElement, toolbarClasses[className]);
            }
        });
    }
}
ListBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxComponent, deps: [{ token: i1.ListBoxSelectionService }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ListBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListBoxComponent, selector: "kendo-listbox", inputs: { textField: "textField", data: "data", size: "size", toolbar: "toolbar", itemDisabled: "itemDisabled" }, outputs: { selectionChange: "selectionChange", actionClick: "actionClick" }, host: { properties: { "class.k-listbox": "this.listboxClassName" } }, providers: [ListBoxSelectionService], queries: [{ propertyName: "itemTemplate", first: true, predicate: ItemTemplateDirective, descendants: true }], ngImport: i0, template: `
            <div class="k-listbox-toolbar" *ngIf="selectedTools.length > 0">
                <ul class="k-reset">
                    <li *ngFor="let tool of selectedTools">
                        <button kendoButton [icon]="tool.icon" (click)="performAction(tool.name)" role="button"></button>
                    </li>

                    <!-- react moving items has a smoother removal of the style: https://www.telerik.com/kendo-react-ui/components/listbox/ -->
                </ul>
            </div>
            <div class="k-list-scroller k-selectable">
                <div class="{{ listClasses }}">
                    <div class="k-list-content">
                        <ul class="k-list-ul">
                            <li
                                class="k-list-item"
                                *ngFor="let item of data; let i = index;"
                                kendoListBoxItemSelectable
                                [index]="i"
                                [class.k-disabled]="itemDisabled(item)"
                            >
                                <ng-template *ngIf="itemTemplate; else defaultItemTemplate"
                                    [templateContext]="{
                                        templateRef: itemTemplate.templateRef,
                                        $implicit: item
                                    }">
                                </ng-template>
                                <ng-template #defaultItemTemplate>
                                    <span class="k-list-item-text">{{ getText(item) }}</span>
                                </ng-template>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
    `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }, { type: i4.ItemSelectableDirective, selector: "[kendoListBoxItemSelectable]", inputs: ["index"] }, { type: i3.TemplateContextDirective, selector: "[templateContext]", inputs: ["templateContext"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-listbox',
                    providers: [ListBoxSelectionService],
                    template: `
            <div class="k-listbox-toolbar" *ngIf="selectedTools.length > 0">
                <ul class="k-reset">
                    <li *ngFor="let tool of selectedTools">
                        <button kendoButton [icon]="tool.icon" (click)="performAction(tool.name)" role="button"></button>
                    </li>

                    <!-- react moving items has a smoother removal of the style: https://www.telerik.com/kendo-react-ui/components/listbox/ -->
                </ul>
            </div>
            <div class="k-list-scroller k-selectable">
                <div class="{{ listClasses }}">
                    <div class="k-list-content">
                        <ul class="k-list-ul">
                            <li
                                class="k-list-item"
                                *ngFor="let item of data; let i = index;"
                                kendoListBoxItemSelectable
                                [index]="i"
                                [class.k-disabled]="itemDisabled(item)"
                            >
                                <ng-template *ngIf="itemTemplate; else defaultItemTemplate"
                                    [templateContext]="{
                                        templateRef: itemTemplate.templateRef,
                                        $implicit: item
                                    }">
                                </ng-template>
                                <ng-template #defaultItemTemplate>
                                    <span class="k-list-item-text">{{ getText(item) }}</span>
                                </ng-template>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.ListBoxSelectionService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { listboxClassName: [{
                type: HostBinding,
                args: ['class.k-listbox']
            }], itemTemplate: [{
                type: ContentChild,
                args: [ItemTemplateDirective, { static: false }]
            }], textField: [{
                type: Input
            }], data: [{
                type: Input
            }], size: [{
                type: Input
            }], toolbar: [{
                type: Input
            }], itemDisabled: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], actionClick: [{
                type: Output
            }] } });
