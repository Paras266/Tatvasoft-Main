/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input, Output, EventEmitter } from '@angular/core';
import { Subscription } from 'rxjs';
import { DIRECTION_CLASSES, HIDDEN_CLASS } from './constants';
import { isTablistHorizontal } from './util';
import { TabScrollEvent } from './events/tabscroll-event';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @hidden
 */
export class TabStripScrollableButtonComponent {
    constructor(host, renderer, ngZone) {
        this.host = host;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.btnClasses = true;
        this.prev = false;
        this.tabScroll = new EventEmitter();
        this.onClick = new EventEmitter();
        this.subs = new Subscription();
        this.clickHandler = (scrollEvent) => {
            const tabStripScrollEvent = this.emitScrollEvent(scrollEvent);
            const isTabStripScrollEventPrevented = tabStripScrollEvent.isDefaultPrevented();
            if (isTabStripScrollEventPrevented) {
                return;
            }
            const buttonType = this.prev ? 'prev' : 'next';
            this.onClick.emit(buttonType);
        };
    }
    get prevClass() {
        return this.prev;
    }
    get nextClass() {
        return !this.prev;
    }
    get hostBoundingClientRect() {
        return this.host.nativeElement.getBoundingClientRect();
    }
    get iconClass() {
        return this.scrollButtonIconClass[this.prev ? 'prevScrollButton' : 'nextScrollButton'];
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.subs.add(this.renderer.listen(this.host.nativeElement, 'click', this.clickHandler));
        });
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    toggle(show) {
        this.renderer[show ? 'removeClass' : 'addClass'](this.host.nativeElement, HIDDEN_CLASS);
    }
    get scrollButtonIconClass() {
        const defaultPrevIcon = isTablistHorizontal(this.tabPosition) ? DIRECTION_CLASSES.left : DIRECTION_CLASSES.up;
        const defaultNextIcon = isTablistHorizontal(this.tabPosition) ? DIRECTION_CLASSES.right : DIRECTION_CLASSES.down;
        if (typeof this.scrollable === 'object') {
            const prevIcon = typeof this.scrollable.prevButtonIcon === 'undefined' ? defaultPrevIcon : this.scrollable.prevButtonIcon;
            const nextIcon = typeof this.scrollable.nextButtonIcon === 'undefined' ? defaultNextIcon : this.scrollable.nextButtonIcon;
            return { prevScrollButton: prevIcon, nextScrollButton: nextIcon };
        }
        return { prevScrollButton: defaultPrevIcon, nextScrollButton: defaultNextIcon };
    }
    emitScrollEvent(event) {
        const scrollEvent = new TabScrollEvent({
            originalEvent: event
        });
        this.tabScroll.emit(scrollEvent);
        return scrollEvent;
    }
}
TabStripScrollableButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabStripScrollableButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
TabStripScrollableButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TabStripScrollableButtonComponent, selector: "[kendoTabStripScrollableButton]", inputs: { prev: "prev", tabPosition: "tabPosition", scrollable: "scrollable" }, outputs: { tabScroll: "tabScroll", onClick: "onClick" }, host: { properties: { "class.k-button": "this.btnClasses", "class.k-button-md": "this.btnClasses", "class.k-icon-button": "this.btnClasses", "class.k-rounded-md": "this.btnClasses", "class.k-button-flat": "this.btnClasses", "class.k-button-flat-base": "this.btnClasses", "class.k-tabstrip-prev": "this.prevClass", "class.k-tabstrip-next": "this.nextClass" } }, ngImport: i0, template: `
        <span class="k-icon k-button-icon" [ngClass]="iconClass"></span>
    `, isInline: true, directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabStripScrollableButtonComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <span class="k-icon k-button-icon" [ngClass]="iconClass"></span>
    `,
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[kendoTabStripScrollableButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }]; }, propDecorators: { btnClasses: [{
                type: HostBinding,
                args: ['class.k-button']
            }, {
                type: HostBinding,
                args: ['class.k-button-md']
            }, {
                type: HostBinding,
                args: ['class.k-icon-button']
            }, {
                type: HostBinding,
                args: ['class.k-rounded-md']
            }, {
                type: HostBinding,
                args: ['class.k-button-flat']
            }, {
                type: HostBinding,
                args: ['class.k-button-flat-base']
            }], prevClass: [{
                type: HostBinding,
                args: ['class.k-tabstrip-prev']
            }], nextClass: [{
                type: HostBinding,
                args: ['class.k-tabstrip-next']
            }], prev: [{
                type: Input
            }], tabPosition: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], tabScroll: [{
                type: Output
            }], onClick: [{
                type: Output
            }] } });
