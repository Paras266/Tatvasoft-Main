/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, isDevMode } from '@angular/core';
import { EditorCommandButton } from '../shared/editor-command-button';
import { EditorErrorMessages } from '../../common/error-messages';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-toolbar";
import * as i2 from "../../localization/editor-localization.service";
import * as i3 from "../../common/provider.service";
import * as i4 from "../tools.service";
/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Print tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * > The Editor Print tool is supported in the default [`iframe`](https://www.telerik.com/kendo-angular-ui-develop/components/editor/api/EditorComponent/#toc-iframe) mode only.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorPrintButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorPrintButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
export class EditorPrintDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('print', button, localization, providerService, toolsService);
    }
    ngAfterViewInit() {
        if (isDevMode) {
            if (!this.editor.iframe) {
                throw new Error(EditorErrorMessages.printTool);
            }
        }
    }
    clickHandler() {
        if (this.editor.iframe) {
            const view = this.editor.view;
            const dom = view && view.dom;
            const doc = dom && dom.ownerDocument;
            const editorWindow = doc && doc.defaultView;
            if (editorWindow) {
                editorWindow.print();
            }
        }
    }
}
EditorPrintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorPrintDirective, deps: [{ token: i1.ToolBarButtonComponent }, { token: i2.EditorLocalizationService }, { token: i3.ProviderService }, { token: i4.EditorToolsService }], target: i0.ɵɵFactoryTarget.Directive });
EditorPrintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorPrintDirective, selector: "kendo-toolbar-button[kendoEditorPrintButton]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorPrintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorPrintButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ToolBarButtonComponent }, { type: i2.EditorLocalizationService }, { type: i3.ProviderService }, { type: i4.EditorToolsService }]; } });
