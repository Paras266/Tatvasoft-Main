/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as i0 from '@angular/core';
import { EventEmitter, Injectable, Directive, Input, HostBinding, HostListener, isDevMode, Component, ContentChild, Output, NgModule } from '@angular/core';
import { validatePackage } from '@progress/kendo-licensing';
import { Subscription } from 'rxjs';
import { getter } from '@progress/kendo-common';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@progress/kendo-angular-buttons';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { isChanged } from '@progress/kendo-angular-common';

/**
 * @hidden
 */
const packageMetadata = {
    name: '@progress/kendo-angular-listbox',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1666768769,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * @hidden
 */
class ListBoxSelectionService {
    constructor() {
        this.onSelect = new EventEmitter();
        this.selectedIndex = null;
    }
    select(index) {
        this.selectedIndex = index;
        this.onSelect.next({ index: this.selectedIndex });
    }
    isSelected(index) {
        return index === this.selectedIndex;
    }
    clearSelection() {
        this.selectedIndex = null;
    }
}
ListBoxSelectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxSelectionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ListBoxSelectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxSelectionService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxSelectionService, decorators: [{
            type: Injectable
        }] });

/**
 * Renders the ListBox item content. To define the item template, nest an `<ng-template>` tag
 * with the `kendoListBoxItemTemplate` directive inside the `<kendo-listbox>` tag. The template context is
 * set to the current data item.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *   <kendo-listbox [data]="listBoxItems">
 *     <ng-template kendoListBoxItemTemplate let-dataItem>
 *       <span>{{ dataItem }} item</span>
 *     </ng-template>
 *   </kendo-listbox>
 * `
 * })
 * ```
 */
class ItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ItemTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
ItemTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ItemTemplateDirective, selector: "[kendoListBoxItemTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoListBoxItemTemplate]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

/**
 * @hidden
 */
const DEFAULT_TOOLBAR_POSITION = 'right';
/**
 * @hidden
 */
const allTools = [
    {
        name: 'moveUp',
        label: 'Move Up',
        icon: 'arrow-n'
    },
    {
        name: 'moveDown',
        label: 'Move Down',
        icon: 'arrow-s'
    },
    {
        name: 'transferTo',
        label: 'Transfer From',
        icon: 'arrow-w'
    },
    {
        name: 'transferFrom',
        label: 'Transfer To',
        icon: 'arrow-e'
    },
    {
        name: 'transferAllTo',
        label: 'Transfer All To',
        icon: 'arrow-double-60-right'
    },
    {
        name: 'transferAllFrom',
        label: 'Transfer All From',
        icon: 'arrow-double-60-left'
    },
    {
        name: 'remove',
        label: 'Remove',
        icon: 'x'
    }
];
/**
 * @hidden
 */
const sizeClassMap = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
/**
 * @hidden
 */
const toolbarClasses = {
    left: 'k-listbox-toolbar-left',
    right: 'k-listbox-toolbar-right',
    top: 'k-listbox-toolbar-top',
    bottom: 'k-listbox-toolbar-bottom'
};

/**
 * @hidden
 */
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const isObject = (value) => isPresent(value) && typeof value === 'object';
/**
 * @hidden
 */
const fieldAccessor = (dataItem, field) => {
    if (!isPresent(dataItem)) {
        return null;
    }
    if (!isPresent(field) || !isObject(dataItem)) {
        return dataItem;
    }
    // creates a field accessor supporting nested fields processing
    const valueFrom = getter(field);
    return valueFrom(dataItem);
};
/**
 * @hidden
 */
const defaultItemDisabled = () => false;
/**
 * @hidden
 */
const getTools = (names) => {
    return names.map(tool => allTools.find(meta => meta.name === tool));
};

/**
 * @hidden
 */
class ItemSelectableDirective {
    constructor(selectionService) {
        this.selectionService = selectionService;
    }
    get selectedClassName() {
        return this.selectionService.isSelected(this.index);
    }
    onClick(event) {
        event.stopPropagation();
        this.selectionService.select(this.index);
    }
}
ItemSelectableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemSelectableDirective, deps: [{ token: ListBoxSelectionService }], target: i0.ɵɵFactoryTarget.Directive });
ItemSelectableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ItemSelectableDirective, selector: "[kendoListBoxItemSelectable]", inputs: { index: "index" }, host: { listeners: { "click": "onClick($event)" }, properties: { "class.k-selected": "this.selectedClassName" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemSelectableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoListBoxItemSelectable]'
                }]
        }], ctorParameters: function () { return [{ type: ListBoxSelectionService }]; }, propDecorators: { index: [{
                type: Input
            }], selectedClassName: [{
                type: HostBinding,
                args: ['class.k-selected']
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

/**
 * Represents the [Kendo UI ListBox component for Angular]({% slug overview_listbox %}).
 */
class ListBoxComponent {
    constructor(selectionService, renderer, hostElement) {
        this.selectionService = selectionService;
        this.renderer = renderer;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.listboxClassName = true;
        /**
         * The data which will be displayed by the ListBox.
         */
        this.data = [];
        /**
         * Sets the size of the component.
         *
         * The possible values are:
         * - `'small'`
         * - `'medium'` (default)
         * - `'large'`
         */
        this.size = 'medium';
        /**
         * A function which determines if a specific item is disabled.
         */
        this.itemDisabled = defaultItemDisabled;
        /**
         * Fires when the user selects a different ListBox item. Also fires when a node is moved, since that also changes its index.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires when the user clicks a ListBox item.
         */
        this.actionClick = new EventEmitter();
        /**
         * @hidden
         */
        this.selectedTools = allTools;
        this.sub = new Subscription();
        validatePackage(packageMetadata);
        this.setToolbarClass(DEFAULT_TOOLBAR_POSITION);
        this.sub.add(this.selectionService.onSelect.subscribe((e) => {
            this.selectionChange.next(e);
        }));
    }
    /**
     * Sets whether a toolbar should be displayed with the ListBox, as well as what tools and position should be used.
     */
    set toolbar(config) {
        let position = DEFAULT_TOOLBAR_POSITION;
        if (typeof config === 'boolean') {
            this.selectedTools = config ? allTools : [];
        }
        else {
            this.selectedTools = config.tools ? getTools(config.tools) : allTools;
            if (config.position) {
                position = config.position;
            }
        }
        this.setToolbarClass(position);
    }
    /**
     * @hidden
     */
    get listClasses() {
        return `k-list k-list-${sizeClassMap[this.size]}`;
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
    /**
     * @hidden
     */
    performAction(actionName) {
        this.actionClick.next(actionName);
    }
    /**
     * Programmatically selects a ListBox node.
     */
    selectItem(index) {
        this.selectionService.selectedIndex = index;
    }
    /**
     * Programmatically clears the ListBox selection.
     */
    clearSelection() {
        this.selectionService.clearSelection();
    }
    /**
     * The index of the currently selected item in the ListBox.
     */
    get selectedIndex() {
        return this.selectionService.selectedIndex;
    }
    /**
     * @hidden
     */
    getText(dataItem) {
        if (typeof dataItem !== 'string' && !this.textField && isDevMode()) {
            throw new Error('Missing textField input. When passing an array of objects as data, please set the textField input of the ListBox accordingly.');
        }
        return fieldAccessor(dataItem, this.textField);
    }
    setToolbarClass(pos) {
        Object.keys(toolbarClasses).forEach((className) => {
            if (pos === className) {
                this.renderer.addClass(this.hostElement.nativeElement, toolbarClasses[className]);
            }
            else {
                this.renderer.removeClass(this.hostElement.nativeElement, toolbarClasses[className]);
            }
        });
    }
}
ListBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxComponent, deps: [{ token: ListBoxSelectionService }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ListBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListBoxComponent, selector: "kendo-listbox", inputs: { textField: "textField", data: "data", size: "size", toolbar: "toolbar", itemDisabled: "itemDisabled" }, outputs: { selectionChange: "selectionChange", actionClick: "actionClick" }, host: { properties: { "class.k-listbox": "this.listboxClassName" } }, providers: [ListBoxSelectionService], queries: [{ propertyName: "itemTemplate", first: true, predicate: ItemTemplateDirective, descendants: true }], ngImport: i0, template: `
            <div class="k-listbox-toolbar" *ngIf="selectedTools.length > 0">
                <ul class="k-reset">
                    <li *ngFor="let tool of selectedTools">
                        <button kendoButton [icon]="tool.icon" (click)="performAction(tool.name)" role="button"></button>
                    </li>

                    <!-- react moving items has a smoother removal of the style: https://www.telerik.com/kendo-react-ui/components/listbox/ -->
                </ul>
            </div>
            <div class="k-list-scroller k-selectable">
                <div class="{{ listClasses }}">
                    <div class="k-list-content">
                        <ul class="k-list-ul">
                            <li
                                class="k-list-item"
                                *ngFor="let item of data; let i = index;"
                                kendoListBoxItemSelectable
                                [index]="i"
                                [class.k-disabled]="itemDisabled(item)"
                            >
                                <ng-template *ngIf="itemTemplate; else defaultItemTemplate"
                                    [templateContext]="{
                                        templateRef: itemTemplate.templateRef,
                                        $implicit: item
                                    }">
                                </ng-template>
                                <ng-template #defaultItemTemplate>
                                    <span class="k-list-item-text">{{ getText(item) }}</span>
                                </ng-template>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
    `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }, { type: ItemSelectableDirective, selector: "[kendoListBoxItemSelectable]", inputs: ["index"] }, { type: i3.TemplateContextDirective, selector: "[templateContext]", inputs: ["templateContext"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-listbox',
                    providers: [ListBoxSelectionService],
                    template: `
            <div class="k-listbox-toolbar" *ngIf="selectedTools.length > 0">
                <ul class="k-reset">
                    <li *ngFor="let tool of selectedTools">
                        <button kendoButton [icon]="tool.icon" (click)="performAction(tool.name)" role="button"></button>
                    </li>

                    <!-- react moving items has a smoother removal of the style: https://www.telerik.com/kendo-react-ui/components/listbox/ -->
                </ul>
            </div>
            <div class="k-list-scroller k-selectable">
                <div class="{{ listClasses }}">
                    <div class="k-list-content">
                        <ul class="k-list-ul">
                            <li
                                class="k-list-item"
                                *ngFor="let item of data; let i = index;"
                                kendoListBoxItemSelectable
                                [index]="i"
                                [class.k-disabled]="itemDisabled(item)"
                            >
                                <ng-template *ngIf="itemTemplate; else defaultItemTemplate"
                                    [templateContext]="{
                                        templateRef: itemTemplate.templateRef,
                                        $implicit: item
                                    }">
                                </ng-template>
                                <ng-template #defaultItemTemplate>
                                    <span class="k-list-item-text">{{ getText(item) }}</span>
                                </ng-template>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
    `
                }]
        }], ctorParameters: function () { return [{ type: ListBoxSelectionService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { listboxClassName: [{
                type: HostBinding,
                args: ['class.k-listbox']
            }], itemTemplate: [{
                type: ContentChild,
                args: [ItemTemplateDirective, { static: false }]
            }], textField: [{
                type: Input
            }], data: [{
                type: Input
            }], size: [{
                type: Input
            }], toolbar: [{
                type: Input
            }], itemDisabled: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], actionClick: [{
                type: Output
            }] } });

/**
 * A directive which manages the functoinality of the ListBox tools out of the box, and modifies the provided data accordingly.
 */
class DataBindingDirective {
    constructor(listbox) {
        this.listbox = listbox;
        this.actionClickSub = new Subscription();
        this.selectedBoxSub = new Subscription();
        this.selectedBox = this.listbox;
        this.actionClickSub.add(this.listbox.actionClick.subscribe((actionName) => {
            switch (actionName) {
                case 'moveUp': {
                    this.moveVertically('up');
                    break;
                }
                case 'moveDown': {
                    this.moveVertically('down');
                    break;
                }
                case 'transferTo': {
                    this.transferItem(this.connectedWith, this.listbox);
                    break;
                }
                case 'transferFrom': {
                    this.transferItem(this.listbox, this.connectedWith);
                    break;
                }
                case 'transferAllTo': {
                    this.transferAll(this.listbox, this.connectedWith);
                    break;
                }
                case 'transferAllFrom': {
                    this.transferAll(this.connectedWith, this.listbox);
                    break;
                }
                case 'remove': {
                    this.removeItem();
                    break;
                }
                default: {
                    break;
                }
            }
        }));
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (isChanged('connectedWith', changes, false)) {
            if (!changes.connectedWith.firstChange) {
                this.selectedBoxSub.unsubscribe();
                this.selectedBoxSub = new Subscription();
            }
            this.selectedBoxSub.add(this.listbox.selectionChange.subscribe(() => {
                this.selectedBox = this.listbox;
                this.connectedWith.clearSelection();
            }));
            this.selectedBoxSub.add(this.connectedWith.selectionChange.subscribe(() => {
                this.selectedBox = this.connectedWith;
                this.listbox.clearSelection();
            }));
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.actionClickSub) {
            this.actionClickSub.unsubscribe();
            this.actionClickSub = null;
        }
        if (this.selectedBoxSub) {
            this.selectedBoxSub.unsubscribe();
            this.selectedBoxSub = null;
        }
    }
    moveVertically(dir) {
        const index = this.selectedBox.selectedIndex;
        if (!isPresent(index)) {
            return;
        }
        const topReached = dir === 'up' && index <= 0;
        const bottomReached = dir === 'down' && index >= this.selectedBox.data.length - 1;
        if (topReached || bottomReached) {
            return;
        }
        const newIndex = dir === 'up' ? index - 1 : index + 1;
        // ES6 Destructuring swap
        [this.selectedBox.data[newIndex], this.selectedBox.data[index]] = [this.selectedBox.data[index], this.selectedBox.data[newIndex]];
        this.selectedBox.selectionService.select(newIndex);
    }
    removeItem() {
        const index = this.selectedBox.selectedIndex;
        if (!isPresent(index)) {
            return;
        }
        this.selectedBox.data.splice(index, 1);
        this.selectedBox.selectionService.clearSelection();
    }
    transferItem(source, target) {
        const item = source && source.data[source.selectedIndex];
        if (!item || !target || !source) {
            return;
        }
        target.data.push(item);
        source.data.splice(source.selectedIndex, 1);
        source.clearSelection();
        target.selectItem(target.data.length - 1);
        this.selectedBox = target;
    }
    transferAll(source, target) {
        if (!target || !source) {
            return;
        }
        target.data.splice(target.data.length, 0, ...source.data.splice(0, source.data.length));
        target.selectItem(target.data.length - 1);
        this.selectedBox = target;
    }
}
DataBindingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DataBindingDirective, deps: [{ token: ListBoxComponent }], target: i0.ɵɵFactoryTarget.Directive });
DataBindingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DataBindingDirective, selector: "[kendoListBoxDataBinding]", inputs: { connectedWith: "connectedWith" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DataBindingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoListBoxDataBinding]'
                }]
        }], ctorParameters: function () { return [{ type: ListBoxComponent }]; }, propDecorators: { connectedWith: [{
                type: Input
            }] } });

/**
 * Represents the [NgModule](https://angular.io/api/core/NgModule) definition for the ListBox component.
 */
class ListBoxModule {
}
ListBoxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ListBoxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxModule, declarations: [ListBoxComponent, ItemTemplateDirective, ItemSelectableDirective, DataBindingDirective], imports: [ButtonsModule, CommonModule], exports: [ListBoxComponent, ItemTemplateDirective, ItemSelectableDirective, DataBindingDirective] });
ListBoxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxModule, imports: [[ButtonsModule, CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListBoxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ButtonsModule, CommonModule],
                    declarations: [ListBoxComponent, ItemTemplateDirective, ItemSelectableDirective, DataBindingDirective],
                    exports: [ListBoxComponent, ItemTemplateDirective, ItemSelectableDirective, DataBindingDirective]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DataBindingDirective, ItemSelectableDirective, ItemTemplateDirective, ListBoxComponent, ListBoxModule };

