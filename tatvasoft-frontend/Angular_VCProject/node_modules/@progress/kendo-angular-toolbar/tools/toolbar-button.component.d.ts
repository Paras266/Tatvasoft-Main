/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, EventEmitter, ElementRef } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { DisplayMode } from '../display-mode';
import { ToolOptions } from '../tool-options';
import { ButtonFillMode, ButtonThemeColor } from '@progress/kendo-angular-buttons';
import * as i0 from "@angular/core";
/**
 * Represents the [Kendo UI ToolBar Button tool for Angular]({% slug controltypes_toolbar %}#toc-buttons).
 */
export declare class ToolBarButtonComponent extends ToolBarToolComponent {
    /**
     * Specifies where button text should be displayed
     */
    set showText(value: DisplayMode);
    get showText(): DisplayMode;
    /**
     * Specifies where button icon should be displayed
     */
    showIcon: DisplayMode;
    /**
     * Specifies the text of the Button ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
     */
    text: string;
    /**
     * Specifies custom inline CSS styles of the Button.
     */
    style: {
        [key: string]: string | number;
    };
    /**
     * Specifies custom CSS class names that will be added to the Button.
     */
    className: string | Array<string> | {
        [key: string]: boolean;
    };
    /**
     * Specifies the title of the Button.
     */
    title: string;
    /**
     * If `disabled` is set to `true`, the Button is disabled
     * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
     */
    disabled: boolean;
    /**
     * Provides visual styling that indicates if the Button is active
     * ([see example]({% slug controltypes_toolbar %}#toc-toggle-buttons)).
     * By default, `toggleable` is set to `false`.
     */
    toggleable: boolean;
    /**
     * @hidden
     */
    set look(look: 'default' | 'flat' | 'outline');
    /**
     * @hidden
     */
    get togglable(): boolean;
    set togglable(value: boolean);
    /**
     * Sets the selected state of the Button.
     */
    selected: boolean;
    /**
     * The fillMode property specifies the background and border styles of the Button.
     *
     * The available values are:
     * * `solid` (default)
     * * `flat`
     * * `outline`
     * * `link`
     * * `null`
     */
    fillMode: ButtonFillMode;
    /**
     * The Button allows you to specify predefined theme colors.
     * The theme color will be applied as a background and border color while also amending the text color accordingly
     * ([see example]({% slug api_buttons_dropdownbuttoncomponent %}#toc-themeColor)).
     *
     * The possible values are:
     * * `base` &mdash;Applies coloring based on the `base` theme color. (default)
     * * `primary` &mdash;Applies coloring based on the `primary` theme color.
     * * `secondary`&mdash;Applies coloring based on the `secondary` theme color.
     * * `tertiary`&mdash; Applies coloring based on the `tertiary` theme color.
     * * `info`&mdash;Applies coloring based on the `info` theme color.
     * * `success`&mdash; Applies coloring based on the `success` theme color.
     * * `warning`&mdash; Applies coloring based on the `warning` theme color.
     * * `error`&mdash; Applies coloring based on the `error` theme color.
     * * `dark`&mdash; Applies coloring based on the `dark` theme color.
     * * `light`&mdash; Applies coloring based on the `light` theme color.
     * * `inverse`&mdash; Applies coloring based on the `inverse` theme color.
     * * `null` &mdash;Removes the default CSS class (no class would be rendered).
     */
    themeColor: ButtonThemeColor;
    /**
     * Defines the name for an existing icon in a Kendo UI theme
     * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    set icon(icon: string);
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    set iconClass(iconClass: string);
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    set imageUrl(imageUrl: string);
    /**
     * Fires each time the Button is clicked.
     */
    click: EventEmitter<any>;
    /**
     * Fires when the Button [pointerdown](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerdown_event) event is triggered.
     */
    pointerdown: EventEmitter<any>;
    /**
     * Fires each time the selected state of a Toggle Button is changed.
     * The event argument is the new selected state (Boolean).
     */
    selectedChange: EventEmitter<any>;
    toolbarTemplate: TemplateRef<any>;
    popupTemplate: TemplateRef<any>;
    toolbarOptions: ToolOptions;
    overflowOptions: ToolOptions;
    toolbarButtonElement: ElementRef;
    private overflowButtonElement;
    private _showText;
    constructor();
    ngOnInit(): void;
    /**
     * @hidden
     */
    onBlur(): void;
    /**
     * @hidden
     */
    canFocus(): boolean;
    /**
     * @hidden
     */
    focus(ev: Event): void;
    /**
     * @hidden
     */
    handleKey(): boolean;
    private getButton;
    private setTextDisplayMode;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToolBarButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToolBarButtonComponent, "kendo-toolbar-button", ["kendoToolBarButton"], { "showText": "showText"; "showIcon": "showIcon"; "text": "text"; "style": "style"; "className": "className"; "title": "title"; "disabled": "disabled"; "toggleable": "toggleable"; "look": "look"; "togglable": "togglable"; "selected": "selected"; "fillMode": "fillMode"; "themeColor": "themeColor"; "icon": "icon"; "iconClass": "iconClass"; "imageUrl": "imageUrl"; }, { "click": "click"; "pointerdown": "pointerdown"; "selectedChange": "selectedChange"; }, never, never>;
}
