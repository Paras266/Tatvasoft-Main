/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, ViewChild, forwardRef, EventEmitter } from '@angular/core';
import { interval } from 'rxjs';
import { concatMap, take, takeUntil } from 'rxjs/operators';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { outerWidth } from '../../util';
import { InsertTableDialogComponent } from '../../dialogs/insert-table-dialog.component';
import { Keys } from '@progress/kendo-angular-common';
import * as i0 from "@angular/core";
import * as i1 from "../../localization/editor-localization.service";
import * as i2 from "@progress/kendo-angular-popup";
import * as i3 from "@progress/kendo-angular-dialog";
import * as i4 from "../../common/provider.service";
import * as i5 from "./popup-table-grid.component";
import * as i6 from "@progress/kendo-angular-buttons";
const popupWrapperWidth = '190px';
const popupWrapperHeight = '164px'; // Set to '192px' when TableWizard button is added;
/**
 * A toolbar component which allows the user to create and insert a table in the Editor's content.
 *
 * @example
 * ```ts-no-run
 * <kendo-editor-insert-table-button></kendo-editor-insert-table-button>
 * ```
 */
export class EditorInsertTableButtonComponent extends ToolBarToolComponent {
    constructor(localization, popupService, dialogService, providerService) {
        super();
        this.localization = localization;
        this.popupService = popupService;
        this.dialogService = dialogService;
        this.open = false;
        this.buttonBlurred = new EventEmitter();
        this.cellClicked = new EventEmitter();
        this.editor = providerService.editor;
        this.subs = this.editor.stateChange.subscribe(({ insertTable }) => {
            this.disabled = insertTable.disabled;
        });
        this.subs.add(this.buttonBlurred.pipe(concatMap(() => interval(200).pipe(take(1), takeUntil(this.cellClicked)))).subscribe(() => {
            this.toggle(false);
        }));
    }
    ngOnDestroy() {
        this.destroyPopup();
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('insertTable');
    }
    /**
     * @hidden
     */
    toggle(open) {
        this.open = open === undefined ? !this.open : open;
        this.destroyPopup();
        if (this.open) {
            this.createPopup();
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: InsertTableDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor
        });
    }
    /**
     * @hidden
     */
    onBlur() {
        this.tabIndex = -1;
        this.buttonBlurred.emit();
    }
    /**
     * @hidden
     */
    onCellClick(args) {
        this.cellClicked.emit();
        this.toggle(false);
        this.editor.exec('insertTable', args);
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabIndex = 0;
        this.getButton().focus();
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        if (ev.keyCode === Keys.Space || ev.keyCode === Keys.Enter) {
            return true;
        }
        this.tabIndex = -1;
        return false;
    }
    /**
     * @hidden
     */
    onTableWizardClick() {
        // this.toggle(false);
        // this.editor.openDialog("tableWizard");
    }
    createPopup() {
        const horizontalAlign = this.editor.direction === 'rtl' ? 'right' : 'left';
        const anchorPosition = { horizontal: horizontalAlign, vertical: 'bottom' };
        const popupPosition = { horizontal: horizontalAlign, vertical: 'top' };
        this.popupRef = this.popupService.open({
            anchor: this.element,
            anchorAlign: anchorPosition,
            animate: true,
            content: this.popupGridTemplate,
            popupAlign: popupPosition,
            popupClass: 'k-ct-popup k-group k-reset k-state-border-up',
            positionMode: 'absolute'
        });
        const popupWrapper = this.popupRef.popupElement;
        popupWrapper.style.width = popupWrapperWidth;
        popupWrapper.style.height = popupWrapperHeight;
        popupWrapper.setAttribute('dir', this.editor.direction);
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    getButton() {
        return (this.overflows ? this.overflowElement : this.element).nativeElement;
    }
}
EditorInsertTableButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertTableButtonComponent, deps: [{ token: i1.EditorLocalizationService }, { token: i2.PopupService }, { token: i3.DialogService }, { token: i4.ProviderService }], target: i0.ɵɵFactoryTarget.Component });
EditorInsertTableButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertTableButtonComponent, selector: "kendo-editor-insert-table-button", providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorInsertTableButtonComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true }, { propertyName: "element", first: true, predicate: ["element"], descendants: true }, { propertyName: "overflowElement", first: true, predicate: ["overflowElement"], descendants: true }, { propertyName: "popupGridTemplate", first: true, predicate: ["popupGridTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <button
                type="button"
                kendoButton
                #element
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="toggle()"
                (blur)="onBlur()"
            ></button>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                kendoButton
                #overflowElement
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="openDialog()">
                {{ title }}
            </button>
        </ng-template>
        <ng-template #popupGridTemplate>
            <kendo-popup-table-grid (cellClick)="onCellClick($event)" (tableWizardClick)="onTableWizardClick()"></kendo-popup-table-grid>
        </ng-template>
    `, isInline: true, components: [{ type: i5.PopupTableGridComponent, selector: "kendo-popup-table-grid", outputs: ["cellClick", "tableWizardClick"] }], directives: [{ type: i6.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertTableButtonComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorInsertTableButtonComponent) }],
                    selector: 'kendo-editor-insert-table-button',
                    template: `
        <ng-template #toolbarTemplate>
            <button
                type="button"
                kendoButton
                #element
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="toggle()"
                (blur)="onBlur()"
            ></button>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                kendoButton
                #overflowElement
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="openDialog()">
                {{ title }}
            </button>
        </ng-template>
        <ng-template #popupGridTemplate>
            <kendo-popup-table-grid (cellClick)="onCellClick($event)" (tableWizardClick)="onTableWizardClick()"></kendo-popup-table-grid>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.EditorLocalizationService }, { type: i2.PopupService }, { type: i3.DialogService }, { type: i4.ProviderService }]; }, propDecorators: { toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: false }]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: false }]
            }], overflowElement: [{
                type: ViewChild,
                args: ['overflowElement', { static: false }]
            }], popupGridTemplate: [{
                type: ViewChild,
                args: ['popupGridTemplate', { static: true }]
            }] } });
