/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ViewContainerRef, ElementRef, EventEmitter, ChangeDetectorRef, NgZone, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { ToolBarComponent } from '@progress/kendo-angular-toolbar';
import { DialogService } from '@progress/kendo-angular-dialog';
import { EditorView, Schema } from '@progress/kendo-editor-common';
import { Direction } from './common/direction';
import { EditorCommand, DialogCommand } from './common/commands';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PasteCleanupSettings } from './common/paste-cleanup-settings';
import { PluginsFn } from './common/plugins-function';
import { ApplyToWordOptions } from './common/apply-to-word-options';
import { ProviderService } from './common/provider.service';
import { EditorResizableOptions } from './common/resizable-options.interface';
import { EditorToolsService } from './tools/tools.service';
import { EditorPasteEvent } from './preventable-events/paste-event';
import * as i0 from "@angular/core";
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
export declare class EditorComponent implements AfterViewInit, ControlValueAccessor {
    private dialogService;
    private localization;
    private cdr;
    private ngZone;
    private element;
    private providerService;
    private toolsService;
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    set value(value: string);
    get value(): string;
    /**
     * Sets the disabled state of the component.
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    /**
     * Sets the read-only state of the component.
     */
    set readonly(value: boolean);
    get readonly(): boolean;
    /**
     * If set to `false`, the Editor will run in style non-encapsulated mode. This means
     * that the styles of the page will be persisted in the Editor and its content will be affected by them.
     * @default true
     */
    iframe: boolean;
    /**
     * If set to `true` or `ApplyToWordOptions` object, commands that apply emphasis or inline styles will be applied to the whole word the cursor is in.
     * @default false
     */
    applyToWord: boolean | ApplyToWordOptions;
    /**
     * Allows providing a custom schema. ([see example]({% slug schema_editor %}))
     */
    set schema(value: Schema);
    get schema(): Schema;
    /**
     * Defines a function which determines the plugins that will be used when initializing the Editor.
     * It exposes the default plugins collection as an argument, and returns
     * the plugins collection that will be used when creating the Editor component. ([see example]({% slug plugins_editor %}))
     *
     * ```ts-no-run
     *  pluginsCallback(defaultPlugins: Plugin[]): Plugin[] {
     *    const myPlugin = new Plugin({/custom plugin code/});
     *    return [...defaultPlugins, myPlugin];
     *  }
     * ```
     */
    set plugins(fn: PluginsFn);
    get plugins(): PluginsFn;
    /**
     * The hint, which is displayed when the component is empty.
     */
    set placeholder(value: string);
    get placeholder(): string;
    /**
     * By default, whitespace is collapsed as per HTML's rules.
     * Set to `true` to preserve whitespace, but normalize newlines to spaces.
     * Set to `'full'` to preserve whitespace entirely. In this case the default ProseMirror behavior is to parse white space into nodes.
     *
     * @default false
     */
    preserveWhitespace: boolean | 'full';
    /**
     * Configures how pasted content is modified before it is added to the Editor ([see example]({% slug paste_cleanup %})).
     */
    pasteCleanupSettings: PasteCleanupSettings;
    /**
     * Determines whether the Editor can be resized ([see example]({% slug styling_editor %}#toc-resizable-editor)).
     * @default false
     */
    resizable: boolean | EditorResizableOptions;
    /**
     * Fires each time the value of the Editor is changed upon user interaction&mdash;
     * for example, when the value is updated through typing in the content area or using some of the Editor tools ([see example]({% slug overview_editor %}#toc-events)).
     * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
     * the `valueChange` event is not triggered because it might cause a mix-up with the
     * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
     */
    valueChange: EventEmitter<string>;
    /**
     * Fires when the content area of the Editor is focused ([see example]({% slug overview_editor %}#toc-events)).
     */
    onFocus: EventEmitter<undefined>;
    /**
     * Fires when the user performs paste in the content area of the Editor ([see example]({% slug overview_editor %}#toc-events)).
     * The event is preventable. If you cancel it, the Editor content will not change.
     */
    paste: EventEmitter<EditorPasteEvent>;
    /**
     * Fires when the content area of the Editor is blurred ([see example]({% slug overview_editor %}#toc-events)).
     */
    onBlur: EventEmitter<undefined>;
    hostClass: boolean;
    get resizableClass(): boolean;
    get isDisabled(): boolean;
    get isReadonly(): boolean;
    get isIE(): boolean;
    get dir(): Direction;
    get ariaDisabled(): boolean;
    get minWidth(): string;
    get maxWidth(): string;
    get minHeight(): string;
    get maxHeight(): string;
    /**
     * @hidden
     */
    stateChange: BehaviorSubject<any>;
    get toolbar(): ToolBarComponent;
    get toolbarElement(): ElementRef;
    /**
     * Returns the ProseMirror [EditorView](https://prosemirror.net/docs/ref/#view.EditorView) object
     * that manages the DOM structure that represents an editable document.
     */
    get view(): EditorView;
    /**
     * Returns the text which the current Editor selection contains ([see example]({% slug selection_editor %}#toc-retrieve-the-selected-text)).
     */
    get selectionText(): string;
    /**
     * @hidden
     */
    valueModified: Subject<any>;
    userToolBarComponent: ToolBarComponent;
    userToolBarElement: ElementRef;
    dialogContainer: ViewContainerRef;
    container: ViewContainerRef;
    direction: Direction;
    viewMountElement: HTMLElement;
    /**
     * @hidden
     */
    focusChangedProgrammatically: boolean;
    /**
     * @hidden
     */
    shouldEmitFocus: boolean;
    private defaultToolbar;
    private defaultToolbarComponent;
    private subs;
    private _view;
    private _value;
    private _disabled;
    private _readonly;
    private _schema;
    private _plugins;
    private _placeholder;
    private _styleObserver;
    private trOnChange;
    private htmlOnChange;
    private inForm;
    private _pasteEvent;
    private afterViewInit;
    private contentAreaLoaded;
    constructor(dialogService: DialogService, localization: LocalizationService, cdr: ChangeDetectorRef, ngZone: NgZone, element: ElementRef, providerService: ProviderService, toolsService: EditorToolsService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    iframeOnLoad(): void;
    /**
     * Executes a command on the currently selected text
     * ([more information and example]({% slug toolbartools_editor %}#toc-custom-tools)).
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list,
     * the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p` and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     * - `insertTable` - Accepts an object with the `rows` and `cols` properties. The number values are zero based.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Inserts a file.
     * editor.exec('insertFile', { href: 'www.progress.com/resources/myfile.doc', title: 'My file', target: 'window' });
     *
     * // Inserts a image.
     * editor.exec('insertImage', { src: 'www.progress.com/resources/logo.jpg', title: 'Progress', target: 'window' });
     *
     * // Inserts a text at a given position. If no position is specified, the text will be inserted after the cursor.
     * editor.exec('insertText', { text: 'Hello World!', from: 0, to: 0 });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the font size of the selected text.
     * editor.exec('fontSize', 24);
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     *
     * // Creates and inserts a table with the specified number of rows and columns. Numbers are zero based.
     * this.editor.exec("insertTable", { rows: 3, cols: 5 });
     * ```
     */
    exec(commandName: EditorCommand, attr?: any): void;
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     * * `insertFile`
     * * `insertImage`
     * * `tableWizard`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.openDialog('viewSource');
     * ```
     */
    openDialog(dialogName: DialogCommand): void;
    /**
     * Manually focus the Editor.
     */
    focus(): void;
    /**
     * Manually blur the Editor.
     */
    blur(): void;
    /**
     * @hidden
     */
    getSource(): string;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    writeValue(value: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: Function): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: Function): void;
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty(): boolean;
    private initialize;
    private dispatchTransaction;
    private transformPastedHTML;
    private changeValue;
    private onChangeCallback;
    private normalizeSize;
    private normalizeProperties;
    private onTouchedCallback;
    private onPaste;
    private dispatchPasteEvent;
    static Éµfac: i0.ÉµÉµFactoryDeclaration<EditorComponent, never>;
    static Éµcmp: i0.ÉµÉµComponentDeclaration<EditorComponent, "kendo-editor", never, { "value": "value"; "disabled": "disabled"; "readonly": "readonly"; "iframe": "iframe"; "applyToWord": "applyToWord"; "schema": "schema"; "plugins": "plugins"; "placeholder": "placeholder"; "preserveWhitespace": "preserveWhitespace"; "pasteCleanupSettings": "pasteCleanupSettings"; "resizable": "resizable"; }, { "valueChange": "valueChange"; "onFocus": "focus"; "paste": "paste"; "onBlur": "blur"; }, ["userToolBarComponent", "userToolBarElement"], ["kendo-toolbar"]>;
}
