/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, ElementRef, QueryList, EventEmitter, ViewContainerRef, NgZone, Renderer2, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { PopupService, PopupRef } from '@progress/kendo-angular-popup';
import { ResizeSensorComponent } from '@progress/kendo-angular-common';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { RefreshService } from './refresh.service';
import { NavigationService } from './navigation.service';
import { PopupSettings } from './popup-settings';
import { ToolBarToolComponent } from './tools/toolbar-tool.component';
import { PreventableEvent } from './common/preventable-event';
import { ToolBarRendererComponent } from './renderer.component';
import { Direction } from './direction';
import { RendererClickPayload } from './common/renderer-click';
import * as i0 from "@angular/core";
/**
 * Represents the [Kendo UI ToolBar component for Angular]({% slug overview_toolbar %}).
 */
export declare class ToolBarComponent {
    private localization;
    private popupService;
    private refreshService;
    private navigationService;
    private element;
    private zone;
    private renderer;
    private _cdr;
    /**
     * Hides the overflowing tools in a popup.
     */
    overflow: boolean;
    /**
     * @hidden
     */
    set resizable(value: boolean);
    get resizable(): boolean;
    /**
     * Configures the popup of the ToolBar drop-down list.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings: PopupSettings);
    get popupSettings(): PopupSettings;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the ToolBar.
     */
    tabindex: number;
    /**
     * @hidden
     */
    set tabIndex(tabIndex: number);
    get tabIndex(): number;
    /**
     * Fires when the overflow popup of the ToolBar is opened.
     */
    open: EventEmitter<PreventableEvent>;
    /**
     * Fires when the overflow popup of the ToolBar is closed.
     */
    close: EventEmitter<PreventableEvent>;
    allTools: QueryList<ToolBarToolComponent>;
    overflowButton: ElementRef;
    popupTemplate: TemplateRef<any>;
    resizeSensor: ResizeSensorComponent;
    container: ViewContainerRef;
    renderedTools: QueryList<ToolBarRendererComponent>;
    overflowRenderedTools: QueryList<ToolBarRendererComponent>;
    popupRef: PopupRef;
    direction: Direction;
    get appendTo(): ViewContainerRef;
    set popupOpen(open: boolean);
    get popupOpen(): boolean;
    hostClasses: boolean;
    private _popupSettings;
    private cachedOverflowAnchorWidth;
    private _open;
    private toolbarKeydownListener;
    private overflowKeydownListener;
    private cancelRenderedToolsSubscription$;
    private cachedGap;
    private subscriptions;
    private popupSubs;
    /**
     * @hidden
     */
    onFocus(ev: any): void;
    /**
     * @hidden
     */
    onFocusOut(event: any): void;
    role: string;
    get getDir(): string;
    get resizableClass(): boolean;
    constructor(localization: LocalizationService, popupService: PopupService, refreshService: RefreshService, navigationService: NavigationService, element: ElementRef, zone: NgZone, renderer: Renderer2, _cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    get moreToolsTitle(): string;
    /**
     * @hidden
     */
    get cdr(): ChangeDetectorRef;
    /**
     * @hidden
     */
    onRendererClick(data: RendererClickPayload): void;
    /**
     * @hidden
     */
    showPopup(): void;
    /**
     * Toggles the visibility of the overflow popup.
     */
    toggle(popupOpen?: boolean): void;
    /**
     * @hidden
     */
    onResize(): void;
    /**
     * @hidden
     */
    onPopupOpen(): void;
    /**
     * @hidden
     */
    onPopupClose(): void;
    /**
     * @hidden
     */
    overflowBtnId: string;
    /**
     * @hidden
     */
    popupId: string;
    private displayAnchor;
    private get popupWidth();
    private get popupHeight();
    private get overflowAnchorWidth();
    private get gap();
    private get childrenWidth();
    private get visibleTools();
    private get overflowTools();
    private shrink;
    private stretch;
    private hideLastVisibleTool;
    private showFirstHiddenTool;
    private setPopupContentDimensions;
    private destroyPopup;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToolBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToolBarComponent, "kendo-toolbar", ["kendoToolBar"], { "overflow": "overflow"; "resizable": "resizable"; "popupSettings": "popupSettings"; "tabindex": "tabindex"; "tabIndex": "tabIndex"; }, { "open": "open"; "close": "close"; }, ["allTools"], never>;
}
