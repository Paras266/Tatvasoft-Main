/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, forwardRef, ViewChild, ContentChildren, Input } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { ToolBarButtonComponent } from './toolbar-button.component';
import { makePeeker, getIndexOfFocused, seekFocusedIndex, getNextKey, getPrevKey, areEqual } from '../util';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
import * as i2 from "@progress/kendo-angular-buttons";
import * as i3 from "@angular/common";
/**
 * Represents the Kendo UI Toolbar ButtonGroup for Angular.
 */
export class ToolBarButtonGroupComponent extends ToolBarToolComponent {
    constructor(localization) {
        super();
        this.localization = localization;
        /**
         * By default, the selection mode of the ButtonGroup is set to `multiple`.
         */
        this.selection = 'multiple';
        this.focusedIndex = -1;
        this.getNextKey = getNextKey(this.localization.rtl);
        this.getPrevKey = getPrevKey(this.localization.rtl);
    }
    /**
     * @hidden
     */
    set look(look) {
        if (look) {
            this.buttonComponents.forEach(b => b.fillMode = look === 'default' ? 'solid' : look);
        }
    }
    get buttonElements() {
        return this.getButtonGroup()
            .buttons.filter(b => !b.isDisabled)
            .map(b => b.element);
    }
    /**
     * @hidden
     */
    onFocus() {
        // triggered on tabin
        this.focusedIndex = 0;
    }
    /**
     * @hidden
     */
    onNavigate(ev) {
        ev.preventDefault();
    }
    /**
     * @hidden
     */
    selectedChangeHandler(state, button) {
        button.selected = state;
        button.selectedChange.emit(state);
    }
    /**
     * @hidden
     */
    onButtonClick(ev) {
        this.focusedIndex = this.buttonElements.findIndex(be => be === ev.target || be.contains(ev.target));
        this.focusButton(this.focusedIndex, ev);
    }
    /**
     * @hidden
     */
    canFocus() {
        return !(this.disabled || this.buttonElements.length === 0);
    }
    /**
     * @hidden
     */
    focus(ev = {}) {
        const nextKey = this.getNextKey(this.overflows);
        const prevKey = this.getPrevKey(this.overflows);
        this.focusedIndex = getIndexOfFocused(prevKey, nextKey, this.buttonElements)(ev);
        this.focusButton(this.focusedIndex, ev);
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        const nextKey = this.getNextKey(this.overflows);
        const prevKey = this.getPrevKey(this.overflows);
        const peekAtIndex = makePeeker(this.buttonElements);
        const isUnmodified = areEqual(this.focusedIndex);
        this.focusedIndex = seekFocusedIndex(prevKey, nextKey, peekAtIndex)(this.focusedIndex, ev);
        this.focusButton(this.focusedIndex, ev);
        return !isUnmodified(this.focusedIndex);
    }
    getButtonGroup() {
        return this.overflows ? this.overflowButtonGroup : this.toolbarButtonGroup;
    }
    focusButton(index, ev) {
        var _a;
        // Guard against focusing twice on mousedown.
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown') {
            (_a = this.buttonElements[index]) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
}
ToolBarButtonGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToolBarButtonGroupComponent, deps: [{ token: i1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
ToolBarButtonGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ToolBarButtonGroupComponent, selector: "kendo-toolbar-buttongroup", inputs: { disabled: "disabled", selection: "selection", width: "width", look: "look" }, providers: [LocalizationService, { provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarButtonGroupComponent) }], queries: [{ propertyName: "buttonComponents", predicate: i0.forwardRef(function () { return ToolBarButtonComponent; }) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "toolbarButtonGroup", first: true, predicate: ["toolbarButtonGroup"], descendants: true }, { propertyName: "overflowButtonGroup", first: true, predicate: ["overflowButtonGroup"], descendants: true }], exportAs: ["kendoToolBarButtonGroup"], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-buttongroup
                #toolbarButtonGroup
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [width]="width"
                (navigate)="onNavigate($event)"
                (focus)="onFocus()"
            >
                <span
                    kendoButton
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [selected]="button.selected"
                    [fillMode]="button.fillMode"
                    [themeColor]="button.fillMode ? button.themeColor : null"
                    [icon]="button.toolbarOptions.icon"
                    [iconClass]="button.toolbarOptions.iconClass"
                    [imageUrl]="button.toolbarOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (pointerdown)="button.pointerdown.emit($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.toolbarOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
        <ng-template #popupTemplate>
            <kendo-buttongroup
                #overflowButtonGroup
                class="k-overflow-button"
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [width]="width"
            >
                <span
                    kendoButton
                    class="k-overflow-button"
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [selected]="button.selected"
                    [fillMode]="button.fillMode"
                    [themeColor]="button.fillMode ? button.themeColor : null"
                    [icon]="button.overflowOptions.icon"
                    [iconClass]="button.overflowOptions.iconClass"
                    [imageUrl]="button.overflowOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.overflowOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
    `, isInline: true, components: [{ type: i2.ButtonGroupComponent, selector: "kendo-buttongroup", inputs: ["disabled", "selection", "width", "tabIndex", "navigable"], outputs: ["navigate"], exportAs: ["kendoButtonGroup"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToolBarButtonGroupComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoToolBarButtonGroup',
                    providers: [LocalizationService, { provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarButtonGroupComponent) }],
                    selector: 'kendo-toolbar-buttongroup',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-buttongroup
                #toolbarButtonGroup
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [width]="width"
                (navigate)="onNavigate($event)"
                (focus)="onFocus()"
            >
                <span
                    kendoButton
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [selected]="button.selected"
                    [fillMode]="button.fillMode"
                    [themeColor]="button.fillMode ? button.themeColor : null"
                    [icon]="button.toolbarOptions.icon"
                    [iconClass]="button.toolbarOptions.iconClass"
                    [imageUrl]="button.toolbarOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (pointerdown)="button.pointerdown.emit($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.toolbarOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
        <ng-template #popupTemplate>
            <kendo-buttongroup
                #overflowButtonGroup
                class="k-overflow-button"
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [width]="width"
            >
                <span
                    kendoButton
                    class="k-overflow-button"
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [selected]="button.selected"
                    [fillMode]="button.fillMode"
                    [themeColor]="button.fillMode ? button.themeColor : null"
                    [icon]="button.overflowOptions.icon"
                    [iconClass]="button.overflowOptions.iconClass"
                    [imageUrl]="button.overflowOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.overflowOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; }, propDecorators: { disabled: [{
                type: Input
            }], selection: [{
                type: Input
            }], width: [{
                type: Input
            }], look: [{
                type: Input
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], buttonComponents: [{
                type: ContentChildren,
                args: [forwardRef(() => ToolBarButtonComponent)]
            }], toolbarButtonGroup: [{
                type: ViewChild,
                args: ['toolbarButtonGroup', { static: false }]
            }], overflowButtonGroup: [{
                type: ViewChild,
                args: ['overflowButtonGroup', { static: false }]
            }] } });
