import { Component, HostBinding, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { LoadingStrategy, GalleryItemType } from '../models/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./templates/gallery-image.component";
import * as i3 from "./templates/gallery-video.component";
import * as i4 from "./templates/gallery-iframe.component";
export class GalleryItemComponent {
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        this.Types = GalleryItemType;
        /** A flag that ensure that the height was emitted after tbe image is loaded, used only for gallery image types */
        this.imageLoadingState = 'IN_PROGRESS';
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    get isActive() {
        return this.index === this.currIndex;
    }
    get isIndexAttr() {
        return this.index;
    }
    get imageState() {
        return this.imageLoadingState;
    }
    get element() {
        return this.el.nativeElement;
    }
    get isAutoPlay() {
        if (this.isActive) {
            if (this.type === GalleryItemType.Video || this.type === GalleryItemType.Youtube) {
                return this.videoData.autoplay;
            }
        }
    }
    get youtubeSrc() {
        let autoplay = 0;
        if (this.isActive && this.type === GalleryItemType.Youtube && this.data.autoplay) {
            autoplay = 1;
        }
        const url = new URL(this.data.src);
        url.search = new URLSearchParams({
            wmode: 'transparent',
            ...this.data.params,
            autoplay
        }).toString();
        return url.href;
    }
    get load() {
        switch (this.config.loadingStrategy) {
            case LoadingStrategy.Preload:
                return true;
            case LoadingStrategy.Lazy:
                return this.currIndex === this.index;
            default:
                return this.currIndex === this.index || this.currIndex === this.index - 1 || this.currIndex === this.index + 1;
        }
    }
    get imageData() {
        return this.data;
    }
    get videoData() {
        return this.data;
    }
    ngAfterViewChecked() {
        const height = this.getHeight();
        this.element.style.setProperty('--g-item-width', `${this.getWidth()}px`);
        this.element.style.setProperty('--g-item-height', `${height}px`);
        if (this.currIndex === this.index) {
            // Auto-height feature, only allowed when sliding direction is horizontal
            const isThumbPositionHorizontal = this.config.thumbPosition === 'top' || this.config.thumbPosition === 'bottom';
            if (this.config.autoHeight && height && isThumbPositionHorizontal) {
                // Change slider height
                this.element.parentElement.parentElement.style.height = `${height}px`;
            }
        }
    }
    onItemLoaded() {
        if (this.imageLoadingState === 'IN_PROGRESS') {
            this.imageLoadingState = 'DONE';
            // Detect changes to re-calculate item size
            this.cd.detectChanges();
        }
    }
    getWidth() {
        if (this.config.slidingDirection === 'horizontal') {
            const firstElementChild = this.element?.firstElementChild;
            if (this.config.itemAutosize && this.imageLoadingState === 'DONE' && firstElementChild?.clientWidth) {
                return firstElementChild.clientWidth;
            }
        }
        return this.element.parentElement.parentElement.clientWidth;
    }
    getHeight() {
        const firstElementChild = this.element.firstElementChild;
        if (firstElementChild) {
            if (this.config.autoHeight) {
                if (this.imageLoadingState === 'DONE' && firstElementChild.clientHeight) {
                    return firstElementChild.clientHeight;
                }
            }
            if (this.config.slidingDirection === 'vertical') {
                if (this.config.itemAutosize && this.imageLoadingState === 'DONE' && firstElementChild.clientHeight) {
                    return firstElementChild.clientHeight;
                }
            }
        }
        return this.element.parentElement.parentElement.clientHeight;
    }
}
GalleryItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryItemComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
GalleryItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: GalleryItemComponent, selector: "gallery-item", inputs: { config: "config", index: "index", currIndex: "currIndex", type: "type", data: "data" }, outputs: { error: "error" }, host: { properties: { "class.g-active-item": "this.isActive", "attr.galleryIndex": "this.isIndexAttr", "attr.imageState": "this.imageState" } }, ngImport: i0, template: `
    <ng-container *ngIf="load" [ngSwitch]="type">
      <ng-container *ngSwitchCase="Types.Image">

        <gallery-image [src]="imageData.src"
                       [alt]="imageData.alt"
                       [loadingIcon]="config.loadingIcon"
                       [loadingError]="config.loadingError"
                       (loaded)="onItemLoaded()"
                       (error)="error.emit($event)"></gallery-image>

        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: { index, type, data, isActive }">
          </ng-container>
        </div>

      </ng-container>

      <gallery-video *ngSwitchCase="Types.Video"
                     [src]="videoData.src"
                     [mute]="videoData.mute"
                     [poster]="videoData.poster"
                     [controls]="videoData.controls"
                     [controlsList]="videoData.controlsList"
                     [disablePictureInPicture]="videoData.disablePictureInPicture"
                     [play]="isAutoPlay"
                     [pause]="currIndex !== index"
                     (error)="error.emit($event)"></gallery-video>

      <gallery-iframe *ngSwitchCase="Types.Youtube"
                      [src]="youtubeSrc"
                      [autoplay]="isAutoPlay"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Iframe"
                      [src]="data.src"></gallery-iframe>

      <ng-container *ngSwitchDefault>

        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: { index, type, data, isActive: isActive }">
          </ng-container>
        </div>

      </ng-container>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i2.GalleryImageComponent, selector: "gallery-image", inputs: ["isThumbnail", "alt", "src", "loadingIcon", "loadingError", "errorIcon"], outputs: ["error", "loaded"] }, { kind: "component", type: i3.GalleryVideoComponent, selector: "gallery-video", inputs: ["src", "poster", "mute", "loop", "controls", "controlsList", "disableRemotePlayback", "disablePictureInPicture", "pause", "play"], outputs: ["error"] }, { kind: "component", type: i4.GalleryIframeComponent, selector: "gallery-iframe", inputs: ["src", "pause", "autoplay"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <ng-container *ngIf="load" [ngSwitch]="type">
      <ng-container *ngSwitchCase="Types.Image">

        <gallery-image [src]="imageData.src"
                       [alt]="imageData.alt"
                       [loadingIcon]="config.loadingIcon"
                       [loadingError]="config.loadingError"
                       (loaded)="onItemLoaded()"
                       (error)="error.emit($event)"></gallery-image>

        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: { index, type, data, isActive }">
          </ng-container>
        </div>

      </ng-container>

      <gallery-video *ngSwitchCase="Types.Video"
                     [src]="videoData.src"
                     [mute]="videoData.mute"
                     [poster]="videoData.poster"
                     [controls]="videoData.controls"
                     [controlsList]="videoData.controlsList"
                     [disablePictureInPicture]="videoData.disablePictureInPicture"
                     [play]="isAutoPlay"
                     [pause]="currIndex !== index"
                     (error)="error.emit($event)"></gallery-video>

      <gallery-iframe *ngSwitchCase="Types.Youtube"
                      [src]="youtubeSrc"
                      [autoplay]="isAutoPlay"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Iframe"
                      [src]="data.src"></gallery-iframe>

      <ng-container *ngSwitchDefault>

        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: { index, type, data, isActive: isActive }">
          </ng-container>
        </div>

      </ng-container>
    </ng-container>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { config: [{
                type: Input
            }], index: [{
                type: Input
            }], currIndex: [{
                type: Input
            }], type: [{
                type: Input
            }], data: [{
                type: Input
            }], error: [{
                type: Output
            }], isActive: [{
                type: HostBinding,
                args: ['class.g-active-item']
            }], isIndexAttr: [{
                type: HostBinding,
                args: ['attr.galleryIndex']
            }], imageState: [{
                type: HostBinding,
                args: ['attr.imageState']
            }] } });
//# sourceMappingURL=data:application/json;base64,