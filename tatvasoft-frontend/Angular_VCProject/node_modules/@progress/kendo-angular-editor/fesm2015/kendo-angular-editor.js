/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as i0 from '@angular/core';
import { Injectable, Inject, Optional, Component, Input, ViewChild, ElementRef, Directive, EventEmitter, Output, forwardRef, InjectionToken, isDevMode, ViewContainerRef, HostBinding, ContentChild, NgModule } from '@angular/core';
import * as i3 from '@angular/forms';
import { FormControl, Validators, FormGroup, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Subject, BehaviorSubject, zip, fromEvent, interval } from 'rxjs';
import { take, map, filter as filter$1, concatMap, takeUntil } from 'rxjs/operators';
import * as i1$3 from '@progress/kendo-angular-toolbar';
import { ToolBarToolComponent, ToolBarComponent, ToolBarModule } from '@progress/kendo-angular-toolbar';
import { isDocumentAvailable, guid, hasObservers, KendoInput, Keys } from '@progress/kendo-angular-common';
import { marks as marks$1, nodes as nodes$1, Schema, createTable, insertNode, alignBlocks, alignRemoveRules, expandToWordWrap, toggleInlineFormat, bold, cleanFormatting, applyLink, applyInlineStyle, insertText, italic, strikethrough, subscript, superscript, underline, removeLink, link, selectAll, isAligned, alignCenterRules, alignJustifyRules, alignLeftRules, alignRightRules, formatBlockElements, getHtml, indent, insertImage, toggleOrderedList, toggleUnorderedList, outdent, redo, setHtml, undo, blockquote, addColumnBefore, addColumnAfter, addRowBefore, addRowAfter, deleteRow, deleteColumn, mergeCells, splitCell, deleteTable, hasMark, activeNode, canIndentAsListItem, canBeIndented, indentRules, hasNode, canOutdentAsListItem, outdentRules, isIndented, getActiveMarks, expandSelection, getSelectionText as getSelectionText$1, getNodeFromSelection, getMark, removeComments, sanitize, removeAttribute, sanitizeStyleAttr, sanitizeClassAttr, pasteCleanup, parseContent, AllSelection, TextSelection, Plugin, PluginKey, history, keymap, buildListKeymap, buildKeymap, baseKeymap, gapCursor, imageResizing, tableResizing, tableEditing, caretColor, placeholder, EditorState, EditorView } from '@progress/kendo-editor-common';
export { Decoration, DecorationSet, EditorState, EditorView, InputRule, Mark, MarkType, Node, NodeType, Plugin, PluginKey, Schema, Transaction, baseKeymap, dropCursor, gapCursor, history, inputRules, keymap, tableNodes, textblockTypeInputRule, wrappingInputRule } from '@progress/kendo-editor-common';
import { validatePackage } from '@progress/kendo-licensing';
import * as i1$1 from '@progress/kendo-angular-dialog';
import { DialogContentBase, DialogModule } from '@progress/kendo-angular-dialog';
import * as i1 from '@progress/kendo-angular-l10n';
import { LocalizationService, L10N_PREFIX, RTL, ComponentMessages } from '@progress/kendo-angular-l10n';
import * as i4 from '@progress/kendo-angular-buttons';
import { ButtonModule } from '@progress/kendo-angular-buttons';
import * as i3$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@progress/kendo-angular-inputs';
import { ColorPickerComponent, ColorPickerModule, NumericTextBoxModule, CheckBoxModule, TextBoxModule } from '@progress/kendo-angular-inputs';
import * as i1$2 from '@progress/kendo-angular-dropdowns';
import { DropDownListComponent, DropDownsModule } from '@progress/kendo-angular-dropdowns';
import * as i2 from '@progress/kendo-angular-popup';

/**
 * @hidden
 */
const packageMetadata = {
    name: '@progress/kendo-angular-editor',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1664961560,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

/**
 * @hidden
 */
const hasAttrs = (attrs, exclude) => {
    for (let attr in attrs) {
        if (attr && attrs[attr] !== null && attr !== exclude) {
            return true;
        }
    }
    return false;
};
/**
 * @hidden
 */
const getAttrs = (attrs, exclude) => {
    const result = {};
    for (let attr in attrs) {
        if (attr && attrs[attr] !== null && attr !== exclude) {
            result[attr] = attrs[attr];
        }
    }
    return result;
};
/**
 * @hidden
 */
const getAttributes = (dom) => {
    const result = {};
    let attributes = dom.attributes, attr;
    for (let i = 0; i < attributes.length; i++) {
        attr = attributes[i];
        result[attr.name] = attr.value;
    }
    return result;
};
/**
 * @hidden
 */
const serializeDOMAttrs = (el) => Array.from(el.attributes)
    .reduce((acc, curr) => Object.assign({}, acc, { [curr.name]: curr.value }), {});
/**
 * @hidden
 */
const commonAttributes = () => {
    return Object.assign({}, createDefaultAttributes(['class', 'id', 'style']));
};
/**
 * @hidden
 */
const createDefaultAttributes = (attrs = []) => {
    return Object.assign({}, attrs.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: { default: null } })), {}));
};
/**
 * @hidden
 */
const hole = 0;
/**
 * @hidden
 */
const isSchemaNode = (schemaNodeName) => (node) => node.type.name === schemaNodeName;
/**
 * @hidden
 */
const isTable = isSchemaNode('table');
/**
 * @hidden
 */
const isTableBody = isSchemaNode('table_body');
/**
 * @hidden
 */
const isTableHead = isSchemaNode('table_head');
/**
 * @hidden
 */
const isTableFoot = isSchemaNode('table_foot');
/**
 * @hidden
 */
const isTableRow = isSchemaNode('table_row');
/**
 * @hidden
 */
const isTableCell = isSchemaNode('table_cell');
/**
 * @hidden
 */
const isTableHeaderCell = isSchemaNode('table_header');

const createSemanticNode = (tagName) => ({
    // Uncaught SyntaxError: Mixing inline and block content (in content expression '(block | inline)*')
    // content: '(block | inline)*',
    content: 'block*',
    group: 'block',
    attrs: Object.assign({}, commonAttributes()),
    parseDOM: [{
            tag: tagName,
            getAttrs: getAttributes
        }],
    toDOM: node => hasAttrs(node.attrs) ? [tagName, getAttrs(node.attrs), hole] : [tagName, hole]
});
/**
 * @hidden
 */
const semanticTagNames = ['article', 'main', 'nav', 'header', 'footer', 'aside', 'section'];
/**
 * @hidden
 */
const semanticNodes = semanticTagNames.reduce((acc, curr) => Object.assign(acc, { [curr]: createSemanticNode(curr) }), {});

/**
 * @hidden
 */
const marks = marks$1;
const nodes = Object.assign(nodes$1, semanticNodes);
/**
 * @hidden
 */
const schema = new Schema({
    marks,
    nodes
});

/**
 * @hidden
 */
const insertTable = (attrs) => (state, dispatch) => {
    const newTable = createTable(state.schema.nodes, attrs.rows, attrs.cols);
    if (newTable) {
        insertNode(newTable, true)(state, dispatch);
    }
};

const alignRemove = (state, dispatch) => alignBlocks(alignRemoveRules)(state, dispatch);
const inlineCommand = {
    bold: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, bold), { applyToWord })),
    cleanFormatting: (options) => cleanFormatting(options),
    createLink: attrs => expandToWordWrap(applyLink, { mark: 'link', attrs: attrs.value, applyToWord: attrs.applyToWord }),
    fontFamily: attrs => expandToWordWrap(applyInlineStyle, { style: 'font-family', value: attrs.value, applyToWord: attrs.applyToWord }),
    fontSize: attrs => expandToWordWrap(applyInlineStyle, { style: 'font-size', value: attrs.value, applyToWord: attrs.applyToWord }),
    insertFile: attrs => expandToWordWrap(applyLink, { mark: 'link', attrs: attrs, applyToWord: attrs.applyToWord }),
    insertText: text => insertText(text),
    italic: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, italic), { applyToWord })),
    strikethrough: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, strikethrough), { applyToWord })),
    subscript: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, subscript), { applyToWord })),
    superscript: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, superscript), { applyToWord })),
    underline: (applyToWord) => expandToWordWrap(toggleInlineFormat, Object.assign(Object.assign({}, underline), { applyToWord })),
    unlink: () => removeLink(link),
    foreColor: attrs => expandToWordWrap(applyInlineStyle, { style: 'color', value: attrs.value, applyToWord: attrs.applyToWord }),
    backColor: attrs => expandToWordWrap(applyInlineStyle, { style: 'background-color', value: attrs.value, applyToWord: attrs.applyToWord }),
    selectAll: () => (state, dispatch) => selectAll(state, dispatch)
};
const blockCommand = {
    alignCenter: () => (state, dispatch) => isAligned(state, alignCenterRules) ? alignRemove(state, dispatch) : alignBlocks(alignCenterRules)(state, dispatch),
    alignJustify: () => (state, dispatch) => isAligned(state, alignJustifyRules) ? alignRemove(state, dispatch) : alignBlocks(alignJustifyRules)(state, dispatch),
    alignLeft: () => (state, dispatch) => isAligned(state, alignLeftRules) ? alignRemove(state, dispatch) : alignBlocks(alignLeftRules)(state, dispatch),
    alignRight: () => (state, dispatch) => isAligned(state, alignRightRules) ? alignRemove(state, dispatch) : alignBlocks(alignRightRules)(state, dispatch),
    format: formatAttr => formatBlockElements(formatAttr.tag),
    getHTML: () => getHtml,
    indent: () => indent,
    insertImage: attrs => insertImage(attrs),
    // think about changing the command name.
    insertOrderedList: () => toggleOrderedList,
    // think about changing the command name.
    insertUnorderedList: () => toggleUnorderedList,
    outdent: () => outdent,
    redo: () => redo,
    setHTML: ({ content, parseOptions }) => setHtml(content, 'setHTML', parseOptions),
    undo: () => undo,
    blockquote: () => blockquote
};
const tableCommand = {
    insertTable: attr => insertTable(attr),
    addColumnBefore: () => addColumnBefore,
    addColumnAfter: () => addColumnAfter,
    addRowBefore: () => addRowBefore,
    addRowAfter: () => addRowAfter,
    deleteRow: () => deleteRow,
    deleteColumn: () => deleteColumn,
    mergeCells: () => mergeCells,
    splitCell: () => splitCell,
    deleteTable: () => deleteTable
};
/**
 * @hidden
 */
const editorCommands = Object.assign({}, inlineCommand, blockCommand, tableCommand);

/**
 * @hidden
 */
const getToolbarState = (state, options) => ({
    alignCenter: {
        selected: isAligned(state, alignCenterRules),
        disabled: false
    },
    alignJustify: {
        selected: isAligned(state, alignJustifyRules),
        disabled: false
    },
    alignLeft: {
        selected: isAligned(state, alignLeftRules),
        disabled: false
    },
    alignRight: {
        selected: isAligned(state, alignRightRules),
        disabled: false
    },
    bold: {
        selected: hasMark(state, bold),
        disabled: false
    },
    cleanFormatting: {
        selected: false,
        disabled: !cleanFormatting()(state)
    },
    format: {
        selected: activeNode(state),
        disabled: false
    },
    blockquote: {
        selected: false,
        disabled: !blockquote(state)
    },
    indent: {
        selected: false,
        disabled: !(canIndentAsListItem(state, state.schema.nodes.list_item) || canBeIndented(state, indentRules))
    },
    insertOrderedList: {
        selected: hasNode(state, state.schema.nodes.ordered_list),
        disabled: false
    },
    insertUnorderedList: {
        selected: hasNode(state, state.schema.nodes.bullet_list),
        disabled: false
    },
    italic: {
        selected: hasMark(state, italic),
        disabled: false
    },
    unlink: {
        selected: false,
        disabled: !hasMark(state, link)
    },
    outdent: {
        selected: false,
        get disabled() {
            return !(hasNode(state, state.schema.nodes.blockquote) ||
                canOutdentAsListItem(state, outdentRules) ||
                isIndented(state, outdentRules.nodes));
        }
    },
    redo: {
        selected: false,
        disabled: !redo(state)
    },
    selectAll: {
        selected: false,
        disabled: false
    },
    strikethrough: {
        selected: hasMark(state, strikethrough),
        disabled: false
    },
    style: {
        selected: getActiveMarks(state, state.schema.marks.style),
        disabled: false
    },
    subscript: {
        selected: hasMark(state, subscript),
        disabled: false
    },
    superscript: {
        selected: hasMark(state, superscript),
        disabled: false
    },
    underline: {
        selected: hasMark(state, underline),
        disabled: false
    },
    undo: {
        selected: false,
        disabled: !undo(state)
    },
    //dialogs
    createLink: {
        selected: false,
        get disabled() {
            const empty = state.selection.empty;
            const applyToWord = options && options.applyToWord;
            if (applyToWord && empty) {
                const extendedState = expandSelection(state, () => { }, options).state;
                return extendedState.selection.empty;
            }
            return empty;
        }
    },
    insertFile: {
        selected: false,
        disabled: state.selection.empty
    },
    insertImage: {
        selected: false,
        disabled: false
    },
    viewSource: {
        selected: false,
        disabled: false
    },
    // print
    print: {
        selected: false,
        disabled: false
    },
    // table
    insertTable: {
        selected: false,
        disabled: false
    },
    addColumnBefore: {
        selected: false,
        disabled: !addColumnBefore(state)
    },
    addColumnAfter: {
        selected: false,
        disabled: !addColumnAfter(state)
    },
    addRowBefore: {
        selected: false,
        disabled: !addRowBefore(state)
    },
    addRowAfter: {
        selected: false,
        disabled: !addRowAfter(state)
    },
    deleteRow: {
        selected: false,
        disabled: !deleteRow(state)
    },
    deleteColumn: {
        selected: false,
        disabled: !deleteColumn(state)
    },
    mergeCells: {
        selected: false,
        disabled: !mergeCells(state)
    },
    splitCell: {
        selected: false,
        disabled: !splitCell(state)
    },
    deleteTable: {
        selected: false,
        disabled: !deleteTable(state)
    }
});
/**
 * @hidden
 */
const initialToolBarState = {
    //alignment
    alignCenter: { selected: false, disabled: false },
    alignJustify: { selected: false, disabled: false },
    alignLeft: { selected: false, disabled: false },
    alignRight: { selected: false, disabled: false },
    //marks
    bold: { selected: false, disabled: false },
    italic: { selected: false, disabled: false },
    underline: { selected: false, disabled: false },
    strikethrough: { selected: false, disabled: false },
    subscript: { selected: false, disabled: false },
    superscript: { selected: false, disabled: false },
    //tools
    format: { selected: { text: 'Format', tag: null }, disabled: false },
    style: { selected: { marks: [], hasNodesWithoutMarks: false }, disabled: false },
    cleanFormatting: { selected: false, disabled: true },
    blockquote: { selected: false, disabled: false },
    //indent
    indent: { selected: false, disabled: false },
    outdent: { selected: false, disabled: false },
    //lists
    insertOrderedList: { selected: false, disabled: false },
    insertUnorderedList: { selected: false, disabled: false },
    //links
    unlink: { selected: false, disabled: true },
    //history
    redo: { selected: false, disabled: true },
    undo: { selected: false, disabled: true },
    // print
    print: { selected: false, disabled: false },
    //dialogs
    createLink: { selected: false, disabled: true },
    insertFile: { selected: false, disabled: true },
    insertImage: { selected: false, disabled: false },
    viewSource: { selected: false, disabled: false },
    //table
    insertTable: { selected: false, disabled: false },
    addColumnBefore: { selected: false, disabled: true },
    addColumnAfter: { selected: false, disabled: true },
    addRowBefore: { selected: false, disabled: true },
    addRowAfter: { selected: false, disabled: true },
    deleteRow: { selected: false, disabled: true },
    deleteColumn: { selected: false, disabled: true },
    mergeCells: { selected: false, disabled: true },
    splitCell: { selected: false, disabled: true },
    deleteTable: { selected: false, disabled: true },
    // select all
    selectAll: { selected: false, disabled: false }
};
/**
 * @hidden
 */
const disabledToolBarState = {
    //alignment
    alignCenter: { selected: false, disabled: true },
    alignJustify: { selected: false, disabled: true },
    alignLeft: { selected: false, disabled: true },
    alignRight: { selected: false, disabled: true },
    //marks
    bold: { selected: false, disabled: true },
    italic: { selected: false, disabled: true },
    underline: { selected: false, disabled: true },
    strikethrough: { selected: false, disabled: true },
    subscript: { selected: false, disabled: true },
    superscript: { selected: false, disabled: true },
    //tools
    format: { selected: { text: 'Format', tag: null }, disabled: true },
    style: { selected: { marks: [], hasNodesWithoutMarks: false }, disabled: true },
    cleanFormatting: { selected: false, disabled: true },
    blockquote: { selected: false, disabled: true },
    //indent
    indent: { selected: false, disabled: true },
    outdent: { selected: false, disabled: true },
    //lists
    insertOrderedList: { selected: false, disabled: true },
    insertUnorderedList: { selected: false, disabled: true },
    //links
    unlink: { selected: false, disabled: true },
    //history
    redo: { selected: false, disabled: true },
    undo: { selected: false, disabled: true },
    // print
    print: { selected: false, disabled: true },
    //dialogs
    createLink: { selected: false, disabled: true },
    insertFile: { selected: false, disabled: true },
    insertImage: { selected: false, disabled: true },
    viewSource: { selected: false, disabled: true },
    //table
    insertTable: { selected: false, disabled: true },
    addColumnBefore: { selected: false, disabled: true },
    addColumnAfter: { selected: false, disabled: true },
    addRowBefore: { selected: false, disabled: true },
    addRowAfter: { selected: false, disabled: true },
    deleteRow: { selected: false, disabled: true },
    deleteColumn: { selected: false, disabled: true },
    mergeCells: { selected: false, disabled: true },
    splitCell: { selected: false, disabled: true },
    deleteTable: { selected: false, disabled: true },
    // select all
    selectAll: { selected: false, disabled: true }
};

/**
 * @hidden
 */
function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0;
    return width;
}
/**
 * @hidden
 */
const removeEntries = (obj, predicate) => Object.keys(obj)
    .filter(key => predicate(key))
    .reduce((acc, curr) => Object.assign(acc, { [curr]: obj[curr] }), {});
/**
 * @hidden
 */
const removeEmptyEntries = (obj) => {
    const predicate = key => obj[key] !== null && obj[key] !== undefined && obj[key] !== '';
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
const isEmpty = (obj) => Object.keys(obj).length === 0;
/**
 * @hidden
 */
const isNullOrUndefined = (value) => value === undefined || value === null;
/**
 * @hidden
 */
const isPresent = (value) => !isNullOrUndefined(value);
/**
 * @hidden
 */
const detectIE = () => {
    if (!isDocumentAvailable()) {
        return false;
    }
    const ua = window.navigator.userAgent;
    const msie = ua.indexOf('MSIE ');
    const trident = ua.indexOf('Trident/');
    return msie > 0 || trident > 0;
};
/**
 * @hidden
 */
const safeString = (value) => (isNullOrUndefined(value) ? '' : value.toString());
/**
 * @hidden
 */
const first = (arr) => arr[0];
/**
 * @hidden
 */
const last = (arr) => arr[arr.length - 1];
/**
 * @hidden
 */
const unique = (arr) => Array.from(new Set(arr));
/**
 * @hidden
 */
const split = (splitter) => (value) => value.split(splitter);
/**
 * @hidden
 */
const trim = (value) => value.trim();
/**
 * @hidden
 */
const filter = (predicate) => (arr) => arr.filter(predicate);
/**
 * @hidden
 */
const toArray = (x) => (x instanceof Array ? x : [x]);
/**
 * @hidden
 */
const getUniqueStyleValues = (style, cssStyle) => {
    if (style.hasNodesWithoutMarks) {
        return '';
    }
    const uniqueMarkValues = style.marks
        .filter(m => m.type.name === 'style')
        .map(m => m.attrs.style)
        .map(safeString)
        .map(split(';'))
        .map(filter((m) => m.includes(cssStyle)))
        // guards against empty array
        .map((cssStyleValues) => (cssStyleValues.length !== 0 ? cssStyleValues : [`${cssStyle}: INVALID`]))
        .map(first)
        .map(split(':'))
        .map(last)
        .map(trim)
        .reduce((acc, curr) => (acc.indexOf(curr) > -1 ? acc : [...acc, curr]), []);
    if (uniqueMarkValues.indexOf('INVALID') > -1 || uniqueMarkValues.length !== 1) {
        return '';
    }
    return uniqueMarkValues[0];
};
/**
 * @hidden
 */
const conditionallyExecute = (fn) => (condition) => (param) => (condition ? fn(param) : param);
/**
 * @hidden
 */
const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x);
// This re-declaration is neccessary for proper API generation
/**
 * A method for extracting the text from the current editor state's selection
 * @param state
 * @returns
 */
const getSelectionText = (state) => getSelectionText$1(state);

/**
 * @hidden
 */
class EditorLocalizationService extends LocalizationService {
    constructor(prefix, messageService, _rtl) {
        super(prefix, messageService, _rtl);
    }
}
EditorLocalizationService.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorLocalizationService, deps: [{ token: L10N_PREFIX }, { token: i1.MessageService, optional: true }, { token: RTL, optional: true }], target: i0.ÉµÉµFactoryTarget.Injectable });
EditorLocalizationService.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorLocalizationService });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorLocalizationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_PREFIX]
                }] }, { type: i1.MessageService, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RTL]
                }] }]; } });

/**
 * @hidden
 */
class SourceDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = '';
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.textarea.nativeElement.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        this.editor.exec('setHTML', this.getData());
        this.dialog.close();
        this.editor.view.focus();
    }
    getData() {
        return this.textarea.nativeElement.value;
    }
    setData() {
        this.data = this.indent(this.editor.getSource());
    }
    textFor(key) {
        return this.localization.get(key);
    }
    indent(content) {
        return content
            .replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/gi, '</$1>\n')
            .replace(/<(ul|ol)([^>]*)><li/gi, '<$1$2>\n<li')
            .replace(/<br \/>/gi, '<br />\n')
            .replace(/\n$/, '');
    }
}
SourceDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SourceDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
SourceDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SourceDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "textarea", first: true, predicate: ["textarea"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('viewSource') }}
        </kendo-dialog-titlebar>
        <textarea [value]="data" #textarea class="k-textarea k-editor-textarea"></textarea>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogUpdate') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, styles: ["\n            >>> .k-editor-textarea {\n                height: 100%;\n            }\n        "], components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SourceDialogComponent, decorators: [{
            type: Component,
            args: [{
                    styles: [
                        `
            >>> .k-editor-textarea {
                height: 100%;
            }
        `
                    ],
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('viewSource') }}
        </kendo-dialog-titlebar>
        <textarea [value]="data" #textarea class="k-textarea k-editor-textarea"></textarea>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogUpdate') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], textarea: [{
                type: ViewChild,
                args: ['textarea', { static: true }]
            }] } });

/**
 * @hidden
 */
class ImageDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.src = new FormControl('', Validators.required);
        this.alt = new FormControl('');
        this.width = new FormControl('', Validators.min(1));
        this.height = new FormControl('', Validators.min(1));
        this.data = {
            alt: '',
            height: '',
            src: '',
            width: ''
        };
        this.imageData = new FormGroup({
            alt: this.alt,
            height: this.height,
            src: this.src,
            width: this.width
        });
    }
    ngOnInit() {
        this.srcInputId = `k-${guid()}`;
        this.altTextInputId = `k-${guid()}`;
        this.widthInputId = `k-${guid()}`;
        this.heightInputId = `k-${guid()}`;
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.srcInput.nativeElement.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.src.value) {
            this.editor.exec('insertImage', this.getData());
            this.dialog.close();
            this.editor.view.focus();
        }
    }
    setData(state) {
        const node = getNodeFromSelection(state);
        if (node) {
            this.src.patchValue(node.attrs.src);
            this.alt.patchValue(node.attrs.alt);
            this.width.patchValue(node.attrs.width);
            this.height.patchValue(node.attrs.height);
        }
    }
    textFor(key) {
        return this.localization.get(key);
    }
    getData() {
        return {
            alt: this.alt.value,
            height: this.normalizeDimension(this.height.value),
            src: this.src.value,
            width: this.normalizeDimension(this.width.value)
        };
    }
    normalizeDimension(value) {
        return Number.isNaN(parseInt(value, 10)) || parseInt(value, 10) <= 0 ? '' : safeString(parseInt(value, 10));
    }
}
ImageDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
ImageDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ImageDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "srcInput", first: true, predicate: ["srcInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('insertImage') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content">
                    <div class="k-edit-label">
                        <label [for]="srcInputId">{{ textFor('imageWebAddress') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="srcInputId" #srcInput [formControl]="src" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="altTextInputId">{{ textFor('imageAltText') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="altTextInputId" [formControl]="alt" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="widthInputId">{{ textFor('imageWidth') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="widthInputId" [formControl]="width" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="heightInputId">{{ textFor('imageHeight') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="heightInputId" [formControl]="height" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]="imageData.invalid"
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogInsert') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('insertImage') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content">
                    <div class="k-edit-label">
                        <label [for]="srcInputId">{{ textFor('imageWebAddress') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="srcInputId" #srcInput [formControl]="src" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="altTextInputId">{{ textFor('imageAltText') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="altTextInputId" [formControl]="alt" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="widthInputId">{{ textFor('imageWidth') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="widthInputId" [formControl]="width" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                    <div class="k-edit-label">
                        <label [for]="heightInputId">{{ textFor('imageHeight') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [id]="heightInputId" [formControl]="height" type="text" class="k-textbox k-input k-rounded-md" />
                    </div>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]="imageData.invalid"
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogInsert') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], srcInput: [{
                type: ViewChild,
                args: ['srcInput', { read: ElementRef, static: true }]
            }] } });

/**
 * @hidden
 */
class FileLinkDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.linkForm = new FormGroup({
            'href': new FormControl('', Validators.required),
            'text': new FormControl({ value: '', disabled: true }, Validators.required),
            'title': new FormControl('')
        });
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.hrefInput.nativeElement.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        const linkData = this.getData();
        this.editor.exec(this.command, linkData);
        this.dialog.close();
        this.editor.view.focus();
    }
    get titleText() {
        return this.localization.get(this.command);
    }
    setData(state, options) {
        if (this.command === 'createLink') {
            this.linkForm.addControl('target', new FormControl());
        }
        const linkMark = getMark(state, state.schema.marks.link);
        if (linkMark) {
            // const linkMarkRange = getMarkRange(state.selection.$cursor, schema.marks.link);
            // const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
            this.linkForm.reset({
                href: linkMark.attrs.href,
                title: linkMark.attrs.title,
                target: isPresent(linkMark.attrs.target),
                text: this.setLinkText(state)
            });
            return;
        }
        if (state.selection.empty) {
            const currentState = options.applyToWord ? expandSelection(state, () => { }, options).state : state;
            if (!currentState.selection.empty) {
                this.linkForm.patchValue({
                    'text': getSelectionText$1(currentState)
                });
            }
        }
        else {
            this.linkForm.patchValue({
                'text': getSelectionText$1(state)
            });
        }
    }
    textForWithPrefix(key) {
        const prefix = this.command === 'createLink' ? 'link' : 'file';
        return this.textFor(prefix + key);
    }
    textFor(key) {
        return this.localization.get(key);
    }
    setLinkText(state) {
        const selection = state.selection;
        if (selection.empty && selection.$cursor) {
            const cursor = selection.$cursor;
            const cursorNodeIndex = cursor.index();
            const parentNode = cursor.parent;
            return parentNode.child(cursorNodeIndex).text;
        }
        else {
            return getSelectionText$1(state);
        }
    }
    getData() {
        let linkData = this.linkForm.value;
        if (isPresent(this.linkForm.controls.target)) {
            linkData.target = linkData.target ? '_blank' : null;
        }
        return linkData;
    }
}
FileLinkDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileLinkDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
FileLinkDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FileLinkDialogComponent, selector: "ng-component", inputs: { editor: "editor", command: "command" }, viewQueries: [{ propertyName: "hrefInput", first: true, predicate: ["hrefInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ titleText }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content">
                    <form novalidate [formGroup]="linkForm">
                        <div class="k-edit-label">
                            <label (click)="hrefInput.focus()">{{ textForWithPrefix('WebAddress') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #hrefInput formControlName="href" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>

                        <div class="k-edit-label">
                            <label (click)="textInput.focus()">{{ textForWithPrefix('Text') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #textInput formControlName="text" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>

                        <div class="k-edit-label">
                            <label (click)="titleInput.focus()">{{ textForWithPrefix('Title') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #titleInput formControlName="title" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>
                        <ng-container *ngIf="command === 'createLink'">
                            <div class="k-edit-label"></div>
                            <div class="k-edit-field">
                                <input type="checkbox" id="k-target-blank" kendoCheckBox formControlName="target" />
                                <label class="k-checkbox-label" for="k-target-blank">{{ textForWithPrefix('OpenInNewWindow') }}</label>
                            </div>
                        </ng-container>
                    </form>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]="linkForm.invalid" (click)="onConfirmAction()" [primary]="true">
                {{ textFor('dialogInsert') }}
            </button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i3.ÉµNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i5.CheckBoxDirective, selector: "input[kendoCheckBox]", inputs: ["size", "rounded"] }, { type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileLinkDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ titleText }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content">
                    <form novalidate [formGroup]="linkForm">
                        <div class="k-edit-label">
                            <label (click)="hrefInput.focus()">{{ textForWithPrefix('WebAddress') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #hrefInput formControlName="href" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>

                        <div class="k-edit-label">
                            <label (click)="textInput.focus()">{{ textForWithPrefix('Text') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #textInput formControlName="text" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>

                        <div class="k-edit-label">
                            <label (click)="titleInput.focus()">{{ textForWithPrefix('Title') }}</label>
                        </div>
                        <div class="k-edit-field">
                            <input #titleInput formControlName="title" type="text" class="k-textbox k-input k-rounded-md" />
                        </div>
                        <ng-container *ngIf="command === 'createLink'">
                            <div class="k-edit-label"></div>
                            <div class="k-edit-field">
                                <input type="checkbox" id="k-target-blank" kendoCheckBox formControlName="target" />
                                <label class="k-checkbox-label" for="k-target-blank">{{ textForWithPrefix('OpenInNewWindow') }}</label>
                            </div>
                        </ng-container>
                    </form>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]="linkForm.invalid" (click)="onConfirmAction()" [primary]="true">
                {{ textFor('dialogInsert') }}
            </button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], command: [{
                type: Input
            }], hrefInput: [{
                type: ViewChild,
                args: ['hrefInput', { read: ElementRef, static: true }]
            }] } });

/**
 * @hidden
 */
const defaultStyle = `
    html, body {
        margin: 0;
        height: 100%;
        padding: 0;
    }

    html {
        min-height: 100%;
    }

    body {
        box-sizing: border-box;
        position: relative;
        word-wrap: break-word;
        padding: 8px;
    }

    body > .k-content {
        outline: 0;
        height: 100%;
        white-space: pre-wrap;
    }

    div.ProseMirror {
        position: relative;
        word-wrap: break-word;
        white-space: pre-wrap;
        white-space: break-spaces;
        -webkit-font-variant-ligatures: none;
        font-variant-ligatures: none;
        font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
    }

    .ProseMirror pre {
        white-space: pre-wrap;
    }

    .k-content > p {
        margin: 0 0 1em;
    }

    .k-content table {
        white-space: pre-wrap;
    }

    .k-content .k-text-selected, .k-content::selection {
        color: HighlightText;
        background-color: Highlight;
    }

    .k-content .k-text-highlighted {
        background-color: #bbdefb;
    }

    .k-content .ProseMirror-selectednode {
        outline: 2px solid #8cf;
    }

    .ProseMirror-hideselection *::selection { background: transparent; }
    .ProseMirror-hideselection *::-moz-selection { background: transparent; }
    .ProseMirror-hideselection { caret-color: transparent; }

    .ProseMirror-gapcursor {
        display: none;
        pointer-events: none;
        position: absolute;
    }

    .ProseMirror-gapcursor:after {
        content: "";
        display: block;
        position: absolute;
        top: -2px;
        width: 20px;
        border-top: 1px solid black;
        animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
    }

    @keyframes ProseMirror-cursor-blink {
        to {
            visibility: hidden;
        }
    }

    .ProseMirror-focused .ProseMirror-gapcursor {
        display: block;
    }

    .k-editor-resize-handles-wrapper {
        position: absolute;
        visibility: hidden;
    }

    .k-editor-resize-handle {
        position: absolute;
        visibility: visible;
        background-color: #fff;
        border: 1px solid #000;
        z-index: 100;
        width: 5px;
        height: 5px;
    }

    .k-editor-resize-handle.northwest {
        top: 0;
        left: 0;
        transform: translate(-50%, -50%);
        cursor: nw-resize;
    }

    .k-editor-resize-handle.north {
        top: 0;
        left: 50%;
        transform: translate(-50%, -50%);
        cursor: n-resize;
    }

    .k-editor-resize-handle.northeast {
        top: 0;
        right: 0;
        transform: translate(50%, -50%);
        cursor: ne-resize;
    }

    .k-editor-resize-handle.southwest {
        left: 0;
        bottom: 0;
        transform: translate(-50%, 50%);
        cursor: sw-resize;
    }

    .k-editor-resize-handle.south {
        bottom: 0;
        left: 50%;
        transform: translate(-50%, 50%);
        cursor: s-resize;
    }

    .k-editor-resize-handle.southeast {
        right: 0;
        bottom: 0;
        transform: translate(50%, 50%);
        cursor: se-resize;
    }

    .k-editor-resize-handle.west {
        top: 50%;
        left: 0;
        transform: translate(-50%, -50%);
        cursor: w-resize;
    }

    .k-editor-resize-handle.east {
        top: 50%;
        right: 0;
        transform: translate(50%, -50%);
        cursor: e-resize;
    }

    .ProseMirror .k-placeholder::before {
        content: attr(data-placeholder);
        height: 0;
        color: #8a8a8a;
        float: left;
        opacity: 1;
        cursor: text;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .ProseMirror li {
        position: relative;
    }

    li.ProseMirror-selectednode {
        outline: none;
    }

    li.ProseMirror-selectednode:after {
        content: "";
        position: absolute;
        left: -32px;
        right: -2px;
        top: -2px;
        bottom: -2px;
        border: 2px solid #8cf;
        pointer-events: none;
    }

    .ProseMirror[contenteditable="false"] img {
        pointer-events: none;
    }
`;
/**
 * @hidden
 */
const tablesStyles = `
    .ProseMirror .tableWrapper {
        overflow-x: auto;
        margin: 1em 0;
    }

    .ProseMirror table {
        margin: 0;
        border-collapse: collapse;
        table-layout: fixed;
        width: 100%;
        overflow: hidden;
    }

    .ProseMirror td, .ProseMirror th {
        min-width: 1em;
        border: 1px solid #ddd;
        padding: 3px 5px;
        vertical-align: top;
        box-sizing: border-box;
        position: relative;
    }

    .ProseMirror th {
        font-weight: bold;
        text-align: left;
    }

    .ProseMirror .column-resize-handle {
        position: absolute;
        right: -2px; top: 0; bottom: 0;
        width: 4px;
        z-index: 20;
        background-color: #adf;
        pointer-events: none;
    }

    .ProseMirror.resize-cursor {
        cursor: ew-resize;
        cursor: col-resize;
    }

    /* Give selected cells a blue overlay */
    .ProseMirror .selectedCell:after {
        z-index: 2;
        position: absolute;
        content: "";
        left: 0; right: 0; top: 0; bottom: 0;
        background: rgba(200, 200, 255, 0.4);
        pointer-events: none;
    }

    /* Resizing */
    .k-editor-resize-wrap-element {
        display: inline-block;
        position: relative;
    }

    .ProseMirror .row-resize-handle {
        position: absolute;
        right: 0; left: 0; bottom: 0;
        transform: translate(0, 50%);
        height: 4px;
        z-index: 20;
        background-color: #adf;
        pointer-events: none;
    }
    
    .ProseMirror.resize-cursor-vertical {
        cursor: sn-resize;
        cursor: row-resize;
    }

    .k-editor-resize-wrap-element table td p,
    .k-editor-resize-wrap-element table th p {
        margin: 0 auto;
    }

    .ProseMirror[contenteditable="false"] .k-editor-resize-handle,
    .ProseMirror[contenteditable="false"] .k-editor-resize-handles-wrapper,
    .ProseMirror[contenteditable="false"] .row-resize-handle,
    .ProseMirror[contenteditable="false"] .column-resize-handle {
        display: none;
    }
    
    .ProseMirror[contenteditable="false"] table {
        pointer-events: none;
    }
    
    .ProseMirror[contenteditable="false"] .ProseMirror-selectednode {
        outline: none;
    }
    
    .ProseMirror[contenteditable="false"] {
        cursor: unset !important;
    }
`;
/**
 * @hidden
 */
const rtlStyles = 'body { direction: rtl }';

/**
 * @hidden
 */
const EditorErrorMessages = {
    schemaType: 'Expected value of type Schema. See http://www.telerik.com/kendo-angular-ui/components/editor/schema/',
    setSchemaOnce: 'The Schema cannot be changed dynamically. See http://www.telerik.com/kendo-angular-ui/components/editor/schema/',
    pluginsCallbackType: (arg) => `plugins must be a function, but received ${JSON.stringify(arg)}.`,
    pastedContentCallbackType: (arg) => `pastedContent must be a function, but received ${JSON.stringify(arg)}.`,
    setPluginsOnce: 'The plugins cannot be changed dynamically. See http://www.telerik.com/kendo-angular-ui/components/editor/plugins/',
    setPlaceHolderOnce: 'The placeholder cannot be changed dynamically. See https://www.telerik.com/kendo-angular-ui/components/editor/plugins/#toc-custom-plugins/',
    printTool: 'The Print tool and functionality are supported only in iframe mode. See https://www.telerik.com/kendo-angular-ui-develop/components/editor/api/EditorPrintButtonDirective/'
};

/**
 * @hidden
 */
class ProviderService {
}
ProviderService.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProviderService, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });
ProviderService.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProviderService });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProviderService, decorators: [{
            type: Injectable
        }] });

/**
 * @hidden
 */
class EditorToolsService {
    constructor() {
        this.needsCheck = new Subject();
    }
}
EditorToolsService.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorToolsService, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });
EditorToolsService.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorToolsService });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorToolsService, decorators: [{
            type: Injectable
        }] });

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * The Editor [`paste`]({% slug api_editor_editorcomponent %}#toc-paste) event.
 */
class EditorPasteEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `paste` event.
     * @hidden
     */
    constructor(cleanedHtml, originalHtml, originalEvent) {
        super();
        this.cleanedHtml = cleanedHtml;
        this.originalHtml = originalHtml;
        this.originalEvent = originalEvent;
    }
}

/**
 * @hidden
 */
class DropDownToolDirective {
    constructor(hostEl, zone) {
        this.hostEl = hostEl;
        this.zone = zone;
        this.preventDefault = (event) => {
            event.preventDefault();
        };
    }
    get hostElement() {
        return this.hostEl.nativeElement;
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.hostElement.addEventListener('pointerdown', this.preventDefault);
        });
    }
    ngOnDestroy() {
        this.hostElement.removeEventListener('pointerdown', this.preventDefault);
    }
}
DropDownToolDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropDownToolDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ÉµÉµFactoryTarget.Directive });
DropDownToolDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropDownToolDirective, selector: "[kendoEditorDropDownTool]", ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropDownToolDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[kendoEditorDropDownTool]' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; } });

/**
 * @hidden
 */
class FormatDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(tag) {
        this.valueChange.emit(tag);
    }
    focus() {
        this.dropDownList.focus();
    }
}
FormatDropDownListComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormatDropDownListComponent, deps: [], target: i0.ÉµÉµFactoryTarget.Component });
FormatDropDownListComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormatDropDownListComponent, selector: "kendo-editor-format-dropdownlist", inputs: { data: "data", value: "value", defaultItem: "defaultItem", itemDisabled: "itemDisabled", title: "title", disabled: "disabled", tabindex: "tabindex" }, outputs: { valueChange: "valueChange" }, viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, static: true }, { propertyName: "dropDownList", first: true, predicate: ["element"], descendants: true, read: DropDownListComponent, static: true }], ngImport: i0, template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'tag'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <ng-container [ngSwitch]="dataItem.tag">
                    <span *ngSwitchCase="'h1'" style="display: block; font-size: 2em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h2'" style="display: block; font-size: 1.5em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h3'" style="display: block; font-size: 1.17em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h4'" style="display: block; font-size: 1em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h5'" style="display: block; font-size: .83em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h6'" style="display: block; font-size: .67em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'p'" style="display: block; margin-left: 0;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchDefault>{{ dataItem.text }}</span>
                </ng-container>
            </ng-template>
        </kendo-dropdownlist>
    `, isInline: true, styles: ["\n        .k-dropdownlist {\n            width: 13em;\n        }\n    "], components: [{ type: i1$2.DropDownListComponent, selector: "kendo-dropdownlist", inputs: ["iconClass", "loading", "data", "value", "textField", "valueField", "popupSettings", "listHeight", "defaultItem", "disabled", "itemDisabled", "readonly", "filterable", "virtual", "ignoreCase", "delay", "valuePrimitive", "tabindex", "tabIndex", "size", "rounded", "fillMode", "id"], outputs: ["valueChange", "filterChange", "selectionChange", "open", "opened", "close", "closed", "focus", "blur"], exportAs: ["kendoDropDownList"] }], directives: [{ type: DropDownToolDirective, selector: "[kendoEditorDropDownTool]" }, { type: i1$2.ItemTemplateDirective, selector: "[kendoDropDownListItemTemplate],[kendoComboBoxItemTemplate],[kendoAutoCompleteItemTemplate],[kendoMultiSelectItemTemplate]" }, { type: i3$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormatDropDownListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-editor-format-dropdownlist',
                    template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'tag'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <ng-container [ngSwitch]="dataItem.tag">
                    <span *ngSwitchCase="'h1'" style="display: block; font-size: 2em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h2'" style="display: block; font-size: 1.5em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h3'" style="display: block; font-size: 1.17em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h4'" style="display: block; font-size: 1em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h5'" style="display: block; font-size: .83em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h6'" style="display: block; font-size: .67em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'p'" style="display: block; margin-left: 0;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchDefault>{{ dataItem.text }}</span>
                </ng-container>
            </ng-template>
        </kendo-dropdownlist>
    `,
                    styles: [`
        .k-dropdownlist {
            width: 13em;
        }
    `]
                }]
        }], propDecorators: { data: [{
                type: Input
            }], value: [{
                type: Input
            }], defaultItem: [{
                type: Input
            }], itemDisabled: [{
                type: Input
            }], title: [{
                type: Input
            }], disabled: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], element: [{
                type: ViewChild,
                args: ['element', { static: true }]
            }], dropDownList: [{
                type: ViewChild,
                args: ['element', { read: DropDownListComponent, static: true }]
            }] } });

/**
 * @hidden
 */
class FormatDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.formatDropDownList.dropDownList.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('format', { tag: this.value });
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FormatDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormatDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
FormatDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormatDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "formatDropDownList", first: true, predicate: ["formatDropDownList"], descendants: true, read: FormatDropDownListComponent, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('format') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-format-dropdownlist
                        #formatDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-format-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: FormatDropDownListComponent, selector: "kendo-editor-format-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormatDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('format') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-format-dropdownlist
                        #formatDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-format-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], formatDropDownList: [{
                type: ViewChild,
                args: ['formatDropDownList', { read: FormatDropDownListComponent, static: true }]
            }] } });

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the format of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorFormatComponent extends ToolBarToolComponent {
    constructor(dialogService, localization, providerService, toolsService) {
        super();
        this.dialogService = dialogService;
        this.localization = localization;
        this.toolsService = toolsService;
        this.disabled = false;
        this.tabindex = -1;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        this.editor = providerService.editor;
    }
    /**
     * Overrides the default format items list.
     */
    set data(formatItems) {
        this._data = formatItems || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            if (!this.overflows && this.formatDropDownList && !this.formatDropDownList.dropDownList.isOpen) {
                return true; //disable all items in order to prevent navigation when DDL is closed
            }
            else {
                return itemArgs.dataItem.tag === null;
            }
        };
        setTimeout(() => {
            this.defaultItem = { text: this.title, tag: null };
            this.toolsService.needsCheck.next();
        });
        this.subs = this.editor.stateChange.subscribe(({ format }) => {
            const index = this.data.findIndex(item => item.tag === format.selected.tag);
            this.value = index !== -1 ? format.selected.tag : null;
            this.disabled = format.disabled;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('format', { tag: ev });
            this.editor.view.focus();
            this.valueChange.emit(this.data.find(d => d.tag === ev));
        }
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    get outerWidth() {
        const element = this.formatDropDownList.element;
        if (element) {
            return outerWidth(element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('format');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FormatDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabindex = 0;
        if (this.overflows) {
            this.formatButton.nativeElement.focus();
        }
        else {
            this.formatDropDownList.focus();
        }
    }
    /**
     * @hidden
     */
    handleKey() {
        this.tabindex = -1;
        return false;
    }
}
EditorFormatComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFormatComponent, deps: [{ token: i1$1.DialogService }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorFormatComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorFormatComponent, selector: "kendo-toolbar-dropdownlist[kendoEditorFormat]", inputs: { data: "data" }, outputs: { valueChange: "valueChange" }, providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFormatComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "formatDropDownList", first: true, predicate: ["formatDropDownList"], descendants: true }, { propertyName: "formatButton", first: true, predicate: ["formatButton"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-format-dropdownlist
                #formatDropDownList
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-format-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                #formatButton
                [tabindex]="tabindex"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="'apply-format'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `, isInline: true, components: [{ type: FormatDropDownListComponent, selector: "kendo-editor-format-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFormatComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFormatComponent) }],
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorFormat]',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-format-dropdownlist
                #formatDropDownList
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-format-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                #formatButton
                [tabindex]="tabindex"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="'apply-format'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogService }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; }, propDecorators: { data: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], formatDropDownList: [{
                type: ViewChild,
                args: ['formatDropDownList', { static: false }]
            }], formatButton: [{
                type: ViewChild,
                args: ['formatButton', { static: false }]
            }] } });

/**
 * @hidden
 */
class MessagesDirective extends ComponentMessages {
}
MessagesDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MessagesDirective, deps: null, target: i0.ÉµÉµFactoryTarget.Directive });
MessagesDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: MessagesDirective, selector: "[kendoEditorMessages]", inputs: { alignCenter: "alignCenter", alignJustify: "alignJustify", alignLeft: "alignLeft", alignRight: "alignRight", backColor: "backColor", blockquote: "blockquote", bold: "bold", cleanFormatting: "cleanFormatting", createLink: "createLink", fontFamily: "fontFamily", fontSize: "fontSize", foreColor: "foreColor", format: "format", indent: "indent", insertFile: "insertFile", insertImage: "insertImage", insertOrderedList: "insertOrderedList", insertUnorderedList: "insertUnorderedList", italic: "italic", outdent: "outdent", print: "print", redo: "redo", selectAll: "selectAll", strikethrough: "strikethrough", subscript: "subscript", superscript: "superscript", underline: "underline", undo: "undo", unlink: "unlink", viewSource: "viewSource", insertTable: "insertTable", addColumnBefore: "addColumnBefore", addColumnAfter: "addColumnAfter", addRowBefore: "addRowBefore", addRowAfter: "addRowAfter", deleteColumn: "deleteColumn", deleteRow: "deleteRow", deleteTable: "deleteTable", mergeCells: "mergeCells", splitCell: "splitCell", dialogApply: "dialogApply", dialogCancel: "dialogCancel", dialogInsert: "dialogInsert", dialogUpdate: "dialogUpdate", fileText: "fileText", fileTitle: "fileTitle", fileWebAddress: "fileWebAddress", imageAltText: "imageAltText", imageHeight: "imageHeight", imageWebAddress: "imageWebAddress", imageWidth: "imageWidth", linkOpenInNewWindow: "linkOpenInNewWindow", linkText: "linkText", linkTitle: "linkTitle", linkWebAddress: "linkWebAddress" }, usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MessagesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoEditorMessages]'
                }]
        }], propDecorators: { alignCenter: [{
                type: Input
            }], alignJustify: [{
                type: Input
            }], alignLeft: [{
                type: Input
            }], alignRight: [{
                type: Input
            }], backColor: [{
                type: Input
            }], blockquote: [{
                type: Input
            }], bold: [{
                type: Input
            }], cleanFormatting: [{
                type: Input
            }], createLink: [{
                type: Input
            }], fontFamily: [{
                type: Input
            }], fontSize: [{
                type: Input
            }], foreColor: [{
                type: Input
            }], format: [{
                type: Input
            }], indent: [{
                type: Input
            }], insertFile: [{
                type: Input
            }], insertImage: [{
                type: Input
            }], insertOrderedList: [{
                type: Input
            }], insertUnorderedList: [{
                type: Input
            }], italic: [{
                type: Input
            }], outdent: [{
                type: Input
            }], print: [{
                type: Input
            }], redo: [{
                type: Input
            }], selectAll: [{
                type: Input
            }], strikethrough: [{
                type: Input
            }], subscript: [{
                type: Input
            }], superscript: [{
                type: Input
            }], underline: [{
                type: Input
            }], undo: [{
                type: Input
            }], unlink: [{
                type: Input
            }], viewSource: [{
                type: Input
            }], insertTable: [{
                type: Input
            }], addColumnBefore: [{
                type: Input
            }], addColumnAfter: [{
                type: Input
            }], addRowBefore: [{
                type: Input
            }], addRowAfter: [{
                type: Input
            }], deleteColumn: [{
                type: Input
            }], deleteRow: [{
                type: Input
            }], deleteTable: [{
                type: Input
            }], mergeCells: [{
                type: Input
            }], splitCell: [{
                type: Input
            }], dialogApply: [{
                type: Input
            }], dialogCancel: [{
                type: Input
            }], dialogInsert: [{
                type: Input
            }], dialogUpdate: [{
                type: Input
            }], fileText: [{
                type: Input
            }], fileTitle: [{
                type: Input
            }], fileWebAddress: [{
                type: Input
            }], imageAltText: [{
                type: Input
            }], imageHeight: [{
                type: Input
            }], imageWebAddress: [{
                type: Input
            }], imageWidth: [{
                type: Input
            }], linkOpenInNewWindow: [{
                type: Input
            }], linkText: [{
                type: Input
            }], linkTitle: [{
                type: Input
            }], linkWebAddress: [{
                type: Input
            }] } });

/**
 * @hidden
 */
class LocalizedMessagesDirective extends MessagesDirective {
    constructor(service) {
        super();
        this.service = service;
    }
}
LocalizedMessagesDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LocalizedMessagesDirective, deps: [{ token: i1.LocalizationService }], target: i0.ÉµÉµFactoryTarget.Directive });
LocalizedMessagesDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LocalizedMessagesDirective, selector: "[kendoEditorLocalizedMessages]", providers: [{
            provide: MessagesDirective,
            useExisting: forwardRef(() => LocalizedMessagesDirective)
        }], usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LocalizedMessagesDirective, decorators: [{
            type: Directive,
            args: [{
                    providers: [{
                            provide: MessagesDirective,
                            useExisting: forwardRef(() => LocalizedMessagesDirective)
                        }],
                    selector: '[kendoEditorLocalizedMessages]'
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; } });

/**
 * @hidden
 */
const commandIcons = {
    alignCenter: 'align-center',
    alignJustify: 'align-justify',
    alignLeft: 'align-left',
    alignRight: 'align-right',
    backColor: 'droplet',
    blockquote: 'blockquote',
    bold: 'bold',
    cleanFormatting: 'clear-css',
    createLink: 'link',
    foreColor: 'foreground-color',
    indent: 'indent',
    insertFile: 'file-add',
    insertImage: 'image',
    insertOrderedList: 'list-ordered',
    insertUnorderedList: 'list-unordered',
    italic: 'italic',
    outdent: 'outdent',
    print: 'print',
    redo: 'redo',
    selectAll: 'select-all',
    strikethrough: 'strikethrough',
    subscript: 'subscript',
    superscript: 'supscript',
    underline: 'underline',
    undo: 'undo',
    unlink: 'unlink',
    viewSource: 'code',
    //table
    insertTable: 'table-add',
    addColumnBefore: 'table-column-insert-left',
    addColumnAfter: 'table-column-insert-right',
    addRowBefore: 'table-row-insert-above',
    addRowAfter: 'table-row-insert-below',
    deleteRow: 'table-row-delete',
    deleteColumn: 'table-column-delete',
    mergeCells: 'cells-merge',
    splitCell: 'cell-split-horizontally',
    deleteTable: 'table-delete'
    // tableWizard: 'table-wizard'
};

const MY_TOKEN = new InjectionToken('COMMAND_TOKEN');
/**
 * @hidden
 */
class EditorCommandBaseDirective {
    constructor(command, button, localization, providerService, toolsService) {
        this.command = command;
        this.button = button;
        this.localization = localization;
        this.toolsService = toolsService;
        this.editor = providerService.editor;
        setTimeout(() => {
            const text = this.localization.get(this.command);
            if (text) {
                this.button.showText = 'overflow';
                this.button.showIcon = 'both';
                this.button.text = text;
            }
            if (!this.button.toolbarOptions.icon) {
                this.button.icon = commandIcons[this.command];
            }
            this.button.title = text;
            this.toolsService.needsCheck.next();
        });
    }
    ngOnInit() {
        this.subs = this.editor.stateChange.subscribe(this.onStateChange.bind(this));
        this.subs.add(this.button.click.subscribe((this.clickHandler.bind(this))));
        this.subs.add(this.button.pointerdown.subscribe((this.pointerdownHandler.bind(this))));
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    // eslint-disable -next-line
    clickHandler() { }
    // eslint-disable -next-line
    pointerdownHandler(_event) { }
    // eslint-disable -next-line
    onStateChange(_toolBarState) { }
}
EditorCommandBaseDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCommandBaseDirective, deps: [{ token: MY_TOKEN }, { token: i1$3.ToolBarButtonComponent }, { token: i1.LocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorCommandBaseDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorCommandBaseDirective, selector: "[kendoEditorCommandBase]", ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCommandBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoEditorCommandBase]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MY_TOKEN]
                }] }, { type: i1$3.ToolBarButtonComponent }, { type: i1.LocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * @hidden
 */
class EditorCommandButton extends EditorCommandBaseDirective {
    constructor(command, button, localization, providerService, toolsService) {
        super(command, button, localization, providerService, toolsService);
        this.command = command;
        this.button = button;
        this.localization = localization;
        this.providerService = providerService;
        this.toolsService = toolsService;
    }
    clickHandler() {
        this.editor.exec(this.command, this.editor.applyToWord);
        this.editor.focus();
    }
    pointerdownHandler(e) {
        e.preventDefault();
    }
    onStateChange(toolBarState) {
        this.button.selected = toolBarState[this.command].selected;
        this.button.disabled = toolBarState[this.command].disabled;
    }
}

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Bold tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBoldButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorBoldButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('bold', button, localization, providerService, toolsService);
    }
}
EditorBoldButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBoldButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorBoldButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorBoldButtonDirective, selector: "kendo-toolbar-button[kendoEditorBoldButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBoldButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorBoldButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Italic tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorItalicButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorItalicButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('italic', button, localization, providerService, toolsService);
    }
}
EditorItalicButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorItalicButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorItalicButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorItalicButtonDirective, selector: "kendo-toolbar-button[kendoEditorItalicButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorItalicButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorItalicButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Underline tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnderlineButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorUnderlineButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('underline', button, localization, providerService, toolsService);
    }
}
EditorUnderlineButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUnderlineButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorUnderlineButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorUnderlineButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnderlineButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUnderlineButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorUnderlineButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignLeft tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignLeftButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorAlignLeftButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('alignLeft', button, localization, providerService, toolsService);
    }
}
EditorAlignLeftButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignLeftButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAlignLeftButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAlignLeftButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignLeftButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignLeftButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAlignLeftButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignCenter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignCenterButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorAlignCenterButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('alignCenter', button, localization, providerService, toolsService);
    }
}
EditorAlignCenterButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignCenterButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAlignCenterButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAlignCenterButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignCenterButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignCenterButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAlignCenterButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignRight tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignRightButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorAlignRightButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('alignRight', button, localization, providerService, toolsService);
    }
}
EditorAlignRightButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignRightButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAlignRightButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAlignRightButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignRightButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignRightButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAlignRightButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignJustify tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignJustifyButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorAlignJustifyButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('alignJustify', button, localization, providerService, toolsService);
    }
}
EditorAlignJustifyButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignJustifyButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAlignJustifyButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAlignJustifyButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignJustifyButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAlignJustifyButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAlignJustifyButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertUnorderedList tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertUnorderedListButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorInsertUnorderedListButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('insertUnorderedList', button, localization, providerService, toolsService);
    }
}
EditorInsertUnorderedListButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertUnorderedListButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorInsertUnorderedListButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertUnorderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertUnorderedListButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertUnorderedListButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorInsertUnorderedListButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertOrderedList tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertOrderedListButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorInsertOrderedListButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('insertOrderedList', button, localization, providerService, toolsService);
    }
}
EditorInsertOrderedListButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertOrderedListButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorInsertOrderedListButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertOrderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertOrderedListButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertOrderedListButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorInsertOrderedListButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Indent tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorIndentButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorIndentButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('indent', button, localization, providerService, toolsService);
    }
}
EditorIndentButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorIndentButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorIndentButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorIndentButtonDirective, selector: "kendo-toolbar-button[kendoEditorIndentButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorIndentButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorIndentButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Outdent tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorOutdentButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorOutdentButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('outdent', button, localization, providerService, toolsService);
    }
}
EditorOutdentButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorOutdentButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorOutdentButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorOutdentButtonDirective, selector: "kendo-toolbar-button[kendoEditorOutdentButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorOutdentButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorOutdentButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * @hidden
 */
class EditorCommandDialog extends EditorCommandBaseDirective {
    constructor(dialog, button, localization, providerService, toolsService) {
        super(dialog, button, localization, providerService, toolsService);
        this.dialog = dialog;
        this.button = button;
        this.localization = localization;
        this.toolsService = toolsService;
    }
    clickHandler() {
        this.editor.openDialog(this.dialog);
    }
    onStateChange(toolBarState) {
        this.button.selected = toolBarState[this.command].selected;
        this.button.disabled = toolBarState[this.command].disabled;
    }
}

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor CreateLink tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCreateLinkButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorCreateLinkButtonDirective extends EditorCommandDialog {
    constructor(button, localization, providerService, toolsService) {
        super('createLink', button, localization, providerService, toolsService);
    }
}
EditorCreateLinkButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCreateLinkButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorCreateLinkButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorCreateLinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorCreateLinkButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCreateLinkButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorCreateLinkButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Unlink tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnlinkButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorUnlinkButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('unlink', button, localization, providerService, toolsService);
    }
}
EditorUnlinkButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUnlinkButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorUnlinkButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorUnlinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnlinkButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUnlinkButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorUnlinkButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertImage tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertImageButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorInsertImageButtonDirective extends EditorCommandDialog {
    constructor(button, localization, providerService, toolsService) {
        super('insertImage', button, localization, providerService, toolsService);
    }
}
EditorInsertImageButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertImageButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorInsertImageButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertImageButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertImageButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertImageButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorInsertImageButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

const EMPTY_PARAGRAPH = '<p></p>';
const defaultPasteCleanupSettings = {
    convertMsLists: false,
    removeAttributes: [],
    removeHtmlComments: false,
    removeInvalidHTML: true,
    removeMsClasses: false,
    removeMsStyles: false,
    stripTags: []
};
const removeCommentsIf = conditionallyExecute(removeComments);
const removeInvalidHTMLIf = conditionallyExecute(sanitize);
const getPasteCleanupAttributes = (config) => {
    if (config.removeAttributes === 'all') {
        return { '*': removeAttribute };
    }
    const initial = removeEmptyEntries({
        style: config.removeMsStyles ? sanitizeStyleAttr : undefined,
        class: config.removeMsClasses ? sanitizeClassAttr : undefined
    });
    return config.removeAttributes.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: removeAttribute })), initial);
};
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
class EditorComponent {
    constructor(dialogService, localization, cdr, ngZone, element, providerService, toolsService) {
        this.dialogService = dialogService;
        this.localization = localization;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.element = element;
        this.providerService = providerService;
        this.toolsService = toolsService;
        /**
         * If set to `false`, the Editor will run in style non-encapsulated mode. This means
         * that the styles of the page will be persisted in the Editor and its content will be affected by them.
         * @default true
         */
        this.iframe = true;
        /**
         * If set to `true` or `ApplyToWordOptions` object, commands that apply emphasis or inline styles will be applied to the whole word the cursor is in.
         * @default false
         */
        this.applyToWord = false;
        /**
         * By default, whitespace is collapsed as per HTML's rules.
         * Set to `true` to preserve whitespace, but normalize newlines to spaces.
         * Set to `'full'` to preserve whitespace entirely. In this case the default ProseMirror behavior is to parse white space into nodes.
         *
         * @default false
         */
        this.preserveWhitespace = false;
        /**
         * Determines whether the Editor can be resized ([see example]({% slug styling_editor %}#toc-resizable-editor)).
         * @default false
         */
        this.resizable = false;
        /**
         * Fires each time the value of the Editor is changed upon user interaction&mdash;
         * for example, when the value is updated through typing in the content area or using some of the Editor tools ([see example]({% slug overview_editor %}#toc-events)).
         * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
         * the `valueChange` event is not triggered because it might cause a mix-up with the
         * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires when the content area of the Editor is focused ([see example]({% slug overview_editor %}#toc-events)).
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires when the user performs paste in the content area of the Editor ([see example]({% slug overview_editor %}#toc-events)).
         * The event is preventable. If you cancel it, the Editor content will not change.
         */
        this.paste = new EventEmitter();
        /**
         * Fires when the content area of the Editor is blurred ([see example]({% slug overview_editor %}#toc-events)).
         */
        this.onBlur = new EventEmitter();
        this.hostClass = true;
        /**
         * @hidden
         */
        this.stateChange = new BehaviorSubject(initialToolBarState);
        /**
         * @hidden
         */
        this.valueModified = new Subject();
        this._readonly = false;
        this._placeholder = '';
        this.inForm = false;
        this.afterViewInit = new Subject();
        this.contentAreaLoaded = new Subject();
        this.dispatchTransaction = (tr) => {
            const docChanged = tr.docChanged;
            if (this.disabled || (this.readonly && docChanged)) {
                return;
            }
            if (docChanged) {
                const doc = tr.doc;
                const html = getHtml({ doc });
                this.trOnChange = tr;
                this.htmlOnChange = html;
                this.ngZone.run(() => {
                    this.valueModified.next(html);
                });
            }
            if (!docChanged || this.inForm) {
                this.view.updateState(this.view.state.apply(tr));
            }
        };
        this.transformPastedHTML = (dirtyHtml, plainText) => {
            if (plainText) {
                return this.dispatchPasteEvent(dirtyHtml, dirtyHtml);
            }
            const pasteCleanupSettings = Object.assign(Object.assign({}, defaultPasteCleanupSettings), this.pasteCleanupSettings);
            const html = pipe(removeInvalidHTMLIf(pasteCleanupSettings.removeInvalidHTML), removeCommentsIf(pasteCleanupSettings.removeHtmlComments))(dirtyHtml);
            const clean = pasteCleanup(html, {
                convertMsLists: pasteCleanupSettings.convertMsLists,
                stripTags: pasteCleanupSettings.stripTags.join('|'),
                attributes: getPasteCleanupAttributes(pasteCleanupSettings)
            });
            return this.dispatchPasteEvent(dirtyHtml, clean);
        };
        this.changeValue = (value) => {
            const prev = this._value;
            this._value = value;
            if (!this._view) {
                return;
            }
            if (this.htmlOnChange === value && this.trOnChange) {
                this.view.updateState(this.view.state.apply(this.trOnChange));
            }
            else {
                if ((prev || '') !== (value || '')) {
                    const iframeContentWindowNotPresent = this.iframe && !this.container.element.nativeElement.contentWindow;
                    if (iframeContentWindowNotPresent) {
                        return;
                    }
                    const state = this.view.state;
                    const nextDoc = parseContent(value || '', state.schema, { preserveWhitespace: this.preserveWhitespace });
                    const tr = state.tr
                        .setSelection(new AllSelection(state.doc))
                        .replaceSelectionWith(nextDoc);
                    this.view.updateState(state.apply(tr));
                }
            }
            this.trOnChange = null;
            this.htmlOnChange = null;
        };
        this.onChangeCallback = (value) => {
            this.changeValue(value);
        };
        this.onTouchedCallback = (_) => { };
        this.onPaste = (_view, nativeEvent) => {
            this._pasteEvent = nativeEvent;
            return false;
        };
        validatePackage(packageMetadata);
        this.providerService.editor = this;
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        // https://stackoverflow.com/questions/56572483/chrome-is-synchronously-handling-iframe-loading-whereas-firefox-handles-it-asyn
        this.subs = zip(this.afterViewInit.asObservable(), this.contentAreaLoaded.asObservable()).subscribe(() => this.initialize());
    }
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    set value(value) {
        this.changeValue(value);
    }
    get value() {
        if (this.trOnChange) {
            return this.htmlOnChange;
        }
        let value = this._view ? this.getSource() : this._value;
        if (value === EMPTY_PARAGRAPH) {
            return this._value ? '' : this._value;
        }
        else {
            return value;
        }
    }
    /**
     * Sets the disabled state of the component.
     */
    set disabled(value) {
        this._disabled = value || false;
        if (this._view) {
            this._view.updateState(this._view.state);
        }
        if (this._disabled) {
            this.readonly = false;
        }
        if (this._disabled || this._readonly) {
            this.stateChange.next(disabledToolBarState);
        }
        else {
            this.stateChange.next(initialToolBarState);
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Sets the read-only state of the component.
     */
    set readonly(value) {
        this._readonly = value || false;
        if (this._view) {
            // remove DOM selection
            let win;
            if (this.iframe) {
                win = this.container.element.nativeElement.contentWindow;
            }
            else {
                win = window;
            }
            const focusedNode = win.getSelection().focusNode;
            if (this._view.dom.contains(focusedNode)) {
                win.getSelection().removeAllRanges();
            }
            // remove ProseMirror selection
            const doc = this._view.state.doc;
            const tr = this._view.state.tr.setSelection(TextSelection.create(doc, 1));
            this._view.dispatch(tr);
        }
        if (this._readonly) {
            if (this.toolbar) {
                this.toolbar.tabindex = -1;
            }
            this.stateChange.next(disabledToolBarState);
        }
        else {
            if (this.toolbar) {
                this.toolbar.tabindex = 0;
            }
            this.stateChange.next(initialToolBarState);
        }
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * Allows providing a custom schema. ([see example]({% slug schema_editor %}))
     */
    set schema(value) {
        if (isDevMode) {
            if (!(value instanceof Schema)) {
                throw new Error(EditorErrorMessages.schemaType);
            }
            if (this._view) {
                throw new Error(EditorErrorMessages.setSchemaOnce);
            }
        }
        this._schema = value;
    }
    get schema() {
        return this._schema;
    }
    /**
     * Defines a function which determines the plugins that will be used when initializing the Editor.
     * It exposes the default plugins collection as an argument, and returns
     * the plugins collection that will be used when creating the Editor component. ([see example]({% slug plugins_editor %}))
     *
     * ```ts-no-run
     *  pluginsCallback(defaultPlugins: Plugin[]): Plugin[] {
     *    const myPlugin = new Plugin({/custom plugin code/});
     *    return [...defaultPlugins, myPlugin];
     *  }
     * ```
     */
    set plugins(fn) {
        if (isDevMode) {
            if (typeof fn !== 'function') {
                throw new Error(EditorErrorMessages.pluginsCallbackType(fn));
            }
            if (this._view) {
                throw new Error(EditorErrorMessages.setPluginsOnce);
            }
        }
        this._plugins = fn;
    }
    get plugins() {
        return this._plugins;
    }
    /**
     * The hint, which is displayed when the component is empty.
     */
    set placeholder(value) {
        if (isDevMode && this._view) {
            throw new Error(EditorErrorMessages.setPlaceHolderOnce);
        }
        this._placeholder = value;
    }
    get placeholder() {
        return this._placeholder;
    }
    get resizableClass() {
        return !!this.resizable;
    }
    get isDisabled() {
        return this.disabled;
    }
    get isReadonly() {
        return this.readonly;
    }
    get isIE() {
        return this.iframe && detectIE();
    }
    get dir() {
        return this.direction;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get minWidth() {
        const resizableOptions = this.resizable;
        return resizableOptions.minWidth ? resizableOptions.minWidth + 'px' : undefined;
    }
    get maxWidth() {
        const resizableOptions = this.resizable;
        return resizableOptions.maxWidth ? resizableOptions.maxWidth + 'px' : undefined;
    }
    get minHeight() {
        const resizableOptions = this.resizable;
        return resizableOptions.minHeight ? resizableOptions.minHeight + 'px' : undefined;
    }
    get maxHeight() {
        const resizableOptions = this.resizable;
        return resizableOptions.maxHeight ? resizableOptions.maxHeight + 'px' : undefined;
    }
    get toolbar() {
        return this.defaultToolbarComponent || this.userToolBarComponent;
    }
    get toolbarElement() {
        return this.defaultToolbar || this.userToolBarElement;
    }
    /**
     * Returns the ProseMirror [EditorView](https://prosemirror.net/docs/ref/#view.EditorView) object
     * that manages the DOM structure that represents an editable document.
     */
    get view() {
        return this._view;
    }
    /**
     * Returns the text which the current Editor selection contains ([see example]({% slug selection_editor %}#toc-retrieve-the-selected-text)).
     */
    get selectionText() {
        return this._view && this._view.state ? getSelectionText$1(this._view.state) : '';
    }
    ngOnInit() {
        this.subs.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
        this.subs.add(this.toolsService.needsCheck.subscribe(() => this.cdr.markForCheck()));
    }
    ngAfterViewInit() {
        this.afterViewInit.next();
        if (!this.iframe) {
            this.contentAreaLoaded.next();
        }
        if (this.resizable) {
            this.normalizeSize();
        }
    }
    ngOnChanges(changes) {
        if (changes.value && this.view) {
            this.changeValue(changes.value.currentValue);
        }
        if (changes.iframe && !changes.iframe.isFirstChange()) {
            this.ngZone.onStable.pipe(take(1)).subscribe(() => this.initialize());
        }
        if (changes.resizable && !changes.resizable.isFirstChange()) {
            this.normalizeSize();
        }
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    iframeOnLoad() {
        this.contentAreaLoaded.next();
    }
    /**
     * Executes a command on the currently selected text
     * ([more information and example]({% slug toolbartools_editor %}#toc-custom-tools)).
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list,
     * the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p` and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     * - `insertTable` - Accepts an object with the `rows` and `cols` properties. The number values are zero based.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Inserts a file.
     * editor.exec('insertFile', { href: 'www.progress.com/resources/myfile.doc', title: 'My file', target: 'window' });
     *
     * // Inserts a image.
     * editor.exec('insertImage', { src: 'www.progress.com/resources/logo.jpg', title: 'Progress', target: 'window' });
     *
     * // Inserts a text at a given position. If no position is specified, the text will be inserted after the cursor.
     * editor.exec('insertText', { text: 'Hello World!', from: 0, to: 0 });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the font size of the selected text.
     * editor.exec('fontSize', 24);
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     *
     * // Creates and inserts a table with the specified number of rows and columns. Numbers are zero based.
     * this.editor.exec("insertTable", { rows: 3, cols: 5 });
     * ```
     */
    exec(commandName, attr) {
        // normalizes setHTML attributes
        if (commandName === 'setHTML' && typeof attr === 'string') {
            attr = {
                content: attr,
                parseOptions: {
                    preserveWhitespace: this.preserveWhitespace
                }
            };
        }
        else if (['fontFamily', 'fontSize', 'foreColor', 'backColor', 'createLink'].some(name => name === commandName)) {
            attr = {
                value: attr,
                applyToWord: this.applyToWord
            };
        }
        // Finds a command and applies the attributes.
        const command = editorCommands[commandName](attr);
        // Executes a ProseMirror command.
        command(this._view.state, this._view.dispatch, this._view);
    }
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     * * `insertFile`
     * * `insertImage`
     * * `tableWizard`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.openDialog('viewSource');
     * ```
     */
    openDialog(dialogName) {
        const editorDialogs = {
            createLink: {
                content: FileLinkDialogComponent
            },
            insertFile: {
                content: FileLinkDialogComponent
            },
            insertImage: {
                content: ImageDialogComponent
            },
            viewSource: {
                content: SourceDialogComponent,
                height: 400,
                width: 500
            }
            // tableWizard: {
            //     content: TableWizardDialogComponent
            // }
        };
        const dialog = Object.assign({ appendTo: this.dialogContainer }, editorDialogs[dialogName]);
        this.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialog).content.instance;
        if (dialogName === 'createLink' || dialogName === 'insertFile') {
            dialogContent.command = dialogName;
        }
        dialogContent.editor = this;
        dialogContent.setData(this._view.state, { applyToWord: this.applyToWord });
    }
    /**
     * Manually focus the Editor.
     */
    focus() {
        this.focusChangedProgrammatically = true;
        this._view.focus();
        this.focusChangedProgrammatically = false;
    }
    /**
     * Manually blur the Editor.
     */
    blur() {
        this.focusChangedProgrammatically = true;
        this._view.dom.blur();
        this.focusChangedProgrammatically = false;
    }
    /**
     * @hidden
     */
    getSource() {
        return getHtml(this._view.state);
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
        if (this._styleObserver) {
            this._styleObserver.disconnect();
        }
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.inForm = true;
        // To avoid confusion, non-existent values are always undefined.
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        return false;
    }
    initialize() {
        if (!isDocumentAvailable()) {
            return;
        }
        const currentSchema = this.schema || schema;
        const containerNativeElement = this.container.element.nativeElement;
        const contentNode = parseContent((this.value || '').trim(), currentSchema, { preserveWhitespace: this.preserveWhitespace });
        if (this.iframe) {
            const iframeDoc = containerNativeElement.contentDocument;
            const meta = iframeDoc.createElement('meta');
            meta.setAttribute('charset', 'utf-8');
            iframeDoc.head.appendChild(meta);
            [defaultStyle, tablesStyles, this.dir === 'rtl' ? rtlStyles : undefined].forEach(styles => {
                if (styles) {
                    const style = iframeDoc.createElement('style');
                    style.appendChild(iframeDoc.createTextNode(styles));
                    iframeDoc.head.appendChild(style);
                }
            });
            const element = iframeDoc.createElement('div');
            element.classList.add('k-content');
            iframeDoc.body.appendChild(element);
        }
        else {
            const element = document.createElement('div');
            containerNativeElement.appendChild(element);
        }
        const defaultPlugins = [
            new Plugin({
                key: new PluginKey('editor-tabindex'),
                props: {
                    attributes: () => ({
                        // set tabindex when contenteditable is false, so that the content area can be selected
                        tabIndex: this.readonly ? '0' : ''
                    })
                }
            }),
            new Plugin({
                key: new PluginKey('toolbar-tools-update'),
                view: () => ({
                    update: editorView => {
                        if (!this.disabled) {
                            this.stateChange.next(this.readonly ? disabledToolBarState : getToolbarState(editorView.state, { applyToWord: this.applyToWord }));
                        }
                    }
                })
            }),
            history(),
            keymap(buildListKeymap(currentSchema)),
            keymap(buildKeymap(currentSchema, { applyToWord: this.applyToWord })),
            keymap(baseKeymap),
            gapCursor(),
            imageResizing(),
            ...tableResizing(),
            tableEditing(),
            caretColor()
        ];
        if (this.placeholder) {
            defaultPlugins.push(placeholder(this.placeholder));
        }
        const state = EditorState.create({
            schema: currentSchema,
            doc: contentNode,
            plugins: isPresent(this.plugins) ? this.plugins(defaultPlugins) : defaultPlugins
        });
        if (this.iframe) {
            this.viewMountElement = containerNativeElement.contentDocument.querySelector('div');
        }
        else {
            this.viewMountElement = containerNativeElement.querySelector('div');
        }
        this.ngZone.runOutsideAngular(() => {
            this._view = new EditorView({ mount: this.viewMountElement }, {
                state,
                editable: () => !this.readonly,
                dispatchTransaction: this.dispatchTransaction,
                transformPastedHTML: this.transformPastedHTML,
                transformPastedText: this.transformPastedHTML,
                handleDOMEvents: {
                    paste: this.onPaste
                }
            });
        });
        if (this._view) {
            let containerElement;
            const contentAreaClasslist = this.element.nativeElement.querySelector('.k-editor-content').classList;
            if (this.iframe) {
                containerElement = this.container.element.nativeElement.contentDocument;
            }
            else {
                containerElement = this.container.element.nativeElement;
            }
            this.subs.add(fromEvent(containerElement, 'focusin')
                .subscribe((e) => {
                if (this.readonly) {
                    contentAreaClasslist.add('k-focus');
                }
                if (!this.focusChangedProgrammatically || this.shouldEmitFocus) {
                    const relatedTarget = e.relatedTarget;
                    const isActiveColorButton = relatedTarget && relatedTarget.classList.contains('k-colorpicker');
                    if (!isActiveColorButton || this.shouldEmitFocus) {
                        this.ngZone.run(() => this.onFocus.emit());
                    }
                    this.shouldEmitFocus = false;
                }
            }));
            this.subs.add(fromEvent(containerElement, 'focusout')
                .subscribe((e) => {
                if (this.readonly) {
                    contentAreaClasslist.remove('k-focus');
                }
                if (!this.focusChangedProgrammatically) {
                    const relatedTarget = e.relatedTarget;
                    const isActiveColorButton = relatedTarget && relatedTarget.classList.contains('k-colorpicker');
                    if (!isActiveColorButton) {
                        this.ngZone.run(() => this.onBlur.emit());
                    }
                }
            }));
        }
        this.subs.add(this.stateChange.subscribe(() => {
            if (this.userToolBarComponent) {
                this.userToolBarComponent.cdr.detectChanges();
            }
            else {
                this.cdr.detectChanges();
            }
        }));
        this.subs.add(this.valueModified.subscribe((value) => {
            this.onChangeCallback(value);
            this.valueChange.emit(value);
            this.cdr.markForCheck();
        }));
        this.subs.add(fromEvent(this.viewMountElement, 'keyup')
            .pipe(map((e) => e.keyCode), filter$1((code) => code === 121), // F10
        map(() => this.toolbarElement))
            .subscribe((toolbar) => toolbar.nativeElement.focus()));
        this.subs.add(fromEvent(this.viewMountElement, 'blur')
            .pipe(filter$1((event) => !this.viewMountElement.contains(event.relatedTarget)))
            .subscribe(() => this.onTouchedCallback()));
    }
    normalizeSize() {
        if (typeof this.resizable === 'object' && !this._styleObserver) {
            const element = this.element.nativeElement;
            this._styleObserver = new MutationObserver(() => {
                this.ngZone.runOutsideAngular(() => this.normalizeProperties(element));
            });
            this._styleObserver.observe(element, { attributeFilter: ['style'] });
        }
    }
    normalizeProperties(element) {
        const props = Object.keys(this.resizable);
        const pixelWidth = parseInt(element.style.width, 10);
        const pixelHeight = parseInt(element.style.height, 10);
        const resizable = this.resizable;
        props.forEach(prop => {
            const isMinProp = prop.startsWith('min');
            const isMaxProp = !isMinProp;
            const isWidthProp = prop.endsWith('Width');
            const isHeightProp = !isWidthProp;
            if (isMinProp && isWidthProp) {
                if (pixelWidth < resizable.minWidth) {
                    element.style.width = resizable.minWidth + 'px';
                }
            }
            else if (isMinProp && isHeightProp) {
                if (pixelHeight < resizable.minHeight) {
                    element.style.height = resizable.minHeight + 'px';
                }
            }
            else if (isMaxProp && isWidthProp) {
                if (pixelWidth > resizable.maxWidth) {
                    element.style.width = resizable.maxWidth + 'px';
                }
            }
            else {
                if (pixelHeight > resizable.maxHeight) {
                    element.style.height = resizable.maxHeight + 'px';
                }
            }
        });
    }
    dispatchPasteEvent(originalContent, cleanContent) {
        if (hasObservers(this.paste)) {
            const event = new EditorPasteEvent(cleanContent, originalContent, this._pasteEvent);
            this.ngZone.run(() => this.paste.emit(event));
            return event.isDefaultPrevented() ? '' : event.cleanedHtml;
        }
        return cleanContent;
    }
    ;
}
EditorComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorComponent, deps: [{ token: i1$1.DialogService }, { token: i1.LocalizationService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorComponent, selector: "kendo-editor", inputs: { value: "value", disabled: "disabled", readonly: "readonly", iframe: "iframe", applyToWord: "applyToWord", schema: "schema", plugins: "plugins", placeholder: "placeholder", preserveWhitespace: "preserveWhitespace", pasteCleanupSettings: "pasteCleanupSettings", resizable: "resizable" }, outputs: { valueChange: "valueChange", onFocus: "focus", paste: "paste", onBlur: "blur" }, host: { properties: { "class.k-editor": "this.hostClass", "class.k-editor-resizable": "this.resizableClass", "class.k-disabled": "this.isDisabled", "class.k-readonly": "this.isReadonly", "class.k-ie": "this.isIE", "attr.dir": "this.dir", "attr.ariaDisabled": "this.ariaDisabled", "style.minWidth": "this.minWidth", "style.maxWidth": "this.maxWidth", "style.minHeight": "this.minHeight", "style.maxHeight": "this.maxHeight" } }, providers: [
        EditorLocalizationService,
        ProviderService,
        EditorToolsService,
        {
            provide: LocalizationService,
            useExisting: EditorLocalizationService
        },
        {
            provide: L10N_PREFIX,
            useValue: 'kendo.editor'
        },
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => EditorComponent),
            multi: true
        },
        {
            provide: KendoInput,
            useExisting: forwardRef(() => EditorComponent)
        }
    ], queries: [{ propertyName: "userToolBarComponent", first: true, predicate: ToolBarComponent, descendants: true }, { propertyName: "userToolBarElement", first: true, predicate: ToolBarComponent, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "dialogContainer", first: true, predicate: ["dialogsContainer"], descendants: true, read: ViewContainerRef }, { propertyName: "container", first: true, predicate: ["content"], descendants: true, read: ViewContainerRef }, { propertyName: "defaultToolbar", first: true, predicate: ["defaultToolbar"], descendants: true, read: ElementRef }, { propertyName: "defaultToolbarComponent", first: true, predicate: ["defaultToolbar"], descendants: true, read: ToolBarComponent }], usesOnChanges: true, ngImport: i0, template: `
        <ng-container
            kendoEditorLocalizedMessages
            i18n-alignCenter="kendo.editor.alignCenter|The title of the tool that aligns text in the center."
            alignCenter="Center text"
            i18n-alignJustify="kendo.editor.alignJustify|The title of the tool that justifies text both left and right."
            alignJustify="Justify"
            i18n-alignLeft="kendo.editor.alignLeft|The title of the tool that aligns text on the left."
            alignLeft="Align text left"
            i18n-alignRight="kendo.editor.alignRight|The title of the tool that aligns text on the right."
            alignRight="Align text right"
            i18n-backColor="kendo.editor.backColor|The title of the tool that changes the text background color."
            backColor="Background color"
            i18n-blockquote="kendo.editor.blockquote|The title of the tool that wraps an element in a blockquote"
            blockquote="Quotation"
            i18n-bold="kendo.editor.bold|The title of the tool that makes text bold."
            bold="Bold"
            i18n-cleanFormatting="kendo.editor.cleanFormatting|The title of the Clean Formatting tool."
            cleanFormatting="Clean formatting"
            i18n-createLink="kendo.editor.createLink|The title of the tool that creates hyperlinks."
            createLink="Insert link"
            i18n-dialogApply="kendo.editor.dialogApply|The label of the **Apply** button in all editor dialogs."
            dialogApply="Apply"
            i18n-dialogCancel="kendo.editor.dialogCancel|The label of the **Cancel** button in all editor dialogs."
            dialogCancel="Cancel"
            i18n-dialogInsert="kendo.editor.dialogInsert|The label of the **Insert** button in all editor dialogs."
            dialogInsert="Insert"
            i18n-dialogUpdate="kendo.editor.dialogUpdate|The label of the **Update** button in all editor dialogs."
            dialogUpdate="Update"
            i18n-fileText="kendo.editor.fileText|The caption for the file text in the insertFile dialog."
            fileText="Text"
            i18n-fileTitle="kendo.editor.fileTitle|The caption for the file Title in the insertFile dialog."
            fileTitle="Title"
            i18n-fileWebAddress="kendo.editor.fileWebAddress|The caption for the file URL in the insertFile dialog."
            fileWebAddress="Web address"
            i18n-fontFamily="kendo.editor.fontFamily|The title of the tool that changes the text font."
            fontFamily="Select font family"
            i18n-fontSize="kendo.editor.fontSize|The title of the tool that changes the text size."
            fontSize="Select font size"
            i18n-foreColor="kendo.editor.foreColor|The title of the tool that changes the text color."
            foreColor="Color"
            i18n-format="kendo.editor.format|The title of the tool that lets users choose block formats."
            format="Format"
            i18n-imageAltText="kendo.editor.imageAltText|The caption for the image alternate text in the insertImage dialog."
            imageAltText="Alternate text"
            i18n-imageHeight="kendo.editor.imageHeight|The caption for the image height in the insertImage dialog."
            imageHeight="Height (px)"
            i18n-imageWebAddress="kendo.editor.imageWebAddress|The caption for the image URL in the insertImage dialog."
            imageWebAddress="Web address"
            i18n-imageWidth="kendo.editor.imageWidth|The caption for the image width in the insertImage dialog."
            imageWidth="Width (px)"
            i18n-indent="kendo.editor.indent|The title of the tool that indents the content."
            indent="Indent"
            i18n-insertFile="kendo.editor.insertFile|The title of the tool that inserts links to files."
            insertFile="Insert file"
            i18n-insertImage="kendo.editor.insertImage|The title of the tool that inserts images."
            insertImage="Insert image"
            i18n-insertOrderedList="kendo.editor.insertOrderedList|The title of the tool that inserts an ordered list."
            insertOrderedList="Insert ordered list"
            i18n-insertUnorderedList="kendo.editor.insertUnorderedList|The title of the tool that inserts an unordered list."
            insertUnorderedList="Insert unordered list"
            i18n-italic="kendo.editor.italic|The title of the tool that makes text italicized."
            italic="Italic"
            i18n-linkOpenInNewWindow="kendo.editor.linkOpenInNewWindow|The caption for the checkbox for opening the link in a new window in the createLink dialog."
            linkOpenInNewWindow="Open link in new window"
            i18n-linkText="kendo.editor.linkText|The caption for the link text in the createLink dialog."
            linkText="Text"
            i18n-linkTitle="kendo.editor.linkTitle|The caption for the link title in the createLink dialog."
            linkTitle="Title"
            i18n-linkWebAddress="kendo.editor.linkWebAddress|The caption for the URL in the createLink dialog."
            linkWebAddress="Web address"
            i18n-outdent="kendo.editor.outdent|The title of the tool that outdents the content."
            outdent="Outdent"
            i18n-print="kendo.editor.print|The title of the print tool."
            print="Print"
            i18n-redo="kendo.editor.redo|The title of the tool that undos the last action."
            redo="Redo"
            i18n-selectAll="kendo.editor.selectAll|The title of the tool that selects all content."
            selectAll="Select All"
            i18n-strikethrough="kendo.editor.strikethrough|The title of the tool that strikes through text."
            strikethrough="Strikethrough"
            i18n-subscript="kendo.editor.subscript|The title of the tool that makes text subscript."
            subscript="Subscript"
            i18n-superscript="kendo.editor.superscript|The title of the tool that makes text superscript."
            superscript="Superscript"
            i18n-underline="kendo.editor.underline|The title of the tool that underlines text."
            underline="Underline"
            i18n-unlink="kendo.editor.unlink|The title of the tool that removes hyperlinks."
            unlink="Remove Link"
            i18n-undo="kendo.editor.undo|The title of the tool that undos the last action."
            undo="Undo"
            i18n-viewSource="kendo.editor.viewSource|The title of the tool that shows the editor value as HTML."
            viewSource="View source"
            i18n-insertTable="kendo.editor.insertTable|The title of the tool that inserts table."
            insertTable="Insert Table"
            i18n-addColumnBefore="kendo.editor.addColumnBefore|The title of the tool that adds new column before currently selected column."
            addColumnBefore="Add column before"
            i18n-addColumnAfter="kendo.editor.addColumnAfter|The title of the tool that adds new column after currently selected column."
            addColumnAfter="Add column after"
            i18n-addRowBefore="kendo.editor.addRowBefore|The title of the tool that adds new row before currently selected row."
            addRowBefore="Add row before"
            i18n-addRowAfter="kendo.editor.addRowAfter|The title of the tool that adds new row after currently selected row."
            addRowAfter="Add row after"
            i18n-mergeCells="kendo.editor.mergeCells|The title of the tool that merges the currently selected cells."
            mergeCells="Merge cells"
            i18n-splitCell="kendo.editor.splitCell|The title of the tool that splits the currently selected cell."
            splitCell="Split cell"
            i18n-deleteColumn="kendo.editor.deleteColumn|The title of the tool that deletes a table column."
            deleteColumn="Delete column"
            i18n-deleteRow="kendo.editor.deleteRow|The title of the tool that deletes a table row."
            deleteRow="Delete row"
            i18n-deleteTable="kendo.editor.deleteTable|The title of the tool that deletes a table."
            deleteTable="Delete table"
        >
        </ng-container>
        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar [overflow]="true" [tabindex]="readonly ? -1 : 0" *ngIf="!userToolBarElement" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
        </kendo-toolbar>

        <div *ngIf="!iframe" #content [attr.dir]="direction" class="k-editor-content"></div>

        <div class="k-editor-content" *ngIf="iframe">
            <iframe #content srcdoc="<!DOCTYPE html>" frameborder="0" class="k-iframe" (load)="iframeOnLoad()"></iframe>
        </div>

        <ng-container #dialogsContainer></ng-container>
    `, isInline: true, styles: ["\n        .k-editor-content > .ProseMirror {\n            height: 100%;\n            width: 100%;\n            box-sizing: border-box;\n            outline: none;\n            overflow: auto;\n        }\n\n        .k-iframe {\n            width: 100%;\n            height: 100%;\n            display: block;\n        }\n\n\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .k-editor-resize-handles-wrapper,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .k-editor-resize-handle,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .row-resize-handle,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .column-resize-handle {\n            display: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] img,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] table {\n            pointer-events: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .ProseMirror-selectednode {\n            outline: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] {\n            cursor: unset !important;\n        }\n    "], components: [{ type: i1$3.ToolBarComponent, selector: "kendo-toolbar", inputs: ["overflow", "resizable", "popupSettings", "tabindex", "tabIndex"], outputs: ["open", "close"], exportAs: ["kendoToolBar"] }, { type: i1$3.ToolBarButtonGroupComponent, selector: "kendo-toolbar-buttongroup", inputs: ["disabled", "selection", "width", "look"], exportAs: ["kendoToolBarButtonGroup"] }, { type: i1$3.ToolBarButtonComponent, selector: "kendo-toolbar-button", inputs: ["showText", "showIcon", "text", "style", "className", "title", "disabled", "toggleable", "look", "togglable", "selected", "fillMode", "themeColor", "icon", "iconClass", "imageUrl"], outputs: ["click", "pointerdown", "selectedChange"], exportAs: ["kendoToolBarButton"] }, { type: EditorFormatComponent, selector: "kendo-toolbar-dropdownlist[kendoEditorFormat]", inputs: ["data"], outputs: ["valueChange"] }], directives: [{ type: LocalizedMessagesDirective, selector: "[kendoEditorLocalizedMessages]" }, { type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: EditorBoldButtonDirective, selector: "kendo-toolbar-button[kendoEditorBoldButton]" }, { type: EditorItalicButtonDirective, selector: "kendo-toolbar-button[kendoEditorItalicButton]" }, { type: EditorUnderlineButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnderlineButton]" }, { type: EditorAlignLeftButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignLeftButton]" }, { type: EditorAlignCenterButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignCenterButton]" }, { type: EditorAlignRightButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignRightButton]" }, { type: EditorAlignJustifyButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignJustifyButton]" }, { type: EditorInsertUnorderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertUnorderedListButton]" }, { type: EditorInsertOrderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertOrderedListButton]" }, { type: EditorIndentButtonDirective, selector: "kendo-toolbar-button[kendoEditorIndentButton]" }, { type: EditorOutdentButtonDirective, selector: "kendo-toolbar-button[kendoEditorOutdentButton]" }, { type: EditorCreateLinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorCreateLinkButton]" }, { type: EditorUnlinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnlinkButton]" }, { type: EditorInsertImageButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertImageButton]" }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-editor',
                    providers: [
                        EditorLocalizationService,
                        ProviderService,
                        EditorToolsService,
                        {
                            provide: LocalizationService,
                            useExisting: EditorLocalizationService
                        },
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.editor'
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => EditorComponent),
                            multi: true
                        },
                        {
                            provide: KendoInput,
                            useExisting: forwardRef(() => EditorComponent)
                        }
                    ],
                    template: `
        <ng-container
            kendoEditorLocalizedMessages
            i18n-alignCenter="kendo.editor.alignCenter|The title of the tool that aligns text in the center."
            alignCenter="Center text"
            i18n-alignJustify="kendo.editor.alignJustify|The title of the tool that justifies text both left and right."
            alignJustify="Justify"
            i18n-alignLeft="kendo.editor.alignLeft|The title of the tool that aligns text on the left."
            alignLeft="Align text left"
            i18n-alignRight="kendo.editor.alignRight|The title of the tool that aligns text on the right."
            alignRight="Align text right"
            i18n-backColor="kendo.editor.backColor|The title of the tool that changes the text background color."
            backColor="Background color"
            i18n-blockquote="kendo.editor.blockquote|The title of the tool that wraps an element in a blockquote"
            blockquote="Quotation"
            i18n-bold="kendo.editor.bold|The title of the tool that makes text bold."
            bold="Bold"
            i18n-cleanFormatting="kendo.editor.cleanFormatting|The title of the Clean Formatting tool."
            cleanFormatting="Clean formatting"
            i18n-createLink="kendo.editor.createLink|The title of the tool that creates hyperlinks."
            createLink="Insert link"
            i18n-dialogApply="kendo.editor.dialogApply|The label of the **Apply** button in all editor dialogs."
            dialogApply="Apply"
            i18n-dialogCancel="kendo.editor.dialogCancel|The label of the **Cancel** button in all editor dialogs."
            dialogCancel="Cancel"
            i18n-dialogInsert="kendo.editor.dialogInsert|The label of the **Insert** button in all editor dialogs."
            dialogInsert="Insert"
            i18n-dialogUpdate="kendo.editor.dialogUpdate|The label of the **Update** button in all editor dialogs."
            dialogUpdate="Update"
            i18n-fileText="kendo.editor.fileText|The caption for the file text in the insertFile dialog."
            fileText="Text"
            i18n-fileTitle="kendo.editor.fileTitle|The caption for the file Title in the insertFile dialog."
            fileTitle="Title"
            i18n-fileWebAddress="kendo.editor.fileWebAddress|The caption for the file URL in the insertFile dialog."
            fileWebAddress="Web address"
            i18n-fontFamily="kendo.editor.fontFamily|The title of the tool that changes the text font."
            fontFamily="Select font family"
            i18n-fontSize="kendo.editor.fontSize|The title of the tool that changes the text size."
            fontSize="Select font size"
            i18n-foreColor="kendo.editor.foreColor|The title of the tool that changes the text color."
            foreColor="Color"
            i18n-format="kendo.editor.format|The title of the tool that lets users choose block formats."
            format="Format"
            i18n-imageAltText="kendo.editor.imageAltText|The caption for the image alternate text in the insertImage dialog."
            imageAltText="Alternate text"
            i18n-imageHeight="kendo.editor.imageHeight|The caption for the image height in the insertImage dialog."
            imageHeight="Height (px)"
            i18n-imageWebAddress="kendo.editor.imageWebAddress|The caption for the image URL in the insertImage dialog."
            imageWebAddress="Web address"
            i18n-imageWidth="kendo.editor.imageWidth|The caption for the image width in the insertImage dialog."
            imageWidth="Width (px)"
            i18n-indent="kendo.editor.indent|The title of the tool that indents the content."
            indent="Indent"
            i18n-insertFile="kendo.editor.insertFile|The title of the tool that inserts links to files."
            insertFile="Insert file"
            i18n-insertImage="kendo.editor.insertImage|The title of the tool that inserts images."
            insertImage="Insert image"
            i18n-insertOrderedList="kendo.editor.insertOrderedList|The title of the tool that inserts an ordered list."
            insertOrderedList="Insert ordered list"
            i18n-insertUnorderedList="kendo.editor.insertUnorderedList|The title of the tool that inserts an unordered list."
            insertUnorderedList="Insert unordered list"
            i18n-italic="kendo.editor.italic|The title of the tool that makes text italicized."
            italic="Italic"
            i18n-linkOpenInNewWindow="kendo.editor.linkOpenInNewWindow|The caption for the checkbox for opening the link in a new window in the createLink dialog."
            linkOpenInNewWindow="Open link in new window"
            i18n-linkText="kendo.editor.linkText|The caption for the link text in the createLink dialog."
            linkText="Text"
            i18n-linkTitle="kendo.editor.linkTitle|The caption for the link title in the createLink dialog."
            linkTitle="Title"
            i18n-linkWebAddress="kendo.editor.linkWebAddress|The caption for the URL in the createLink dialog."
            linkWebAddress="Web address"
            i18n-outdent="kendo.editor.outdent|The title of the tool that outdents the content."
            outdent="Outdent"
            i18n-print="kendo.editor.print|The title of the print tool."
            print="Print"
            i18n-redo="kendo.editor.redo|The title of the tool that undos the last action."
            redo="Redo"
            i18n-selectAll="kendo.editor.selectAll|The title of the tool that selects all content."
            selectAll="Select All"
            i18n-strikethrough="kendo.editor.strikethrough|The title of the tool that strikes through text."
            strikethrough="Strikethrough"
            i18n-subscript="kendo.editor.subscript|The title of the tool that makes text subscript."
            subscript="Subscript"
            i18n-superscript="kendo.editor.superscript|The title of the tool that makes text superscript."
            superscript="Superscript"
            i18n-underline="kendo.editor.underline|The title of the tool that underlines text."
            underline="Underline"
            i18n-unlink="kendo.editor.unlink|The title of the tool that removes hyperlinks."
            unlink="Remove Link"
            i18n-undo="kendo.editor.undo|The title of the tool that undos the last action."
            undo="Undo"
            i18n-viewSource="kendo.editor.viewSource|The title of the tool that shows the editor value as HTML."
            viewSource="View source"
            i18n-insertTable="kendo.editor.insertTable|The title of the tool that inserts table."
            insertTable="Insert Table"
            i18n-addColumnBefore="kendo.editor.addColumnBefore|The title of the tool that adds new column before currently selected column."
            addColumnBefore="Add column before"
            i18n-addColumnAfter="kendo.editor.addColumnAfter|The title of the tool that adds new column after currently selected column."
            addColumnAfter="Add column after"
            i18n-addRowBefore="kendo.editor.addRowBefore|The title of the tool that adds new row before currently selected row."
            addRowBefore="Add row before"
            i18n-addRowAfter="kendo.editor.addRowAfter|The title of the tool that adds new row after currently selected row."
            addRowAfter="Add row after"
            i18n-mergeCells="kendo.editor.mergeCells|The title of the tool that merges the currently selected cells."
            mergeCells="Merge cells"
            i18n-splitCell="kendo.editor.splitCell|The title of the tool that splits the currently selected cell."
            splitCell="Split cell"
            i18n-deleteColumn="kendo.editor.deleteColumn|The title of the tool that deletes a table column."
            deleteColumn="Delete column"
            i18n-deleteRow="kendo.editor.deleteRow|The title of the tool that deletes a table row."
            deleteRow="Delete row"
            i18n-deleteTable="kendo.editor.deleteTable|The title of the tool that deletes a table."
            deleteTable="Delete table"
        >
        </ng-container>
        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar [overflow]="true" [tabindex]="readonly ? -1 : 0" *ngIf="!userToolBarElement" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
        </kendo-toolbar>

        <div *ngIf="!iframe" #content [attr.dir]="direction" class="k-editor-content"></div>

        <div class="k-editor-content" *ngIf="iframe">
            <iframe #content srcdoc="<!DOCTYPE html>" frameborder="0" class="k-iframe" (load)="iframeOnLoad()"></iframe>
        </div>

        <ng-container #dialogsContainer></ng-container>
    `,
                    styles: [`
        .k-editor-content > .ProseMirror {
            height: 100%;
            width: 100%;
            box-sizing: border-box;
            outline: none;
            overflow: auto;
        }

        .k-iframe {
            width: 100%;
            height: 100%;
            display: block;
        }


        .k-editor-content .ProseMirror[contenteditable="false"] .k-editor-resize-handles-wrapper,
        .k-editor-content .ProseMirror[contenteditable="false"] .k-editor-resize-handle,
        .k-editor-content .ProseMirror[contenteditable="false"] .row-resize-handle,
        .k-editor-content .ProseMirror[contenteditable="false"] .column-resize-handle {
            display: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] img,
        .k-editor-content .ProseMirror[contenteditable="false"] table {
            pointer-events: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] .ProseMirror-selectednode {
            outline: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] {
            cursor: unset !important;
        }
    `]
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogService }, { type: i1.LocalizationService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: ProviderService }, { type: EditorToolsService }]; }, propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], iframe: [{
                type: Input
            }], applyToWord: [{
                type: Input
            }], schema: [{
                type: Input
            }], plugins: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], preserveWhitespace: [{
                type: Input
            }], pasteCleanupSettings: [{
                type: Input
            }], resizable: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], onFocus: [{
                type: Output,
                args: ['focus']
            }], paste: [{
                type: Output
            }], onBlur: [{
                type: Output,
                args: ['blur']
            }], hostClass: [{
                type: HostBinding,
                args: ['class.k-editor']
            }], resizableClass: [{
                type: HostBinding,
                args: ['class.k-editor-resizable']
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.k-disabled']
            }], isReadonly: [{
                type: HostBinding,
                args: ['class.k-readonly']
            }], isIE: [{
                type: HostBinding,
                args: ['class.k-ie']
            }], dir: [{
                type: HostBinding,
                args: ['attr.dir']
            }], ariaDisabled: [{
                type: HostBinding,
                args: ['attr.ariaDisabled']
            }], minWidth: [{
                type: HostBinding,
                args: ['style.minWidth']
            }], maxWidth: [{
                type: HostBinding,
                args: ['style.maxWidth']
            }], minHeight: [{
                type: HostBinding,
                args: ['style.minHeight']
            }], maxHeight: [{
                type: HostBinding,
                args: ['style.maxHeight']
            }], userToolBarComponent: [{
                type: ContentChild,
                args: [ToolBarComponent]
            }], userToolBarElement: [{
                type: ContentChild,
                args: [ToolBarComponent, { read: ElementRef }]
            }], dialogContainer: [{
                type: ViewChild,
                args: ['dialogsContainer', { read: ViewContainerRef }]
            }], container: [{
                type: ViewChild,
                args: ['content', { read: ViewContainerRef }]
            }], defaultToolbar: [{
                type: ViewChild,
                args: ['defaultToolbar', { read: ElementRef, static: false }]
            }], defaultToolbarComponent: [{
                type: ViewChild,
                args: ['defaultToolbar', { read: ToolBarComponent, static: false }]
            }] } });

/**
 * @hidden
 */
class ColorPickerDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.colorPicker.focus();
        });
    }
    handleActiveColorClick(event) {
        event.preventOpen();
        this.value = event.color;
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec(this.editorCommand, this.value);
        }
        this.dialog.close();
        this.editor.view.focus();
    }
    setData(args) {
        this.editor = args.editor;
        this.value = args.value;
        this.editorCommand = args.editorCommand;
        this.paletteSettings = args.paletteSettings;
        this.icon = args.icon;
        this.views = args.view ? [args.view] : args.views;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
ColorPickerDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ColorPickerDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
ColorPickerDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ColorPickerDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "colorPicker", first: true, predicate: ["colorpicker"], descendants: true, read: ColorPickerComponent, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor(editorCommand) }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-colorpicker
                        #colorpicker
                        [views]="views"
                        [format]="'hex'"
                        [attr.title]="title"
                        [icon]="icon"
                        [(value)]="value"
                        [paletteSettings]="paletteSettings"
                        (activeColorClick)="handleActiveColorClick($event)"
                    >
                    </kendo-colorpicker>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: i5.ColorPickerComponent, selector: "kendo-colorpicker", inputs: ["views", "view", "activeView", "readonly", "disabled", "format", "value", "popupSettings", "paletteSettings", "gradientSettings", "icon", "iconClass", "clearButton", "tabindex", "preview", "actionsLayout", "size", "rounded", "fillMode"], outputs: ["valueChange", "open", "close", "focus", "blur", "cancel", "activeColorClick", "activeViewChange"], exportAs: ["kendoColorPicker"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ColorPickerDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor(editorCommand) }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-colorpicker
                        #colorpicker
                        [views]="views"
                        [format]="'hex'"
                        [attr.title]="title"
                        [icon]="icon"
                        [(value)]="value"
                        [paletteSettings]="paletteSettings"
                        (activeColorClick)="handleActiveColorClick($event)"
                    >
                    </kendo-colorpicker>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], colorPicker: [{
                type: ViewChild,
                args: ['colorpicker', { read: ColorPickerComponent, static: true }]
            }] } });

/**
 * @hidden
 */
class FontFamilyDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(tag) {
        this.valueChange.emit(tag);
    }
    focus() {
        this.dropDownList.focus();
    }
}
FontFamilyDropDownListComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontFamilyDropDownListComponent, deps: [], target: i0.ÉµÉµFactoryTarget.Component });
FontFamilyDropDownListComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FontFamilyDropDownListComponent, selector: "kendo-editor-fontfamily-dropdownlist", inputs: { data: "data", value: "value", defaultItem: "defaultItem", itemDisabled: "itemDisabled", title: "title", disabled: "disabled", tabindex: "tabindex" }, outputs: { valueChange: "valueChange" }, viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, static: true }, { propertyName: "dropDownList", first: true, predicate: ["element"], descendants: true, read: DropDownListComponent, static: true }], ngImport: i0, template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'fontName'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <span [ngStyle]="{ 'font-family': dataItem.fontName }">
                    {{ dataItem.text }}
                </span>
            </ng-template>
        </kendo-dropdownlist>
    `, isInline: true, styles: ["\n        .k-dropdownlist {\n            width: 13em;\n        }\n    "], components: [{ type: i1$2.DropDownListComponent, selector: "kendo-dropdownlist", inputs: ["iconClass", "loading", "data", "value", "textField", "valueField", "popupSettings", "listHeight", "defaultItem", "disabled", "itemDisabled", "readonly", "filterable", "virtual", "ignoreCase", "delay", "valuePrimitive", "tabindex", "tabIndex", "size", "rounded", "fillMode", "id"], outputs: ["valueChange", "filterChange", "selectionChange", "open", "opened", "close", "closed", "focus", "blur"], exportAs: ["kendoDropDownList"] }], directives: [{ type: DropDownToolDirective, selector: "[kendoEditorDropDownTool]" }, { type: i1$2.ItemTemplateDirective, selector: "[kendoDropDownListItemTemplate],[kendoComboBoxItemTemplate],[kendoAutoCompleteItemTemplate],[kendoMultiSelectItemTemplate]" }, { type: i3$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontFamilyDropDownListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-editor-fontfamily-dropdownlist',
                    template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'fontName'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <span [ngStyle]="{ 'font-family': dataItem.fontName }">
                    {{ dataItem.text }}
                </span>
            </ng-template>
        </kendo-dropdownlist>
    `,
                    styles: [`
        .k-dropdownlist {
            width: 13em;
        }
    `]
                }]
        }], propDecorators: { data: [{
                type: Input
            }], value: [{
                type: Input
            }], defaultItem: [{
                type: Input
            }], itemDisabled: [{
                type: Input
            }], title: [{
                type: Input
            }], disabled: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], element: [{
                type: ViewChild,
                args: ['element', { static: true }]
            }], dropDownList: [{
                type: ViewChild,
                args: ['element', { read: DropDownListComponent, static: true }]
            }] } });

/**
 * @hidden
 */
class FontFamilyDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.fontFamilyDropDownList.dropDownList.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('fontFamily', this.value);
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FontFamilyDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontFamilyDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
FontFamilyDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FontFamilyDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "fontFamilyDropDownList", first: true, predicate: ["fontFamilyDropDownList"], descendants: true, read: FontFamilyDropDownListComponent, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('fontFamily') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontfamily-dropdownlist
                        #fontFamilyDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontfamily-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: FontFamilyDropDownListComponent, selector: "kendo-editor-fontfamily-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontFamilyDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('fontFamily') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontfamily-dropdownlist
                        #fontFamilyDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontfamily-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], fontFamilyDropDownList: [{
                type: ViewChild,
                args: ['fontFamilyDropDownList', { read: FontFamilyDropDownListComponent, static: true }]
            }] } });

/**
 * @hidden
 */
class PopupTableGridComponent {
    constructor() {
        this.cellClick = new EventEmitter();
        this.tableWizardClick = new EventEmitter();
        this.state = { rows: -1, cols: -1 };
        this.rows = 6;
        this.cols = 8;
    }
    get message() {
        const { rows, cols } = this.state;
        return `Create a ${rows > -1 ? rows + 1 : ''} ${cols > -1 ? 'x' : ''} ${cols > -1 ? cols + 1 : ''} table`;
    }
    get cells() {
        return Array.from(Array(this.rows * this.cols).keys());
    }
    selected(index) {
        const { rows, cols } = this.state;
        const cellRow = Math.floor(index / this.cols);
        const cellCol = index % this.cols;
        return cellRow <= rows && cellCol <= cols;
    }
    setState(index) {
        const rows = Math.floor(index / this.cols);
        const cols = index % this.cols;
        this.state = { rows: rows, cols: cols };
    }
    resetState() {
        this.state = { rows: -1, cols: -1 };
    }
    insertTable() {
        this.cellClick.emit(this.state);
    }
    openTableWizard() {
        this.tableWizardClick.emit();
    }
}
PopupTableGridComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PopupTableGridComponent, deps: [], target: i0.ÉµÉµFactoryTarget.Component });
PopupTableGridComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PopupTableGridComponent, selector: "kendo-popup-table-grid", outputs: { cellClick: "cellClick", tableWizardClick: "tableWizardClick" }, ngImport: i0, template: `
        <div style="border-color: inherit;" (mouseleave)="resetState()" (click)="insertTable()">
            <span *ngFor="let i of cells"
                class="k-ct-cell"
                [class.k-selected]="selected(i)"
                [class.k-disabled]="!selected(i)"
                (mouseenter)="setState(i)">
            </span>
        </div>
        <div class="k-status" unselectable="on">{{ message }}</div>
        <!-- uncomment when TableWizard is completed
        <div class="k-editor-toolbar" unselectable="on">
            <button type="button" kendoButton class="k-tool" [icon]="'table-wizard'" (click)="openTableWizard()" title="Table Wizard">Table Wizard</button>
        </div>
        -->
    `, isInline: true, directives: [{ type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PopupTableGridComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-popup-table-grid',
                    template: `
        <div style="border-color: inherit;" (mouseleave)="resetState()" (click)="insertTable()">
            <span *ngFor="let i of cells"
                class="k-ct-cell"
                [class.k-selected]="selected(i)"
                [class.k-disabled]="!selected(i)"
                (mouseenter)="setState(i)">
            </span>
        </div>
        <div class="k-status" unselectable="on">{{ message }}</div>
        <!-- uncomment when TableWizard is completed
        <div class="k-editor-toolbar" unselectable="on">
            <button type="button" kendoButton class="k-tool" [icon]="'table-wizard'" (click)="openTableWizard()" title="Table Wizard">Table Wizard</button>
        </div>
        -->
    `
                }]
        }], propDecorators: { cellClick: [{
                type: Output
            }], tableWizardClick: [{
                type: Output
            }] } });

/**
 * @hidden
 */
class InsertTableDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
    }
    onCancelAction() {
        this.dialog.close();
        this.editor.view.focus();
    }
    onCellClick(args) {
        this.dialog.close();
        this.editor.exec("insertTable", args);
        this.editor.view.focus();
    }
    setData(args) {
        this.editor = args.editor;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
InsertTableDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InsertTableDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
InsertTableDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InsertTableDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('insertTable') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-ct-popup k-window-content" style="text-align: center;">
                    <kendo-popup-table-grid (cellClick)="onCellClick($event)"></kendo-popup-table-grid>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: PopupTableGridComponent, selector: "kendo-popup-table-grid", outputs: ["cellClick", "tableWizardClick"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InsertTableDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('insertTable') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-ct-popup k-window-content" style="text-align: center;">
                    <kendo-popup-table-grid (cellClick)="onCellClick($event)"></kendo-popup-table-grid>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }] } });

/**
 * @hidden
 */
class FontSizeDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(size) {
        this.valueChange.emit(size);
    }
    focus() {
        this.dropDownList.focus();
    }
}
FontSizeDropDownListComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontSizeDropDownListComponent, deps: [], target: i0.ÉµÉµFactoryTarget.Component });
FontSizeDropDownListComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FontSizeDropDownListComponent, selector: "kendo-editor-fontsize-dropdownlist", inputs: { data: "data", value: "value", defaultItem: "defaultItem", itemDisabled: "itemDisabled", title: "title", disabled: "disabled", tabindex: "tabindex" }, outputs: { valueChange: "valueChange" }, viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, static: true }, { propertyName: "dropDownList", first: true, predicate: ["element"], descendants: true, read: DropDownListComponent, static: true }], ngImport: i0, template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'size'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
        </kendo-dropdownlist>
    `, isInline: true, styles: ["\n        .k-dropdownlist {\n            width: 13em;\n        }\n    "], components: [{ type: i1$2.DropDownListComponent, selector: "kendo-dropdownlist", inputs: ["iconClass", "loading", "data", "value", "textField", "valueField", "popupSettings", "listHeight", "defaultItem", "disabled", "itemDisabled", "readonly", "filterable", "virtual", "ignoreCase", "delay", "valuePrimitive", "tabindex", "tabIndex", "size", "rounded", "fillMode", "id"], outputs: ["valueChange", "filterChange", "selectionChange", "open", "opened", "close", "closed", "focus", "blur"], exportAs: ["kendoDropDownList"] }], directives: [{ type: DropDownToolDirective, selector: "[kendoEditorDropDownTool]" }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontSizeDropDownListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-editor-fontsize-dropdownlist',
                    template: `
        <kendo-dropdownlist
            #element
            kendoEditorDropDownTool
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'size'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            [disabled]="disabled"
            [tabindex]="tabindex"
            (valueChange)="onValueChange($event)"
        >
        </kendo-dropdownlist>
    `,
                    styles: [`
        .k-dropdownlist {
            width: 13em;
        }
    `]
                }]
        }], propDecorators: { data: [{
                type: Input
            }], value: [{
                type: Input
            }], defaultItem: [{
                type: Input
            }], itemDisabled: [{
                type: Input
            }], title: [{
                type: Input
            }], disabled: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], element: [{
                type: ViewChild,
                args: ['element', { static: true }]
            }], dropDownList: [{
                type: ViewChild,
                args: ['element', { read: DropDownListComponent, static: true }]
            }] } });

/**
 * @hidden
 */
class FontSizeDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    ngAfterViewInit() {
        Promise.resolve(null).then(() => {
            this.fontSizeDropDownList.dropDownList.focus();
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('fontSize', this.value);
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FontSizeDialogComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontSizeDialogComponent, deps: [{ token: i1$1.DialogRef }, { token: EditorLocalizationService }], target: i0.ÉµÉµFactoryTarget.Component });
FontSizeDialogComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FontSizeDialogComponent, selector: "ng-component", inputs: { editor: "editor" }, viewQueries: [{ propertyName: "fontSizeDropDownList", first: true, predicate: ["fontSizeDropDownList"], descendants: true, read: FontSizeDropDownListComponent, static: true }], usesInheritance: true, ngImport: i0, template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('fontSize') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontsize-dropdownlist
                        #fontSizeDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontsize-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `, isInline: true, components: [{ type: i1$1.DialogTitleBarComponent, selector: "kendo-dialog-titlebar", inputs: ["id", "closeTitle"], outputs: ["close"] }, { type: FontSizeDropDownListComponent, selector: "kendo-editor-fontsize-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }, { type: i1$1.DialogActionsComponent, selector: "kendo-dialog-actions", inputs: ["actions", "layout"], outputs: ["action"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FontSizeDialogComponent, decorators: [{
            type: Component,
            args: [{
                    template: `
        <kendo-dialog-titlebar (close)="onCancelAction()">
            {{ textFor('fontSize') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontsize-dropdownlist
                        #fontSizeDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontsize-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogRef }, { type: EditorLocalizationService }]; }, propDecorators: { editor: [{
                type: Input
            }], fontSizeDropDownList: [{
                type: ViewChild,
                args: ['fontSizeDropDownList', { read: FontSizeDropDownListComponent, static: true }]
            }] } });

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the font size of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFontSize></kendo-toolbar-dropdownlist>
 * ```
 *
 * Use the FontSize tool to provide a custom list of font size options including any allowed units ([see example]({% slug toolbartools_editor %}#toc-dropdownlists)).
 */
class EditorFontSizeComponent extends ToolBarToolComponent {
    constructor(dialogService, localization, providerService, toolsService) {
        super();
        this.dialogService = dialogService;
        this.localization = localization;
        this.toolsService = toolsService;
        this.disabled = false;
        this.tabindex = -1;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: '8px', size: '8px' },
            { text: '10px', size: '10px' },
            { text: '12px', size: '12px' },
            { text: '14px', size: '14px' },
            { text: '18px', size: '18px' },
            { text: '24px', size: '24px' },
            { text: '36px', size: '36px' }
        ];
        this.editor = providerService.editor;
    }
    /**
     * Overrides the default font size list.
     * Numeric values are treated as pixels.
     */
    set data(sizes) {
        let normalizedSizes;
        if (sizes) {
            normalizedSizes = sizes.map(s => {
                if (typeof s.size === 'number') {
                    return Object.assign(Object.assign({}, s), { size: `${s.size}px` });
                }
                return s;
            });
        }
        this._data = normalizedSizes || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = itemArgs => {
            if (!this.overflows && this.fontSizeDropDownList && !this.fontSizeDropDownList.dropDownList.isOpen) {
                return true; //disable all items in order to prevent navigation when DDL is closed
            }
            else {
                return itemArgs.dataItem.size === null;
            }
        };
        setTimeout(() => {
            this.defaultItem = { text: this.title, size: null };
            this.toolsService.needsCheck.next();
        });
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            // remove units(px, em, rem...)
            // string#match returns array
            this.value = getUniqueStyleValues(style.selected, 'font-size') || null;
            this.disabled = style.disabled;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('fontSize', ev);
            this.editor.view.focus();
            this.valueChange.emit(this.data.find(d => d.size === ev));
        }
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('fontSize');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FontSizeDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabindex = 0;
        if (this.overflows) {
            this.fontSizeButton.nativeElement.focus();
        }
        else {
            this.fontSizeDropDownList.focus();
        }
    }
    /**
     * @hidden
     */
    handleKey() {
        this.tabindex = -1;
        return false;
    }
}
EditorFontSizeComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFontSizeComponent, deps: [{ token: i1$1.DialogService }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorFontSizeComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorFontSizeComponent, selector: "kendo-toolbar-dropdownlist[kendoEditorFontSize]", inputs: { data: "data" }, outputs: { valueChange: "valueChange" }, providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontSizeComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "element", first: true, predicate: ["element"], descendants: true }, { propertyName: "fontSizeDropDownList", first: true, predicate: ["element"], descendants: true, read: FontSizeDropDownListComponent }, { propertyName: "fontSizeButton", first: true, predicate: ["fontSizeButton"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontsize-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontsize-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #fontSizeButton
                class="k-overflow-button"
                [icon]="'font-size'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `, isInline: true, components: [{ type: FontSizeDropDownListComponent, selector: "kendo-editor-fontsize-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFontSizeComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontSizeComponent) }],
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorFontSize]',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontsize-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontsize-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #fontSizeButton
                class="k-overflow-button"
                [icon]="'font-size'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogService }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; }, propDecorators: { data: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: false }]
            }], fontSizeDropDownList: [{
                type: ViewChild,
                args: ['element', { read: FontSizeDropDownListComponent, static: false }]
            }], fontSizeButton: [{
                type: ViewChild,
                args: ['fontSizeButton', { static: false }]
            }] } });

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-toolbar-dropdownlist` with an Editor command that changes the font family of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFontFamily></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorFontFamilyComponent extends ToolBarToolComponent {
    constructor(dialogService, localization, providerService, toolsService) {
        super();
        this.dialogService = dialogService;
        this.localization = localization;
        this.toolsService = toolsService;
        this.disabled = false;
        this.tabindex = -1;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: 'Arial', fontName: 'Arial,"Helvetica Neue",Helvetica,sans-serif' },
            { text: 'Courier New', fontName: '"Courier New",Courier,"Lucida Sans Typewriter","Lucida Typewriter",monospace' },
            { text: 'Georgia', fontName: 'Georgia,Times,"Times New Roman",serif' },
            {
                fontName: 'Impact,Haettenschweiler,"Franklin Gothic Bold",Charcoal,"Helvetica Inserat","Bitstream Vera Sans Bold","Arial Black","sans serif"',
                text: 'Impact'
            },
            { text: 'Lucida Console', fontName: '"Lucida Console","Lucida Sans Typewriter",monaco,"Bitstream Vera Sans Mono",monospace' },
            { text: 'Tahoma', fontName: 'Tahoma,Verdana,Segoe,sans-serif' },
            { text: 'Times New Roman', fontName: 'TimesNewRoman,"Times New Roman",Times,Baskerville,Georgia,serif' },
            { text: 'Trebuchet MS', fontName: '"Trebuchet MS","Lucida Grande","Lucida Sans Unicode","Lucida Sans",Tahoma,sans-serif' },
            { text: 'Verdana', fontName: 'Verdana,Geneva,sans-serif' }
        ];
        this.editor = providerService.editor;
    }
    /**
     * Overrides the default font list.
     */
    set data(fonts) {
        this._data = fonts || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            if (!this.overflows && this.fontFamilyDropDownList && !this.fontFamilyDropDownList.dropDownList.isOpen) {
                return true; //disable all items in order to prevent navigation when DDL is closed
            }
            else {
                return itemArgs.dataItem.fontName === null;
            }
        };
        setTimeout(() => {
            this.defaultItem = { text: this.title, fontName: null };
            this.toolsService.needsCheck.next();
        });
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            this.value = getUniqueStyleValues(style.selected, 'font-family') || null;
            this.disabled = style.disabled;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('fontFamily', ev);
            this.editor.view.focus();
            this.valueChange.emit(this.data.find(f => f.fontName === ev));
        }
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('fontFamily');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FontFamilyDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabindex = 0;
        if (this.overflows) {
            this.fontFamilyButton.nativeElement.focus();
        }
        else {
            this.fontFamilyDropDownList.focus();
        }
    }
    /**
     * @hidden
     */
    handleKey() {
        this.tabindex = -1;
        return false;
    }
}
EditorFontFamilyComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFontFamilyComponent, deps: [{ token: i1$1.DialogService }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorFontFamilyComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorFontFamilyComponent, selector: "kendo-toolbar-dropdownlist[kendoEditorFontFamily]", inputs: { data: "data" }, outputs: { valueChange: "valueChange" }, providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontFamilyComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "element", first: true, predicate: ["element"], descendants: true }, { propertyName: "fontFamilyDropDownList", first: true, predicate: ["element"], descendants: true, read: FontFamilyDropDownListComponent }, { propertyName: "fontFamilyButton", first: true, predicate: ["fontFamilyButton"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontfamily-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontfamily-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #fontFamilyButton
                class="k-overflow-button"
                [icon]="'font-family'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `, isInline: true, components: [{ type: FontFamilyDropDownListComponent, selector: "kendo-editor-fontfamily-dropdownlist", inputs: ["data", "value", "defaultItem", "itemDisabled", "title", "disabled", "tabindex"], outputs: ["valueChange"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorFontFamilyComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontFamilyComponent) }],
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorFontFamily]',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontfamily-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontfamily-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #fontFamilyButton
                class="k-overflow-button"
                [icon]="'font-family'"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DialogService }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; }, propDecorators: { data: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: false }]
            }], fontFamilyDropDownList: [{
                type: ViewChild,
                args: ['element', { read: FontFamilyDropDownListComponent, static: false }]
            }], fontFamilyButton: [{
                type: ViewChild,
                args: ['fontFamilyButton', { static: false }]
            }] } });

// eslint-disable no-forward-ref
/**
 * A component which configures an existing ColorPickerComponent as a ToolBar tool.
 * To associate a `kendo-toolbar-colorpicker` with an Editor command that changes the
 * foreground or the background color of the text, use the `kendoEditorForeColor` or `kendoEditorBackColor` directive.
 */
class EditorColorPickerComponent extends ToolBarToolComponent {
    constructor(localization, dialogService, ngZone, providerService) {
        super();
        this.localization = localization;
        this.dialogService = dialogService;
        this.ngZone = ngZone;
        this.tabindex = -1;
        /**
         * Specifies if the component should be disabled.
         */
        this.disabled = false;
        /**
         * Specifies whether the ColorPicker will render a gradient, palette, or both in its popup.
         *
         * @default ['palette']
         */
        this.views = ['palette'];
        this.editor = providerService.editor;
    }
    /**
     * @hidden
     *
     * For backward compatibility with configurations using the deprecated "view" input.
     */
    set view(view) {
        this.views = [view];
    }
    get view() {
        return (this.views && this.views.length > 0) ? this.views[0] : null;
    }
    /**
     * @hidden
     */
    get title() {
        return this.localization.get(this.editorCommand);
    }
    ngOnInit() {
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            this.disabled = style.disabled;
        });
        this.activeView = this.view;
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    handleValueChange(color) {
        this.editor.exec(this.editorCommand, color);
        if (this.activeView === 'palette') {
            this.editor.view.focus();
        }
    }
    /**
     * @hidden
     */
    handleActiveColorClick(event) {
        event.preventOpen();
        this.handleValueChange(event.color);
    }
    /**
     * @hidden
     */
    onOpen(picker) {
        this.valueCache = picker.value;
        picker.reset();
    }
    /**
     * @hidden
     */
    onClose(picker) {
        if (!picker.value) {
            picker.value = this.valueCache;
        }
        this.editor.shouldEmitFocus = true;
        this.ngZone.onStable.pipe(take(1)).subscribe(() => this.editor.view.focus());
        this.activeView = this.view;
    }
    /**
     * @hidden
     */
    onActiveViewChange(view) {
        this.activeView = view;
    }
    /**
     * @hidden
     */
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: ColorPickerDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            value: this.value,
            title: this.title,
            editorCommand: this.editorCommand,
            paletteSettings: this.paletteSettings,
            icon: this.icon,
            views: this.views
        });
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabindex = 0;
        if (this.overflows) {
            this.colorPickerButton.nativeElement.focus();
        }
        else {
            this.colorPicker.focus();
        }
    }
    /**
     * @hidden
     */
    handleKey() {
        this.tabindex = -1;
        return false;
    }
}
EditorColorPickerComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorColorPickerComponent, deps: [{ token: EditorLocalizationService }, { token: i1$1.DialogService }, { token: i0.NgZone }, { token: ProviderService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorColorPickerComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorColorPickerComponent, selector: "kendo-toolbar-colorpicker", inputs: { value: "value", icon: "icon", paletteSettings: "paletteSettings", editorCommand: "editorCommand", disabled: "disabled", views: "views", view: "view" }, providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorColorPickerComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "element", first: true, predicate: ["colorpicker"], descendants: true, read: ElementRef }, { propertyName: "colorPicker", first: true, predicate: ["colorpicker"], descendants: true, read: ColorPickerComponent }, { propertyName: "colorPickerButton", first: true, predicate: ["colorPickerButton"], descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-colorpicker
                #colorpicker
                [attr.title]="title"
                [icon]="icon"
                [views]="views"
                [format]="'hex'"
                [value]="value"
                [paletteSettings]="paletteSettings"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="handleValueChange($event)"
                (activeColorClick)="handleActiveColorClick($event)"
                (open)="onOpen(colorpicker)"
                (close)="onClose(colorpicker)"
                (activeViewChange)="onActiveViewChange($event)"
            >
            </kendo-colorpicker>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #colorPickerButton
                class="k-overflow-button"
                [icon]="icon"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `, isInline: true, components: [{ type: i5.ColorPickerComponent, selector: "kendo-colorpicker", inputs: ["views", "view", "activeView", "readonly", "disabled", "format", "value", "popupSettings", "paletteSettings", "gradientSettings", "icon", "iconClass", "clearButton", "tabindex", "preview", "actionsLayout", "size", "rounded", "fillMode"], outputs: ["valueChange", "open", "close", "focus", "blur", "cancel", "activeColorClick", "activeViewChange"], exportAs: ["kendoColorPicker"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorColorPickerComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorColorPickerComponent) }],
                    selector: 'kendo-toolbar-colorpicker',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-colorpicker
                #colorpicker
                [attr.title]="title"
                [icon]="icon"
                [views]="views"
                [format]="'hex'"
                [value]="value"
                [paletteSettings]="paletteSettings"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="handleValueChange($event)"
                (activeColorClick)="handleActiveColorClick($event)"
                (open)="onOpen(colorpicker)"
                (close)="onClose(colorpicker)"
                (activeViewChange)="onActiveViewChange($event)"
            >
            </kendo-colorpicker>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #colorPickerButton
                class="k-overflow-button"
                [icon]="icon"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: EditorLocalizationService }, { type: i1$1.DialogService }, { type: i0.NgZone }, { type: ProviderService }]; }, propDecorators: { value: [{
                type: Input
            }], icon: [{
                type: Input
            }], paletteSettings: [{
                type: Input
            }], editorCommand: [{
                type: Input
            }], disabled: [{
                type: Input
            }], views: [{
                type: Input
            }], view: [{
                type: Input
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], element: [{
                type: ViewChild,
                args: ['colorpicker', { read: ElementRef, static: false }]
            }], colorPicker: [{
                type: ViewChild,
                args: ['colorpicker', { read: ColorPickerComponent, static: false }]
            }], colorPickerButton: [{
                type: ViewChild,
                args: ['colorPickerButton', { read: ElementRef, static: false }]
            }] } });

const popupWrapperWidth = '190px';
const popupWrapperHeight = '164px'; // Set to '192px' when TableWizard button is added;
/**
 * A toolbar component which allows the user to create and insert a table in the Editor's content.
 *
 * @example
 * ```ts-no-run
 * <kendo-editor-insert-table-button></kendo-editor-insert-table-button>
 * ```
 */
class EditorInsertTableButtonComponent extends ToolBarToolComponent {
    constructor(localization, popupService, dialogService, providerService) {
        super();
        this.localization = localization;
        this.popupService = popupService;
        this.dialogService = dialogService;
        this.open = false;
        this.buttonBlurred = new EventEmitter();
        this.cellClicked = new EventEmitter();
        this.editor = providerService.editor;
        this.subs = this.editor.stateChange.subscribe(({ insertTable }) => {
            this.disabled = insertTable.disabled;
        });
        this.subs.add(this.buttonBlurred.pipe(concatMap(() => interval(200).pipe(take(1), takeUntil(this.cellClicked)))).subscribe(() => {
            this.toggle(false);
        }));
    }
    ngOnDestroy() {
        this.destroyPopup();
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('insertTable');
    }
    /**
     * @hidden
     */
    toggle(open) {
        this.open = open === undefined ? !this.open : open;
        this.destroyPopup();
        if (this.open) {
            this.createPopup();
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: InsertTableDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor
        });
    }
    /**
     * @hidden
     */
    onBlur() {
        this.tabIndex = -1;
        this.buttonBlurred.emit();
    }
    /**
     * @hidden
     */
    onCellClick(args) {
        this.cellClicked.emit();
        this.toggle(false);
        this.editor.exec('insertTable', args);
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabIndex = 0;
        this.getButton().focus();
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        if (ev.keyCode === Keys.Space || ev.keyCode === Keys.Enter) {
            return true;
        }
        this.tabIndex = -1;
        return false;
    }
    /**
     * @hidden
     */
    onTableWizardClick() {
        // this.toggle(false);
        // this.editor.openDialog("tableWizard");
    }
    createPopup() {
        const horizontalAlign = this.editor.direction === 'rtl' ? 'right' : 'left';
        const anchorPosition = { horizontal: horizontalAlign, vertical: 'bottom' };
        const popupPosition = { horizontal: horizontalAlign, vertical: 'top' };
        this.popupRef = this.popupService.open({
            anchor: this.element,
            anchorAlign: anchorPosition,
            animate: true,
            content: this.popupGridTemplate,
            popupAlign: popupPosition,
            popupClass: 'k-ct-popup k-group k-reset k-state-border-up',
            positionMode: 'absolute'
        });
        const popupWrapper = this.popupRef.popupElement;
        popupWrapper.style.width = popupWrapperWidth;
        popupWrapper.style.height = popupWrapperHeight;
        popupWrapper.setAttribute('dir', this.editor.direction);
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    getButton() {
        return (this.overflows ? this.overflowElement : this.element).nativeElement;
    }
}
EditorInsertTableButtonComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertTableButtonComponent, deps: [{ token: EditorLocalizationService }, { token: i2.PopupService }, { token: i1$1.DialogService }, { token: ProviderService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorInsertTableButtonComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertTableButtonComponent, selector: "kendo-editor-insert-table-button", providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorInsertTableButtonComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true }, { propertyName: "element", first: true, predicate: ["element"], descendants: true }, { propertyName: "overflowElement", first: true, predicate: ["overflowElement"], descendants: true }, { propertyName: "popupGridTemplate", first: true, predicate: ["popupGridTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <button
                type="button"
                kendoButton
                #element
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="toggle()"
                (blur)="onBlur()"
            ></button>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                kendoButton
                #overflowElement
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="openDialog()">
                {{ title }}
            </button>
        </ng-template>
        <ng-template #popupGridTemplate>
            <kendo-popup-table-grid (cellClick)="onCellClick($event)" (tableWizardClick)="onTableWizardClick()"></kendo-popup-table-grid>
        </ng-template>
    `, isInline: true, components: [{ type: PopupTableGridComponent, selector: "kendo-popup-table-grid", outputs: ["cellClick", "tableWizardClick"] }], directives: [{ type: i4.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertTableButtonComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorInsertTableButtonComponent) }],
                    selector: 'kendo-editor-insert-table-button',
                    template: `
        <ng-template #toolbarTemplate>
            <button
                type="button"
                kendoButton
                #element
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="toggle()"
                (blur)="onBlur()"
            ></button>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                kendoButton
                #overflowElement
                [attr.title]="title"
                [attr.tabindex]="tabIndex"
                [icon]="'table-add'"
                [disabled]="disabled"
                (click)="openDialog()">
                {{ title }}
            </button>
        </ng-template>
        <ng-template #popupGridTemplate>
            <kendo-popup-table-grid (cellClick)="onCellClick($event)" (tableWizardClick)="onTableWizardClick()"></kendo-popup-table-grid>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: EditorLocalizationService }, { type: i2.PopupService }, { type: i1$1.DialogService }, { type: ProviderService }]; }, propDecorators: { toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: false }]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: false }]
            }], overflowElement: [{
                type: ViewChild,
                args: ['overflowElement', { static: false }]
            }], popupGridTemplate: [{
                type: ViewChild,
                args: ['popupGridTemplate', { static: true }]
            }] } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Blockquote tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBlockquoteButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBlockquoteButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorBlockquoteDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('blockquote', button, localization, providerService, toolsService);
    }
}
EditorBlockquoteDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBlockquoteDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorBlockquoteDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorBlockquoteDirective, selector: "kendo-toolbar-button[kendoEditorBlockquoteButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBlockquoteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorBlockquoteButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Redo tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorRedoButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorRedoButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorRedoButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('redo', button, localization, providerService, toolsService);
    }
}
EditorRedoButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorRedoButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorRedoButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorRedoButtonDirective, selector: "kendo-toolbar-button[kendoEditorRedoButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorRedoButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorRedoButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Undo tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUndoButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUndoButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorUndoButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('undo', button, localization, providerService, toolsService);
    }
}
EditorUndoButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUndoButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorUndoButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorUndoButtonDirective, selector: "kendo-toolbar-button[kendoEditorUndoButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorUndoButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorUndoButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor ViewSource tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorViewSourceButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorViewSourceButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorViewSourceButtonDirective extends EditorCommandDialog {
    constructor(button, localization, providerService, toolsService) {
        super('viewSource', button, localization, providerService, toolsService);
    }
}
EditorViewSourceButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorViewSourceButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorViewSourceButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorViewSourceButtonDirective, selector: "kendo-toolbar-button[kendoEditorViewSourceButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorViewSourceButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorViewSourceButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Strikethrough tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorStrikethroughButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorStrikethroughButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorStrikethroughButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('strikethrough', button, localization, providerService, toolsService);
    }
}
EditorStrikethroughButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorStrikethroughButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorStrikethroughButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorStrikethroughButtonDirective, selector: "kendo-toolbar-button[kendoEditorStrikethroughButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorStrikethroughButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorStrikethroughButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Subscript tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSubscriptButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSubscriptButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorSubscriptButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('subscript', button, localization, providerService, toolsService);
    }
}
EditorSubscriptButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSubscriptButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorSubscriptButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorSubscriptButtonDirective, selector: "kendo-toolbar-button[kendoEditorSubscriptButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSubscriptButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorSubscriptButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Superscript tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSuperscriptButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSuperscriptButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorSuperscriptButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('superscript', button, localization, providerService, toolsService);
    }
}
EditorSuperscriptButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSuperscriptButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorSuperscriptButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorSuperscriptButtonDirective, selector: "kendo-toolbar-button[kendoEditorSuperscriptButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSuperscriptButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorSuperscriptButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor 'Insert File' tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertFileButton></kendo-toolbar-button>
 * ```
 */
class EditorInsertFileButtonDirective extends EditorCommandDialog {
    constructor(button, localization, providerService, toolsService) {
        super('insertFile', button, localization, providerService, toolsService);
    }
}
EditorInsertFileButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertFileButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorInsertFileButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorInsertFileButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertFileButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorInsertFileButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorInsertFileButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an `EditorColorPickerComponent`
 * for manipulating the foreground color of the text
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 */
class EditorForeColorDirective {
    constructor(colorPicker) {
        this.colorPicker = colorPicker;
        this.colorPicker.icon = commandIcons.foreColor;
        this.colorPicker.editorCommand = 'foreColor';
    }
}
EditorForeColorDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorForeColorDirective, deps: [{ token: EditorColorPickerComponent }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorForeColorDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorForeColorDirective, selector: "[kendoEditorForeColor]", ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorForeColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoEditorForeColor]'
                }]
        }], ctorParameters: function () { return [{ type: EditorColorPickerComponent }]; } });

/**
 * A directive which configures an `EditorColorPickerComponent`
 * for manipulating the background color of the text
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 */
class EditorBackColorDirective {
    constructor(colorPicker) {
        this.colorPicker = colorPicker;
        this.colorPicker.icon = commandIcons.backColor;
        this.colorPicker.editorCommand = 'backColor';
    }
}
EditorBackColorDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBackColorDirective, deps: [{ token: EditorColorPickerComponent }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorBackColorDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorBackColorDirective, selector: "[kendoEditorBackColor]", ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorBackColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoEditorBackColor]'
                }]
        }], ctorParameters: function () { return [{ type: EditorColorPickerComponent }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Clean Formatting tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCleanFormattingButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCleanFormattingButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorCleanFormattingButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('cleanFormatting', button, localization, providerService, toolsService);
    }
}
EditorCleanFormattingButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCleanFormattingButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorCleanFormattingButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorCleanFormattingButtonDirective, selector: "kendo-toolbar-button[kendoEditorCleanFormattingButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorCleanFormattingButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorCleanFormattingButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddColumnBefore tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddColumnBeforeButton></kendo-toolbar-button>
 * ```
 */
class EditorAddColumnBeforeButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('addColumnBefore', button, localization, providerService, toolsService);
    }
}
EditorAddColumnBeforeButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddColumnBeforeButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAddColumnBeforeButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAddColumnBeforeButtonDirective, selector: "kendo-toolbar-button[kendoEditorAddColumnBeforeButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddColumnBeforeButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAddColumnBeforeButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddColumnAfter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddColumnAfterButton></kendo-toolbar-button>
 * ```
 */
class EditorAddColumnAfterButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('addColumnAfter', button, localization, providerService, toolsService);
    }
}
EditorAddColumnAfterButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddColumnAfterButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAddColumnAfterButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAddColumnAfterButtonDirective, selector: "kendo-toolbar-button[kendoEditorAddColumnAfterButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddColumnAfterButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAddColumnAfterButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddRowBefore tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddRowBeforeButton></kendo-toolbar-button>
 * ```
 */
class EditorAddRowBeforeButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('addRowBefore', button, localization, providerService, toolsService);
    }
}
EditorAddRowBeforeButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddRowBeforeButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAddRowBeforeButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAddRowBeforeButtonDirective, selector: "kendo-toolbar-button[kendoEditorAddRowBeforeButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddRowBeforeButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAddRowBeforeButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddRowAfter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddRowAfterButton></kendo-toolbar-button>
 * ```
 */
class EditorAddRowAfterButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('addRowAfter', button, localization, providerService, toolsService);
    }
}
EditorAddRowAfterButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddRowAfterButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorAddRowAfterButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorAddRowAfterButtonDirective, selector: "kendo-toolbar-button[kendoEditorAddRowAfterButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorAddRowAfterButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorAddRowAfterButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteColumn tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteColumnButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteColumnButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('deleteColumn', button, localization, providerService, toolsService);
    }
}
EditorDeleteColumnButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteColumnButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorDeleteColumnButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorDeleteColumnButtonDirective, selector: "kendo-toolbar-button[kendoEditorDeleteColumnButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteColumnButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorDeleteColumnButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteRow tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteRowButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteRowButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('deleteRow', button, localization, providerService, toolsService);
    }
}
EditorDeleteRowButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteRowButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorDeleteRowButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorDeleteRowButtonDirective, selector: "kendo-toolbar-button[kendoEditorDeleteRowButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteRowButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorDeleteRowButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteTable tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteTableButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteTableButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('deleteTable', button, localization, providerService, toolsService);
    }
}
EditorDeleteTableButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteTableButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorDeleteTableButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorDeleteTableButtonDirective, selector: "kendo-toolbar-button[kendoEditorDeleteTableButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorDeleteTableButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorDeleteTableButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * @hidden
 *
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor MergeCells tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorMergeCellsButton></kendo-toolbar-button>
 * ```
 */
class EditorMergeCellsButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('mergeCells', button, localization, providerService, toolsService);
    }
}
EditorMergeCellsButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorMergeCellsButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorMergeCellsButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorMergeCellsButtonDirective, selector: "kendo-toolbar-button[kendoEditorMergeCellsButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorMergeCellsButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorMergeCellsButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * @hidden
 *
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor SplitCell tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSplitCellButton></kendo-toolbar-button>
 * ```
 */
class EditorSplitCellButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('splitCell', button, localization, providerService, toolsService);
    }
}
EditorSplitCellButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSplitCellButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorSplitCellButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorSplitCellButtonDirective, selector: "kendo-toolbar-button[kendoEditorSplitCellButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSplitCellButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorSplitCellButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * Custom component messages override default component messages
 * ([see example]({% slug globalization_editor %}#toc-localization)).
 */
class CustomMessagesComponent extends MessagesDirective {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
}
CustomMessagesComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMessagesComponent, deps: [{ token: i1.LocalizationService }], target: i0.ÉµÉµFactoryTarget.Directive });
CustomMessagesComponent.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomMessagesComponent, selector: "kendo-editor-messages", providers: [
        {
            provide: MessagesDirective,
            useExisting: forwardRef(() => CustomMessagesComponent)
        }
    ], usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMessagesComponent, decorators: [{
            type: Directive,
            args: [{
                    providers: [
                        {
                            provide: MessagesDirective,
                            useExisting: forwardRef(() => CustomMessagesComponent)
                        }
                    ],
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'kendo-editor-messages'
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Print tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * > The Editor Print tool is supported in the default [`iframe`](https://www.telerik.com/kendo-angular-ui-develop/components/editor/api/EditorComponent/#toc-iframe) mode only.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorPrintButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorPrintButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorPrintDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('print', button, localization, providerService, toolsService);
    }
    ngAfterViewInit() {
        if (isDevMode) {
            if (!this.editor.iframe) {
                throw new Error(EditorErrorMessages.printTool);
            }
        }
    }
    clickHandler() {
        if (this.editor.iframe) {
            const view = this.editor.view;
            const dom = view && view.dom;
            const doc = dom && dom.ownerDocument;
            const editorWindow = doc && doc.defaultView;
            if (editorWindow) {
                editorWindow.print();
            }
        }
    }
}
EditorPrintDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorPrintDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorPrintDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorPrintDirective, selector: "kendo-toolbar-button[kendoEditorPrintButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorPrintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorPrintButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor SelectAll tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSelectAllButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSelectAllButton icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorSelectAllButtonDirective extends EditorCommandButton {
    constructor(button, localization, providerService, toolsService) {
        super('selectAll', button, localization, providerService, toolsService);
    }
    clickHandler() {
        this.editor.shouldEmitFocus = true;
        super.clickHandler();
    }
}
EditorSelectAllButtonDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSelectAllButtonDirective, deps: [{ token: i1$3.ToolBarButtonComponent }, { token: EditorLocalizationService }, { token: ProviderService }, { token: EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Directive });
EditorSelectAllButtonDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditorSelectAllButtonDirective, selector: "kendo-toolbar-button[kendoEditorSelectAllButton]", usesInheritance: true, ngImport: i0 });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorSelectAllButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'kendo-toolbar-button[kendoEditorSelectAllButton]'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ToolBarButtonComponent }, { type: EditorLocalizationService }, { type: ProviderService }, { type: EditorToolsService }]; } });

const COMPONENT_DIRECTIVES = [
    //alignment
    EditorAlignLeftButtonDirective,
    EditorAlignCenterButtonDirective,
    EditorAlignRightButtonDirective,
    EditorAlignJustifyButtonDirective,
    //file
    EditorInsertFileButtonDirective,
    //history
    EditorRedoButtonDirective,
    EditorUndoButtonDirective,
    //image
    EditorInsertImageButtonDirective,
    //indent
    EditorIndentButtonDirective,
    EditorOutdentButtonDirective,
    //link
    EditorCreateLinkButtonDirective,
    EditorUnlinkButtonDirective,
    //list
    EditorInsertOrderedListButtonDirective,
    EditorInsertUnorderedListButtonDirective,
    //source
    EditorViewSourceButtonDirective,
    //typographical emphasis
    EditorBoldButtonDirective,
    EditorItalicButtonDirective,
    EditorUnderlineButtonDirective,
    EditorStrikethroughButtonDirective,
    EditorSubscriptButtonDirective,
    EditorSuperscriptButtonDirective,
    //color
    EditorForeColorDirective,
    EditorBackColorDirective,
    //clear format
    EditorCleanFormattingButtonDirective,
    //table
    EditorAddColumnBeforeButtonDirective,
    EditorAddColumnAfterButtonDirective,
    EditorAddRowBeforeButtonDirective,
    EditorAddRowAfterButtonDirective,
    EditorDeleteColumnButtonDirective,
    EditorDeleteRowButtonDirective,
    EditorDeleteTableButtonDirective,
    EditorMergeCellsButtonDirective,
    EditorSplitCellButtonDirective,
    // EditorTableWizardButtonDirective,
    //localization
    CustomMessagesComponent,
    LocalizedMessagesDirective,
    // dropdown tools
    DropDownToolDirective,
    // print
    EditorPrintDirective,
    // select all
    EditorSelectAllButtonDirective,
    // blockquote
    EditorBlockquoteDirective
];
const TOOLBAR_TOOLS = [
    EditorFontSizeComponent,
    EditorFontFamilyComponent,
    EditorFormatComponent,
    EditorColorPickerComponent,
    EditorInsertTableButtonComponent
];
const TOOLBAR_DIALOGS = [
    FileLinkDialogComponent,
    ImageDialogComponent,
    SourceDialogComponent,
    FormatDialogComponent,
    ColorPickerDialogComponent,
    FontFamilyDialogComponent,
    FontSizeDialogComponent,
    InsertTableDialogComponent
    // TableWizardDialogComponent
    // Table Wizard Building Blocks
    // TableSettingsComponent,
    // CellSettingsComponent,
    // AccessibilitySettingsComponent
];
const INTERNAL_COMPONENTS = [
    PopupTableGridComponent,
    FormatDropDownListComponent,
    FontFamilyDropDownListComponent,
    FontSizeDropDownListComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the Editor component.
 *
 * The package exports:
 * - `EditorComponent`&mdash;The `EditorComponent` class.
 * - `EditorButtonDirective`&mdash;The `EditorButton` directive class.
 * - `EditorDropDownDirective`&mdash;The `EditorDropDown` directive class.
 * - `EditorDialogDirective`&mdash;The `EditorDialog` directive class.
 * - `ToolBarDropDownListComponent`&mdash;The `ToolBarDropDownListComponent` directive class.
 * - `ButtonModule`&mdash;The `KendoButton` module.
 * - `ToolBarModule`&mdash;The `KendoToolBar` module.
 *
 *  * @example
 *
 * ```ts-no-run
 * // Import the Editor module
 * import { EditorModule } from '@progress/kendo-angular-editor';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, EditorModule], // import the Editor module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
class EditorModule {
}
EditorModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });
EditorModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorModule, declarations: [EditorComponent, 
        //alignment
        EditorAlignLeftButtonDirective,
        EditorAlignCenterButtonDirective,
        EditorAlignRightButtonDirective,
        EditorAlignJustifyButtonDirective,
        //file
        EditorInsertFileButtonDirective,
        //history
        EditorRedoButtonDirective,
        EditorUndoButtonDirective,
        //image
        EditorInsertImageButtonDirective,
        //indent
        EditorIndentButtonDirective,
        EditorOutdentButtonDirective,
        //link
        EditorCreateLinkButtonDirective,
        EditorUnlinkButtonDirective,
        //list
        EditorInsertOrderedListButtonDirective,
        EditorInsertUnorderedListButtonDirective,
        //source
        EditorViewSourceButtonDirective,
        //typographical emphasis
        EditorBoldButtonDirective,
        EditorItalicButtonDirective,
        EditorUnderlineButtonDirective,
        EditorStrikethroughButtonDirective,
        EditorSubscriptButtonDirective,
        EditorSuperscriptButtonDirective,
        //color
        EditorForeColorDirective,
        EditorBackColorDirective,
        //clear format
        EditorCleanFormattingButtonDirective,
        //table
        EditorAddColumnBeforeButtonDirective,
        EditorAddColumnAfterButtonDirective,
        EditorAddRowBeforeButtonDirective,
        EditorAddRowAfterButtonDirective,
        EditorDeleteColumnButtonDirective,
        EditorDeleteRowButtonDirective,
        EditorDeleteTableButtonDirective,
        EditorMergeCellsButtonDirective,
        EditorSplitCellButtonDirective,
        // EditorTableWizardButtonDirective,
        //localization
        CustomMessagesComponent,
        LocalizedMessagesDirective,
        // dropdown tools
        DropDownToolDirective,
        // print
        EditorPrintDirective,
        // select all
        EditorSelectAllButtonDirective,
        // blockquote
        EditorBlockquoteDirective, EditorFontSizeComponent,
        EditorFontFamilyComponent,
        EditorFormatComponent,
        EditorColorPickerComponent,
        EditorInsertTableButtonComponent, FileLinkDialogComponent,
        ImageDialogComponent,
        SourceDialogComponent,
        FormatDialogComponent,
        ColorPickerDialogComponent,
        FontFamilyDialogComponent,
        FontSizeDialogComponent,
        InsertTableDialogComponent
        // TableWizardDialogComponent
        // Table Wizard Building Blocks
        // TableSettingsComponent,
        // CellSettingsComponent,
        // AccessibilitySettingsComponent
        , PopupTableGridComponent,
        FormatDropDownListComponent,
        FontFamilyDropDownListComponent,
        FontSizeDropDownListComponent], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        //Kendo UI Angular Modules
        ButtonModule,
        ColorPickerModule,
        DialogModule,
        DropDownsModule,
        NumericTextBoxModule,
        CheckBoxModule,
        ToolBarModule,
        TextBoxModule], exports: [EditorComponent, 
        //alignment
        EditorAlignLeftButtonDirective,
        EditorAlignCenterButtonDirective,
        EditorAlignRightButtonDirective,
        EditorAlignJustifyButtonDirective,
        //file
        EditorInsertFileButtonDirective,
        //history
        EditorRedoButtonDirective,
        EditorUndoButtonDirective,
        //image
        EditorInsertImageButtonDirective,
        //indent
        EditorIndentButtonDirective,
        EditorOutdentButtonDirective,
        //link
        EditorCreateLinkButtonDirective,
        EditorUnlinkButtonDirective,
        //list
        EditorInsertOrderedListButtonDirective,
        EditorInsertUnorderedListButtonDirective,
        //source
        EditorViewSourceButtonDirective,
        //typographical emphasis
        EditorBoldButtonDirective,
        EditorItalicButtonDirective,
        EditorUnderlineButtonDirective,
        EditorStrikethroughButtonDirective,
        EditorSubscriptButtonDirective,
        EditorSuperscriptButtonDirective,
        //color
        EditorForeColorDirective,
        EditorBackColorDirective,
        //clear format
        EditorCleanFormattingButtonDirective,
        //table
        EditorAddColumnBeforeButtonDirective,
        EditorAddColumnAfterButtonDirective,
        EditorAddRowBeforeButtonDirective,
        EditorAddRowAfterButtonDirective,
        EditorDeleteColumnButtonDirective,
        EditorDeleteRowButtonDirective,
        EditorDeleteTableButtonDirective,
        EditorMergeCellsButtonDirective,
        EditorSplitCellButtonDirective,
        // EditorTableWizardButtonDirective,
        //localization
        CustomMessagesComponent,
        LocalizedMessagesDirective,
        // dropdown tools
        DropDownToolDirective,
        // print
        EditorPrintDirective,
        // select all
        EditorSelectAllButtonDirective,
        // blockquote
        EditorBlockquoteDirective, EditorFontSizeComponent,
        EditorFontFamilyComponent,
        EditorFormatComponent,
        EditorColorPickerComponent,
        EditorInsertTableButtonComponent, ToolBarModule,
        ButtonModule,
        FormsModule,
        ReactiveFormsModule, PopupTableGridComponent,
        FormatDropDownListComponent,
        FontFamilyDropDownListComponent,
        FontSizeDropDownListComponent] });
EditorModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorModule, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            //Kendo UI Angular Modules
            ButtonModule,
            ColorPickerModule,
            DialogModule,
            DropDownsModule,
            NumericTextBoxModule,
            CheckBoxModule,
            ToolBarModule,
            TextBoxModule
        ], ToolBarModule,
        ButtonModule,
        FormsModule,
        ReactiveFormsModule] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        EditorComponent,
                        COMPONENT_DIRECTIVES,
                        TOOLBAR_TOOLS,
                        TOOLBAR_DIALOGS,
                        INTERNAL_COMPONENTS
                    ],
                    entryComponents: [
                        TOOLBAR_DIALOGS
                    ],
                    exports: [
                        EditorComponent,
                        COMPONENT_DIRECTIVES,
                        TOOLBAR_TOOLS,
                        ToolBarModule,
                        ButtonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        //needed for unit tests
                        INTERNAL_COMPONENTS
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        //Kendo UI Angular Modules
                        ButtonModule,
                        ColorPickerModule,
                        DialogModule,
                        DropDownsModule,
                        NumericTextBoxModule,
                        CheckBoxModule,
                        ToolBarModule,
                        TextBoxModule
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CustomMessagesComponent, DropDownToolDirective, EditorAddColumnAfterButtonDirective, EditorAddColumnBeforeButtonDirective, EditorAddRowAfterButtonDirective, EditorAddRowBeforeButtonDirective, EditorAlignCenterButtonDirective, EditorAlignJustifyButtonDirective, EditorAlignLeftButtonDirective, EditorAlignRightButtonDirective, EditorBackColorDirective, EditorBlockquoteDirective, EditorBoldButtonDirective, EditorCleanFormattingButtonDirective, EditorColorPickerComponent, EditorComponent, EditorCreateLinkButtonDirective, EditorDeleteColumnButtonDirective, EditorDeleteRowButtonDirective, EditorDeleteTableButtonDirective, EditorFontFamilyComponent, EditorFontSizeComponent, EditorForeColorDirective, EditorFormatComponent, EditorIndentButtonDirective, EditorInsertFileButtonDirective, EditorInsertImageButtonDirective, EditorInsertOrderedListButtonDirective, EditorInsertTableButtonComponent, EditorInsertUnorderedListButtonDirective, EditorItalicButtonDirective, EditorMergeCellsButtonDirective, EditorModule, EditorOutdentButtonDirective, EditorPasteEvent, EditorPrintDirective, EditorRedoButtonDirective, EditorSelectAllButtonDirective, EditorSplitCellButtonDirective, EditorStrikethroughButtonDirective, EditorSubscriptButtonDirective, EditorSuperscriptButtonDirective, EditorUnderlineButtonDirective, EditorUndoButtonDirective, EditorUnlinkButtonDirective, EditorViewSourceButtonDirective, FontFamilyDropDownListComponent, FontSizeDropDownListComponent, FormatDropDownListComponent, LocalizedMessagesDirective, PopupTableGridComponent, PreventableEvent, getSelectionText, schema };

