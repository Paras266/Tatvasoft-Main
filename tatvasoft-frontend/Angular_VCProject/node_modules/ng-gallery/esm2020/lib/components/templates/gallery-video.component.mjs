import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryVideoComponent {
    constructor() {
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    set pauseVideo(shouldPause) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPause && !video.paused) {
                video.pause();
            }
        }
    }
    set playVideo(shouldPlay) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPlay) {
                video.play();
            }
        }
    }
    ngOnInit() {
        if (this.src instanceof Array) {
            // If video has multiple sources
            this.videoSources = [...this.src];
        }
        else {
            this.videoSources = [{ url: this.src }];
        }
    }
}
GalleryVideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryVideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GalleryVideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: GalleryVideoComponent, selector: "gallery-video", inputs: { src: "src", poster: "poster", mute: "mute", loop: "loop", controls: "controls", controlsList: "controlsList", disableRemotePlayback: "disableRemotePlayback", disablePictureInPicture: "disablePictureInPicture", pauseVideo: ["pause", "pauseVideo"], playVideo: ["play", "playVideo"] }, outputs: { error: "error" }, viewQueries: [{ propertyName: "video", first: true, predicate: ["video"], descendants: true, static: true }], ngImport: i0, template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <source *ngFor="let src of videoSources" [src]="src?.url" [type]="src?.type"/>
    </video>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryVideoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-video',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <source *ngFor="let src of videoSources" [src]="src?.url" [type]="src?.type"/>
    </video>
  `
                }]
        }], propDecorators: { src: [{
                type: Input
            }], poster: [{
                type: Input
            }], mute: [{
                type: Input
            }], loop: [{
                type: Input
            }], controls: [{
                type: Input
            }], controlsList: [{
                type: Input
            }], disableRemotePlayback: [{
                type: Input
            }], disablePictureInPicture: [{
                type: Input
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], playVideo: [{
                type: Input,
                args: ['play']
            }], error: [{
                type: Output
            }], video: [{
                type: ViewChild,
                args: ['video', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS12aWRlby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS12aWRlby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQW1CL0gsTUFBTSxPQUFPLHFCQUFxQjtJQWpCbEM7UUFnREUsNkNBQTZDO1FBQ25DLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBYyxDQUFDO0tBWWxEO0lBL0JDLElBQW9CLFVBQVUsQ0FBQyxXQUFvQjtRQUNqRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQzVCLE1BQU0sS0FBSyxHQUFxQixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUN6RCxJQUFJLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNmO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsSUFBbUIsU0FBUyxDQUFDLFVBQW1CO1FBQzlDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDNUIsTUFBTSxLQUFLLEdBQXFCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ3pELElBQUksVUFBVSxFQUFFO2dCQUNkLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNkO1NBQ0Y7SUFDSCxDQUFDO0lBT0QsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLEdBQUcsWUFBWSxLQUFLLEVBQUU7WUFDN0IsZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQzs7a0hBM0NVLHFCQUFxQjtzR0FBckIscUJBQXFCLHFlQWR0Qjs7Ozs7Ozs7Ozs7O0dBWVQ7MkZBRVUscUJBQXFCO2tCQWpCakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0dBWVQ7aUJBQ0Y7OEJBS1UsR0FBRztzQkFBWCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxxQkFBcUI7c0JBQTdCLEtBQUs7Z0JBQ0csdUJBQXVCO3NCQUEvQixLQUFLO2dCQUVjLFVBQVU7c0JBQTdCLEtBQUs7dUJBQUMsT0FBTztnQkFTSyxTQUFTO3NCQUEzQixLQUFLO3VCQUFDLE1BQU07Z0JBVUgsS0FBSztzQkFBZCxNQUFNO2dCQUUrQixLQUFLO3NCQUExQyxTQUFTO3VCQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktdmlkZW8nLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8dmlkZW8gI3ZpZGVvXHJcbiAgICAgICAgICAgW2F0dHIubXV0ZV09XCJtdXRlXCJcclxuICAgICAgICAgICBbYXR0ci5jb250cm9sc0xpc3RdPVwiY29udHJvbHNMaXN0XCJcclxuICAgICAgICAgICBbYXR0ci5kaXNhYmxlUGljdHVyZUluUGljdHVyZV09XCJkaXNhYmxlUGljdHVyZUluUGljdHVyZVwiXHJcbiAgICAgICAgICAgW2Rpc2FibGVSZW1vdGVQbGF5YmFja109XCJkaXNhYmxlUmVtb3RlUGxheWJhY2tcIlxyXG4gICAgICAgICAgIFtjb250cm9sc109XCJjb250cm9sc1wiXHJcbiAgICAgICAgICAgW2xvb3BdPVwibG9vcFwiXHJcbiAgICAgICAgICAgW3Bvc3Rlcl09XCJwb3N0ZXJcIlxyXG4gICAgICAgICAgIChlcnJvcik9XCJlcnJvci5lbWl0KCRldmVudClcIj5cclxuICAgICAgPHNvdXJjZSAqbmdGb3I9XCJsZXQgc3JjIG9mIHZpZGVvU291cmNlc1wiIFtzcmNdPVwic3JjPy51cmxcIiBbdHlwZV09XCJzcmM/LnR5cGVcIi8+XHJcbiAgICA8L3ZpZGVvPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlWaWRlb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIHZpZGVvU291cmNlczogeyB1cmw6IHN0cmluZywgdHlwZT86IHN0cmluZyB9W107XHJcblxyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nIHwgeyB1cmw6IHN0cmluZywgdHlwZT86IHN0cmluZyB9W107XHJcbiAgQElucHV0KCkgcG9zdGVyOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbXV0ZTogYm9vbGVhbjtcclxuICBASW5wdXQoKSBsb29wOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGNvbnRyb2xzOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGNvbnRyb2xzTGlzdDogJ25vZG93bmxvYWQnIHwgJ25vZnVsbHNjcmVlbicgfCAnbm9yZW1vdGVwbGF5YmFjayc7XHJcbiAgQElucHV0KCkgZGlzYWJsZVJlbW90ZVBsYXliYWNrOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoJ3BhdXNlJykgc2V0IHBhdXNlVmlkZW8oc2hvdWxkUGF1c2U6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgIGlmIChzaG91bGRQYXVzZSAmJiAhdmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgICAgdmlkZW8ucGF1c2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQElucHV0KCdwbGF5Jykgc2V0IHBsYXlWaWRlbyhzaG91bGRQbGF5OiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy52aWRlby5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50O1xyXG4gICAgICBpZiAoc2hvdWxkUGxheSkge1xyXG4gICAgICAgIHZpZGVvLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzICovXHJcbiAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxFcnJvckV2ZW50PigpO1xyXG5cclxuICBAVmlld0NoaWxkKCd2aWRlbycsIHsgc3RhdGljOiB0cnVlIH0pIHZpZGVvOiBFbGVtZW50UmVmO1xyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnNyYyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIC8vIElmIHZpZGVvIGhhcyBtdWx0aXBsZSBzb3VyY2VzXHJcbiAgICAgIHRoaXMudmlkZW9Tb3VyY2VzID0gWy4uLnRoaXMuc3JjXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudmlkZW9Tb3VyY2VzID0gW3sgdXJsOiB0aGlzLnNyYyB9XTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19