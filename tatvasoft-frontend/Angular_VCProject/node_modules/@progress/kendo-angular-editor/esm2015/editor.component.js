/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, ViewChild, ContentChild, ViewContainerRef, Output, ElementRef, EventEmitter, forwardRef, Input, isDevMode } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, fromEvent, Subject, zip } from 'rxjs';
import { map, filter, take } from 'rxjs/operators';
import { ToolBarComponent } from '@progress/kendo-angular-toolbar';
import { hasObservers, isDocumentAvailable, KendoInput } from '@progress/kendo-angular-common';
import { buildKeymap, buildListKeymap, getHtml, pasteCleanup, sanitize, removeComments, sanitizeClassAttr, sanitizeStyleAttr, removeAttribute, placeholder, EditorView, EditorState, baseKeymap, keymap, history, parseContent, Plugin, PluginKey, TextSelection, Schema, AllSelection, gapCursor, getSelectionText, imageResizing, tableEditing, caretColor, tableResizing } from '@progress/kendo-editor-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
import { schema } from './config/schema';
import { editorCommands } from './config/commands';
import { getToolbarState, initialToolBarState, disabledToolBarState } from './editor-toolbar-state';
import { detectIE, removeEmptyEntries, conditionallyExecute, pipe, isPresent } from './util';
import { SourceDialogComponent } from './dialogs/source-dialog.component';
import { ImageDialogComponent } from './dialogs/image-dialog.component';
import { FileLinkDialogComponent } from './dialogs/file-link-dialog.component';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { EditorLocalizationService } from './localization/editor-localization.service';
import { defaultStyle, tablesStyles, rtlStyles } from './common/styles';
import { EditorErrorMessages } from './common/error-messages';
import { ProviderService } from './common/provider.service';
import { EditorToolsService } from './tools/tools.service';
import { EditorPasteEvent } from './preventable-events/paste-event';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-dialog";
import * as i2 from "@progress/kendo-angular-l10n";
import * as i3 from "./common/provider.service";
import * as i4 from "./tools/tools.service";
import * as i5 from "@progress/kendo-angular-toolbar";
import * as i6 from "./tools/format/editor-format.component";
import * as i7 from "./localization/localized-messages.directive";
import * as i8 from "@angular/common";
import * as i9 from "./tools/typographical-emphasis/editor-bold-button.directive";
import * as i10 from "./tools/typographical-emphasis/editor-italic-button.directive";
import * as i11 from "./tools/typographical-emphasis/editor-underline-button.directive";
import * as i12 from "./tools/alignment/editor-align-left-button.directive";
import * as i13 from "./tools/alignment/editor-align-center-button.directive";
import * as i14 from "./tools/alignment/editor-align-right-button.directive";
import * as i15 from "./tools/alignment/editor-align-justify-button.directive";
import * as i16 from "./tools/list/editor-insert-unordered-list-button.directive";
import * as i17 from "./tools/list/editor-insert-ordered-list-button.directive";
import * as i18 from "./tools/indentation/editor-indent-button.directive";
import * as i19 from "./tools/indentation/editor-outdent-button.directive";
import * as i20 from "./tools/link/editor-create-link-button.directive";
import * as i21 from "./tools/link/editor-unlink-button.directive";
import * as i22 from "./tools/image/editor-insert-image-button.directive";
const EMPTY_PARAGRAPH = '<p></p>';
const defaultPasteCleanupSettings = {
    convertMsLists: false,
    removeAttributes: [],
    removeHtmlComments: false,
    removeInvalidHTML: true,
    removeMsClasses: false,
    removeMsStyles: false,
    stripTags: []
};
const removeCommentsIf = conditionallyExecute(removeComments);
const removeInvalidHTMLIf = conditionallyExecute(sanitize);
const getPasteCleanupAttributes = (config) => {
    if (config.removeAttributes === 'all') {
        return { '*': removeAttribute };
    }
    const initial = removeEmptyEntries({
        style: config.removeMsStyles ? sanitizeStyleAttr : undefined,
        class: config.removeMsClasses ? sanitizeClassAttr : undefined
    });
    return config.removeAttributes.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: removeAttribute })), initial);
};
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
export class EditorComponent {
    constructor(dialogService, localization, cdr, ngZone, element, providerService, toolsService) {
        this.dialogService = dialogService;
        this.localization = localization;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.element = element;
        this.providerService = providerService;
        this.toolsService = toolsService;
        /**
         * If set to `false`, the Editor will run in style non-encapsulated mode. This means
         * that the styles of the page will be persisted in the Editor and its content will be affected by them.
         * @default true
         */
        this.iframe = true;
        /**
         * If set to `true` or `ApplyToWordOptions` object, commands that apply emphasis or inline styles will be applied to the whole word the cursor is in.
         * @default false
         */
        this.applyToWord = false;
        /**
         * By default, whitespace is collapsed as per HTML's rules.
         * Set to `true` to preserve whitespace, but normalize newlines to spaces.
         * Set to `'full'` to preserve whitespace entirely. In this case the default ProseMirror behavior is to parse white space into nodes.
         *
         * @default false
         */
        this.preserveWhitespace = false;
        /**
         * Determines whether the Editor can be resized ([see example]({% slug styling_editor %}#toc-resizable-editor)).
         * @default false
         */
        this.resizable = false;
        /**
         * Fires each time the value of the Editor is changed upon user interaction&mdash;
         * for example, when the value is updated through typing in the content area or using some of the Editor tools ([see example]({% slug overview_editor %}#toc-events)).
         * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
         * the `valueChange` event is not triggered because it might cause a mix-up with the
         * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires when the content area of the Editor is focused ([see example]({% slug overview_editor %}#toc-events)).
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires when the user performs paste in the content area of the Editor ([see example]({% slug overview_editor %}#toc-events)).
         * The event is preventable. If you cancel it, the Editor content will not change.
         */
        this.paste = new EventEmitter();
        /**
         * Fires when the content area of the Editor is blurred ([see example]({% slug overview_editor %}#toc-events)).
         */
        this.onBlur = new EventEmitter();
        this.hostClass = true;
        /**
         * @hidden
         */
        this.stateChange = new BehaviorSubject(initialToolBarState);
        /**
         * @hidden
         */
        this.valueModified = new Subject();
        this._readonly = false;
        this._placeholder = '';
        this.inForm = false;
        this.afterViewInit = new Subject();
        this.contentAreaLoaded = new Subject();
        this.dispatchTransaction = (tr) => {
            const docChanged = tr.docChanged;
            if (this.disabled || (this.readonly && docChanged)) {
                return;
            }
            if (docChanged) {
                const doc = tr.doc;
                const html = getHtml({ doc });
                this.trOnChange = tr;
                this.htmlOnChange = html;
                this.ngZone.run(() => {
                    this.valueModified.next(html);
                });
            }
            if (!docChanged || this.inForm) {
                this.view.updateState(this.view.state.apply(tr));
            }
        };
        this.transformPastedHTML = (dirtyHtml, plainText) => {
            if (plainText) {
                return this.dispatchPasteEvent(dirtyHtml, dirtyHtml);
            }
            const pasteCleanupSettings = Object.assign(Object.assign({}, defaultPasteCleanupSettings), this.pasteCleanupSettings);
            const html = pipe(removeInvalidHTMLIf(pasteCleanupSettings.removeInvalidHTML), removeCommentsIf(pasteCleanupSettings.removeHtmlComments))(dirtyHtml);
            const clean = pasteCleanup(html, {
                convertMsLists: pasteCleanupSettings.convertMsLists,
                stripTags: pasteCleanupSettings.stripTags.join('|'),
                attributes: getPasteCleanupAttributes(pasteCleanupSettings)
            });
            return this.dispatchPasteEvent(dirtyHtml, clean);
        };
        this.changeValue = (value) => {
            const prev = this._value;
            this._value = value;
            if (!this._view) {
                return;
            }
            if (this.htmlOnChange === value && this.trOnChange) {
                this.view.updateState(this.view.state.apply(this.trOnChange));
            }
            else {
                if ((prev || '') !== (value || '')) {
                    const iframeContentWindowNotPresent = this.iframe && !this.container.element.nativeElement.contentWindow;
                    if (iframeContentWindowNotPresent) {
                        return;
                    }
                    const state = this.view.state;
                    const nextDoc = parseContent(value || '', state.schema, { preserveWhitespace: this.preserveWhitespace });
                    const tr = state.tr
                        .setSelection(new AllSelection(state.doc))
                        .replaceSelectionWith(nextDoc);
                    this.view.updateState(state.apply(tr));
                }
            }
            this.trOnChange = null;
            this.htmlOnChange = null;
        };
        this.onChangeCallback = (value) => {
            this.changeValue(value);
        };
        this.onTouchedCallback = (_) => { };
        this.onPaste = (_view, nativeEvent) => {
            this._pasteEvent = nativeEvent;
            return false;
        };
        validatePackage(packageMetadata);
        this.providerService.editor = this;
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        // https://stackoverflow.com/questions/56572483/chrome-is-synchronously-handling-iframe-loading-whereas-firefox-handles-it-asyn
        this.subs = zip(this.afterViewInit.asObservable(), this.contentAreaLoaded.asObservable()).subscribe(() => this.initialize());
    }
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    set value(value) {
        this.changeValue(value);
    }
    get value() {
        if (this.trOnChange) {
            return this.htmlOnChange;
        }
        let value = this._view ? this.getSource() : this._value;
        if (value === EMPTY_PARAGRAPH) {
            return this._value ? '' : this._value;
        }
        else {
            return value;
        }
    }
    /**
     * Sets the disabled state of the component.
     */
    set disabled(value) {
        this._disabled = value || false;
        if (this._view) {
            this._view.updateState(this._view.state);
        }
        if (this._disabled) {
            this.readonly = false;
        }
        if (this._disabled || this._readonly) {
            this.stateChange.next(disabledToolBarState);
        }
        else {
            this.stateChange.next(initialToolBarState);
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Sets the read-only state of the component.
     */
    set readonly(value) {
        this._readonly = value || false;
        if (this._view) {
            // remove DOM selection
            let win;
            if (this.iframe) {
                win = this.container.element.nativeElement.contentWindow;
            }
            else {
                win = window;
            }
            const focusedNode = win.getSelection().focusNode;
            if (this._view.dom.contains(focusedNode)) {
                win.getSelection().removeAllRanges();
            }
            // remove ProseMirror selection
            const doc = this._view.state.doc;
            const tr = this._view.state.tr.setSelection(TextSelection.create(doc, 1));
            this._view.dispatch(tr);
        }
        if (this._readonly) {
            if (this.toolbar) {
                this.toolbar.tabindex = -1;
            }
            this.stateChange.next(disabledToolBarState);
        }
        else {
            if (this.toolbar) {
                this.toolbar.tabindex = 0;
            }
            this.stateChange.next(initialToolBarState);
        }
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * Allows providing a custom schema. ([see example]({% slug schema_editor %}))
     */
    set schema(value) {
        if (isDevMode) {
            if (!(value instanceof Schema)) {
                throw new Error(EditorErrorMessages.schemaType);
            }
            if (this._view) {
                throw new Error(EditorErrorMessages.setSchemaOnce);
            }
        }
        this._schema = value;
    }
    get schema() {
        return this._schema;
    }
    /**
     * Defines a function which determines the plugins that will be used when initializing the Editor.
     * It exposes the default plugins collection as an argument, and returns
     * the plugins collection that will be used when creating the Editor component. ([see example]({% slug plugins_editor %}))
     *
     * ```ts-no-run
     *  pluginsCallback(defaultPlugins: Plugin[]): Plugin[] {
     *    const myPlugin = new Plugin({/custom plugin code/});
     *    return [...defaultPlugins, myPlugin];
     *  }
     * ```
     */
    set plugins(fn) {
        if (isDevMode) {
            if (typeof fn !== 'function') {
                throw new Error(EditorErrorMessages.pluginsCallbackType(fn));
            }
            if (this._view) {
                throw new Error(EditorErrorMessages.setPluginsOnce);
            }
        }
        this._plugins = fn;
    }
    get plugins() {
        return this._plugins;
    }
    /**
     * The hint, which is displayed when the component is empty.
     */
    set placeholder(value) {
        if (isDevMode && this._view) {
            throw new Error(EditorErrorMessages.setPlaceHolderOnce);
        }
        this._placeholder = value;
    }
    get placeholder() {
        return this._placeholder;
    }
    get resizableClass() {
        return !!this.resizable;
    }
    get isDisabled() {
        return this.disabled;
    }
    get isReadonly() {
        return this.readonly;
    }
    get isIE() {
        return this.iframe && detectIE();
    }
    get dir() {
        return this.direction;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get minWidth() {
        const resizableOptions = this.resizable;
        return resizableOptions.minWidth ? resizableOptions.minWidth + 'px' : undefined;
    }
    get maxWidth() {
        const resizableOptions = this.resizable;
        return resizableOptions.maxWidth ? resizableOptions.maxWidth + 'px' : undefined;
    }
    get minHeight() {
        const resizableOptions = this.resizable;
        return resizableOptions.minHeight ? resizableOptions.minHeight + 'px' : undefined;
    }
    get maxHeight() {
        const resizableOptions = this.resizable;
        return resizableOptions.maxHeight ? resizableOptions.maxHeight + 'px' : undefined;
    }
    get toolbar() {
        return this.defaultToolbarComponent || this.userToolBarComponent;
    }
    get toolbarElement() {
        return this.defaultToolbar || this.userToolBarElement;
    }
    /**
     * Returns the ProseMirror [EditorView](https://prosemirror.net/docs/ref/#view.EditorView) object
     * that manages the DOM structure that represents an editable document.
     */
    get view() {
        return this._view;
    }
    /**
     * Returns the text which the current Editor selection contains ([see example]({% slug selection_editor %}#toc-retrieve-the-selected-text)).
     */
    get selectionText() {
        return this._view && this._view.state ? getSelectionText(this._view.state) : '';
    }
    ngOnInit() {
        this.subs.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
        this.subs.add(this.toolsService.needsCheck.subscribe(() => this.cdr.markForCheck()));
    }
    ngAfterViewInit() {
        this.afterViewInit.next();
        if (!this.iframe) {
            this.contentAreaLoaded.next();
        }
        if (this.resizable) {
            this.normalizeSize();
        }
    }
    ngOnChanges(changes) {
        if (changes.value && this.view) {
            this.changeValue(changes.value.currentValue);
        }
        if (changes.iframe && !changes.iframe.isFirstChange()) {
            this.ngZone.onStable.pipe(take(1)).subscribe(() => this.initialize());
        }
        if (changes.resizable && !changes.resizable.isFirstChange()) {
            this.normalizeSize();
        }
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    iframeOnLoad() {
        this.contentAreaLoaded.next();
    }
    /**
     * Executes a command on the currently selected text
     * ([more information and example]({% slug toolbartools_editor %}#toc-custom-tools)).
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list,
     * the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p` and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     * - `insertTable` - Accepts an object with the `rows` and `cols` properties. The number values are zero based.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Inserts a file.
     * editor.exec('insertFile', { href: 'www.progress.com/resources/myfile.doc', title: 'My file', target: 'window' });
     *
     * // Inserts a image.
     * editor.exec('insertImage', { src: 'www.progress.com/resources/logo.jpg', title: 'Progress', target: 'window' });
     *
     * // Inserts a text at a given position. If no position is specified, the text will be inserted after the cursor.
     * editor.exec('insertText', { text: 'Hello World!', from: 0, to: 0 });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the font size of the selected text.
     * editor.exec('fontSize', 24);
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     *
     * // Creates and inserts a table with the specified number of rows and columns. Numbers are zero based.
     * this.editor.exec("insertTable", { rows: 3, cols: 5 });
     * ```
     */
    exec(commandName, attr) {
        // normalizes setHTML attributes
        if (commandName === 'setHTML' && typeof attr === 'string') {
            attr = {
                content: attr,
                parseOptions: {
                    preserveWhitespace: this.preserveWhitespace
                }
            };
        }
        else if (['fontFamily', 'fontSize', 'foreColor', 'backColor', 'createLink'].some(name => name === commandName)) {
            attr = {
                value: attr,
                applyToWord: this.applyToWord
            };
        }
        // Finds a command and applies the attributes.
        const command = editorCommands[commandName](attr);
        // Executes a ProseMirror command.
        command(this._view.state, this._view.dispatch, this._view);
    }
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     * * `insertFile`
     * * `insertImage`
     * * `tableWizard`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.openDialog('viewSource');
     * ```
     */
    openDialog(dialogName) {
        const editorDialogs = {
            createLink: {
                content: FileLinkDialogComponent
            },
            insertFile: {
                content: FileLinkDialogComponent
            },
            insertImage: {
                content: ImageDialogComponent
            },
            viewSource: {
                content: SourceDialogComponent,
                height: 400,
                width: 500
            }
            // tableWizard: {
            //     content: TableWizardDialogComponent
            // }
        };
        const dialog = Object.assign({ appendTo: this.dialogContainer }, editorDialogs[dialogName]);
        this.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialog).content.instance;
        if (dialogName === 'createLink' || dialogName === 'insertFile') {
            dialogContent.command = dialogName;
        }
        dialogContent.editor = this;
        dialogContent.setData(this._view.state, { applyToWord: this.applyToWord });
    }
    /**
     * Manually focus the Editor.
     */
    focus() {
        this.focusChangedProgrammatically = true;
        this._view.focus();
        this.focusChangedProgrammatically = false;
    }
    /**
     * Manually blur the Editor.
     */
    blur() {
        this.focusChangedProgrammatically = true;
        this._view.dom.blur();
        this.focusChangedProgrammatically = false;
    }
    /**
     * @hidden
     */
    getSource() {
        return getHtml(this._view.state);
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
        if (this._styleObserver) {
            this._styleObserver.disconnect();
        }
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.inForm = true;
        // To avoid confusion, non-existent values are always undefined.
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        return false;
    }
    initialize() {
        if (!isDocumentAvailable()) {
            return;
        }
        const currentSchema = this.schema || schema;
        const containerNativeElement = this.container.element.nativeElement;
        const contentNode = parseContent((this.value || '').trim(), currentSchema, { preserveWhitespace: this.preserveWhitespace });
        if (this.iframe) {
            const iframeDoc = containerNativeElement.contentDocument;
            const meta = iframeDoc.createElement('meta');
            meta.setAttribute('charset', 'utf-8');
            iframeDoc.head.appendChild(meta);
            [defaultStyle, tablesStyles, this.dir === 'rtl' ? rtlStyles : undefined].forEach(styles => {
                if (styles) {
                    const style = iframeDoc.createElement('style');
                    style.appendChild(iframeDoc.createTextNode(styles));
                    iframeDoc.head.appendChild(style);
                }
            });
            const element = iframeDoc.createElement('div');
            element.classList.add('k-content');
            iframeDoc.body.appendChild(element);
        }
        else {
            const element = document.createElement('div');
            containerNativeElement.appendChild(element);
        }
        const defaultPlugins = [
            new Plugin({
                key: new PluginKey('editor-tabindex'),
                props: {
                    attributes: () => ({
                        // set tabindex when contenteditable is false, so that the content area can be selected
                        tabIndex: this.readonly ? '0' : ''
                    })
                }
            }),
            new Plugin({
                key: new PluginKey('toolbar-tools-update'),
                view: () => ({
                    update: editorView => {
                        if (!this.disabled) {
                            this.stateChange.next(this.readonly ? disabledToolBarState : getToolbarState(editorView.state, { applyToWord: this.applyToWord }));
                        }
                    }
                })
            }),
            history(),
            keymap(buildListKeymap(currentSchema)),
            keymap(buildKeymap(currentSchema, { applyToWord: this.applyToWord })),
            keymap(baseKeymap),
            gapCursor(),
            imageResizing(),
            ...tableResizing(),
            tableEditing(),
            caretColor()
        ];
        if (this.placeholder) {
            defaultPlugins.push(placeholder(this.placeholder));
        }
        const state = EditorState.create({
            schema: currentSchema,
            doc: contentNode,
            plugins: isPresent(this.plugins) ? this.plugins(defaultPlugins) : defaultPlugins
        });
        if (this.iframe) {
            this.viewMountElement = containerNativeElement.contentDocument.querySelector('div');
        }
        else {
            this.viewMountElement = containerNativeElement.querySelector('div');
        }
        this.ngZone.runOutsideAngular(() => {
            this._view = new EditorView({ mount: this.viewMountElement }, {
                state,
                editable: () => !this.readonly,
                dispatchTransaction: this.dispatchTransaction,
                transformPastedHTML: this.transformPastedHTML,
                transformPastedText: this.transformPastedHTML,
                handleDOMEvents: {
                    paste: this.onPaste
                }
            });
        });
        if (this._view) {
            let containerElement;
            const contentAreaClasslist = this.element.nativeElement.querySelector('.k-editor-content').classList;
            if (this.iframe) {
                containerElement = this.container.element.nativeElement.contentDocument;
            }
            else {
                containerElement = this.container.element.nativeElement;
            }
            this.subs.add(fromEvent(containerElement, 'focusin')
                .subscribe((e) => {
                if (this.readonly) {
                    contentAreaClasslist.add('k-focus');
                }
                if (!this.focusChangedProgrammatically || this.shouldEmitFocus) {
                    const relatedTarget = e.relatedTarget;
                    const isActiveColorButton = relatedTarget && relatedTarget.classList.contains('k-colorpicker');
                    if (!isActiveColorButton || this.shouldEmitFocus) {
                        this.ngZone.run(() => this.onFocus.emit());
                    }
                    this.shouldEmitFocus = false;
                }
            }));
            this.subs.add(fromEvent(containerElement, 'focusout')
                .subscribe((e) => {
                if (this.readonly) {
                    contentAreaClasslist.remove('k-focus');
                }
                if (!this.focusChangedProgrammatically) {
                    const relatedTarget = e.relatedTarget;
                    const isActiveColorButton = relatedTarget && relatedTarget.classList.contains('k-colorpicker');
                    if (!isActiveColorButton) {
                        this.ngZone.run(() => this.onBlur.emit());
                    }
                }
            }));
        }
        this.subs.add(this.stateChange.subscribe(() => {
            if (this.userToolBarComponent) {
                this.userToolBarComponent.cdr.detectChanges();
            }
            else {
                this.cdr.detectChanges();
            }
        }));
        this.subs.add(this.valueModified.subscribe((value) => {
            this.onChangeCallback(value);
            this.valueChange.emit(value);
            this.cdr.markForCheck();
        }));
        this.subs.add(fromEvent(this.viewMountElement, 'keyup')
            .pipe(map((e) => e.keyCode), filter((code) => code === 121), // F10
        map(() => this.toolbarElement))
            .subscribe((toolbar) => toolbar.nativeElement.focus()));
        this.subs.add(fromEvent(this.viewMountElement, 'blur')
            .pipe(filter((event) => !this.viewMountElement.contains(event.relatedTarget)))
            .subscribe(() => this.onTouchedCallback()));
    }
    normalizeSize() {
        if (typeof this.resizable === 'object' && !this._styleObserver) {
            const element = this.element.nativeElement;
            this._styleObserver = new MutationObserver(() => {
                this.ngZone.runOutsideAngular(() => this.normalizeProperties(element));
            });
            this._styleObserver.observe(element, { attributeFilter: ['style'] });
        }
    }
    normalizeProperties(element) {
        const props = Object.keys(this.resizable);
        const pixelWidth = parseInt(element.style.width, 10);
        const pixelHeight = parseInt(element.style.height, 10);
        const resizable = this.resizable;
        props.forEach(prop => {
            const isMinProp = prop.startsWith('min');
            const isMaxProp = !isMinProp;
            const isWidthProp = prop.endsWith('Width');
            const isHeightProp = !isWidthProp;
            if (isMinProp && isWidthProp) {
                if (pixelWidth < resizable.minWidth) {
                    element.style.width = resizable.minWidth + 'px';
                }
            }
            else if (isMinProp && isHeightProp) {
                if (pixelHeight < resizable.minHeight) {
                    element.style.height = resizable.minHeight + 'px';
                }
            }
            else if (isMaxProp && isWidthProp) {
                if (pixelWidth > resizable.maxWidth) {
                    element.style.width = resizable.maxWidth + 'px';
                }
            }
            else {
                if (pixelHeight > resizable.maxHeight) {
                    element.style.height = resizable.maxHeight + 'px';
                }
            }
        });
    }
    dispatchPasteEvent(originalContent, cleanContent) {
        if (hasObservers(this.paste)) {
            const event = new EditorPasteEvent(cleanContent, originalContent, this._pasteEvent);
            this.ngZone.run(() => this.paste.emit(event));
            return event.isDefaultPrevented() ? '' : event.cleanedHtml;
        }
        return cleanContent;
    }
    ;
}
EditorComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorComponent, deps: [{ token: i1.DialogService }, { token: i2.LocalizationService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: i3.ProviderService }, { token: i4.EditorToolsService }], target: i0.ÉµÉµFactoryTarget.Component });
EditorComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorComponent, selector: "kendo-editor", inputs: { value: "value", disabled: "disabled", readonly: "readonly", iframe: "iframe", applyToWord: "applyToWord", schema: "schema", plugins: "plugins", placeholder: "placeholder", preserveWhitespace: "preserveWhitespace", pasteCleanupSettings: "pasteCleanupSettings", resizable: "resizable" }, outputs: { valueChange: "valueChange", onFocus: "focus", paste: "paste", onBlur: "blur" }, host: { properties: { "class.k-editor": "this.hostClass", "class.k-editor-resizable": "this.resizableClass", "class.k-disabled": "this.isDisabled", "class.k-readonly": "this.isReadonly", "class.k-ie": "this.isIE", "attr.dir": "this.dir", "attr.ariaDisabled": "this.ariaDisabled", "style.minWidth": "this.minWidth", "style.maxWidth": "this.maxWidth", "style.minHeight": "this.minHeight", "style.maxHeight": "this.maxHeight" } }, providers: [
        EditorLocalizationService,
        ProviderService,
        EditorToolsService,
        {
            provide: LocalizationService,
            useExisting: EditorLocalizationService
        },
        {
            provide: L10N_PREFIX,
            useValue: 'kendo.editor'
        },
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => EditorComponent),
            multi: true
        },
        {
            provide: KendoInput,
            useExisting: forwardRef(() => EditorComponent)
        }
    ], queries: [{ propertyName: "userToolBarComponent", first: true, predicate: ToolBarComponent, descendants: true }, { propertyName: "userToolBarElement", first: true, predicate: ToolBarComponent, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "dialogContainer", first: true, predicate: ["dialogsContainer"], descendants: true, read: ViewContainerRef }, { propertyName: "container", first: true, predicate: ["content"], descendants: true, read: ViewContainerRef }, { propertyName: "defaultToolbar", first: true, predicate: ["defaultToolbar"], descendants: true, read: ElementRef }, { propertyName: "defaultToolbarComponent", first: true, predicate: ["defaultToolbar"], descendants: true, read: ToolBarComponent }], usesOnChanges: true, ngImport: i0, template: `
        <ng-container
            kendoEditorLocalizedMessages
            i18n-alignCenter="kendo.editor.alignCenter|The title of the tool that aligns text in the center."
            alignCenter="Center text"
            i18n-alignJustify="kendo.editor.alignJustify|The title of the tool that justifies text both left and right."
            alignJustify="Justify"
            i18n-alignLeft="kendo.editor.alignLeft|The title of the tool that aligns text on the left."
            alignLeft="Align text left"
            i18n-alignRight="kendo.editor.alignRight|The title of the tool that aligns text on the right."
            alignRight="Align text right"
            i18n-backColor="kendo.editor.backColor|The title of the tool that changes the text background color."
            backColor="Background color"
            i18n-blockquote="kendo.editor.blockquote|The title of the tool that wraps an element in a blockquote"
            blockquote="Quotation"
            i18n-bold="kendo.editor.bold|The title of the tool that makes text bold."
            bold="Bold"
            i18n-cleanFormatting="kendo.editor.cleanFormatting|The title of the Clean Formatting tool."
            cleanFormatting="Clean formatting"
            i18n-createLink="kendo.editor.createLink|The title of the tool that creates hyperlinks."
            createLink="Insert link"
            i18n-dialogApply="kendo.editor.dialogApply|The label of the **Apply** button in all editor dialogs."
            dialogApply="Apply"
            i18n-dialogCancel="kendo.editor.dialogCancel|The label of the **Cancel** button in all editor dialogs."
            dialogCancel="Cancel"
            i18n-dialogInsert="kendo.editor.dialogInsert|The label of the **Insert** button in all editor dialogs."
            dialogInsert="Insert"
            i18n-dialogUpdate="kendo.editor.dialogUpdate|The label of the **Update** button in all editor dialogs."
            dialogUpdate="Update"
            i18n-fileText="kendo.editor.fileText|The caption for the file text in the insertFile dialog."
            fileText="Text"
            i18n-fileTitle="kendo.editor.fileTitle|The caption for the file Title in the insertFile dialog."
            fileTitle="Title"
            i18n-fileWebAddress="kendo.editor.fileWebAddress|The caption for the file URL in the insertFile dialog."
            fileWebAddress="Web address"
            i18n-fontFamily="kendo.editor.fontFamily|The title of the tool that changes the text font."
            fontFamily="Select font family"
            i18n-fontSize="kendo.editor.fontSize|The title of the tool that changes the text size."
            fontSize="Select font size"
            i18n-foreColor="kendo.editor.foreColor|The title of the tool that changes the text color."
            foreColor="Color"
            i18n-format="kendo.editor.format|The title of the tool that lets users choose block formats."
            format="Format"
            i18n-imageAltText="kendo.editor.imageAltText|The caption for the image alternate text in the insertImage dialog."
            imageAltText="Alternate text"
            i18n-imageHeight="kendo.editor.imageHeight|The caption for the image height in the insertImage dialog."
            imageHeight="Height (px)"
            i18n-imageWebAddress="kendo.editor.imageWebAddress|The caption for the image URL in the insertImage dialog."
            imageWebAddress="Web address"
            i18n-imageWidth="kendo.editor.imageWidth|The caption for the image width in the insertImage dialog."
            imageWidth="Width (px)"
            i18n-indent="kendo.editor.indent|The title of the tool that indents the content."
            indent="Indent"
            i18n-insertFile="kendo.editor.insertFile|The title of the tool that inserts links to files."
            insertFile="Insert file"
            i18n-insertImage="kendo.editor.insertImage|The title of the tool that inserts images."
            insertImage="Insert image"
            i18n-insertOrderedList="kendo.editor.insertOrderedList|The title of the tool that inserts an ordered list."
            insertOrderedList="Insert ordered list"
            i18n-insertUnorderedList="kendo.editor.insertUnorderedList|The title of the tool that inserts an unordered list."
            insertUnorderedList="Insert unordered list"
            i18n-italic="kendo.editor.italic|The title of the tool that makes text italicized."
            italic="Italic"
            i18n-linkOpenInNewWindow="kendo.editor.linkOpenInNewWindow|The caption for the checkbox for opening the link in a new window in the createLink dialog."
            linkOpenInNewWindow="Open link in new window"
            i18n-linkText="kendo.editor.linkText|The caption for the link text in the createLink dialog."
            linkText="Text"
            i18n-linkTitle="kendo.editor.linkTitle|The caption for the link title in the createLink dialog."
            linkTitle="Title"
            i18n-linkWebAddress="kendo.editor.linkWebAddress|The caption for the URL in the createLink dialog."
            linkWebAddress="Web address"
            i18n-outdent="kendo.editor.outdent|The title of the tool that outdents the content."
            outdent="Outdent"
            i18n-print="kendo.editor.print|The title of the print tool."
            print="Print"
            i18n-redo="kendo.editor.redo|The title of the tool that undos the last action."
            redo="Redo"
            i18n-selectAll="kendo.editor.selectAll|The title of the tool that selects all content."
            selectAll="Select All"
            i18n-strikethrough="kendo.editor.strikethrough|The title of the tool that strikes through text."
            strikethrough="Strikethrough"
            i18n-subscript="kendo.editor.subscript|The title of the tool that makes text subscript."
            subscript="Subscript"
            i18n-superscript="kendo.editor.superscript|The title of the tool that makes text superscript."
            superscript="Superscript"
            i18n-underline="kendo.editor.underline|The title of the tool that underlines text."
            underline="Underline"
            i18n-unlink="kendo.editor.unlink|The title of the tool that removes hyperlinks."
            unlink="Remove Link"
            i18n-undo="kendo.editor.undo|The title of the tool that undos the last action."
            undo="Undo"
            i18n-viewSource="kendo.editor.viewSource|The title of the tool that shows the editor value as HTML."
            viewSource="View source"
            i18n-insertTable="kendo.editor.insertTable|The title of the tool that inserts table."
            insertTable="Insert Table"
            i18n-addColumnBefore="kendo.editor.addColumnBefore|The title of the tool that adds new column before currently selected column."
            addColumnBefore="Add column before"
            i18n-addColumnAfter="kendo.editor.addColumnAfter|The title of the tool that adds new column after currently selected column."
            addColumnAfter="Add column after"
            i18n-addRowBefore="kendo.editor.addRowBefore|The title of the tool that adds new row before currently selected row."
            addRowBefore="Add row before"
            i18n-addRowAfter="kendo.editor.addRowAfter|The title of the tool that adds new row after currently selected row."
            addRowAfter="Add row after"
            i18n-mergeCells="kendo.editor.mergeCells|The title of the tool that merges the currently selected cells."
            mergeCells="Merge cells"
            i18n-splitCell="kendo.editor.splitCell|The title of the tool that splits the currently selected cell."
            splitCell="Split cell"
            i18n-deleteColumn="kendo.editor.deleteColumn|The title of the tool that deletes a table column."
            deleteColumn="Delete column"
            i18n-deleteRow="kendo.editor.deleteRow|The title of the tool that deletes a table row."
            deleteRow="Delete row"
            i18n-deleteTable="kendo.editor.deleteTable|The title of the tool that deletes a table."
            deleteTable="Delete table"
        >
        </ng-container>
        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar [overflow]="true" [tabindex]="readonly ? -1 : 0" *ngIf="!userToolBarElement" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
        </kendo-toolbar>

        <div *ngIf="!iframe" #content [attr.dir]="direction" class="k-editor-content"></div>

        <div class="k-editor-content" *ngIf="iframe">
            <iframe #content srcdoc="<!DOCTYPE html>" frameborder="0" class="k-iframe" (load)="iframeOnLoad()"></iframe>
        </div>

        <ng-container #dialogsContainer></ng-container>
    `, isInline: true, styles: ["\n        .k-editor-content > .ProseMirror {\n            height: 100%;\n            width: 100%;\n            box-sizing: border-box;\n            outline: none;\n            overflow: auto;\n        }\n\n        .k-iframe {\n            width: 100%;\n            height: 100%;\n            display: block;\n        }\n\n\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .k-editor-resize-handles-wrapper,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .k-editor-resize-handle,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .row-resize-handle,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .column-resize-handle {\n            display: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] img,\n        .k-editor-content .ProseMirror[contenteditable=\"false\"] table {\n            pointer-events: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] .ProseMirror-selectednode {\n            outline: none;\n        }\n        \n        .k-editor-content .ProseMirror[contenteditable=\"false\"] {\n            cursor: unset !important;\n        }\n    "], components: [{ type: i5.ToolBarComponent, selector: "kendo-toolbar", inputs: ["overflow", "resizable", "popupSettings", "tabindex", "tabIndex"], outputs: ["open", "close"], exportAs: ["kendoToolBar"] }, { type: i5.ToolBarButtonGroupComponent, selector: "kendo-toolbar-buttongroup", inputs: ["disabled", "selection", "width", "look"], exportAs: ["kendoToolBarButtonGroup"] }, { type: i5.ToolBarButtonComponent, selector: "kendo-toolbar-button", inputs: ["showText", "showIcon", "text", "style", "className", "title", "disabled", "toggleable", "look", "togglable", "selected", "fillMode", "themeColor", "icon", "iconClass", "imageUrl"], outputs: ["click", "pointerdown", "selectedChange"], exportAs: ["kendoToolBarButton"] }, { type: i6.EditorFormatComponent, selector: "kendo-toolbar-dropdownlist[kendoEditorFormat]", inputs: ["data"], outputs: ["valueChange"] }], directives: [{ type: i7.LocalizedMessagesDirective, selector: "[kendoEditorLocalizedMessages]" }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.EditorBoldButtonDirective, selector: "kendo-toolbar-button[kendoEditorBoldButton]" }, { type: i10.EditorItalicButtonDirective, selector: "kendo-toolbar-button[kendoEditorItalicButton]" }, { type: i11.EditorUnderlineButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnderlineButton]" }, { type: i12.EditorAlignLeftButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignLeftButton]" }, { type: i13.EditorAlignCenterButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignCenterButton]" }, { type: i14.EditorAlignRightButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignRightButton]" }, { type: i15.EditorAlignJustifyButtonDirective, selector: "kendo-toolbar-button[kendoEditorAlignJustifyButton]" }, { type: i16.EditorInsertUnorderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertUnorderedListButton]" }, { type: i17.EditorInsertOrderedListButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertOrderedListButton]" }, { type: i18.EditorIndentButtonDirective, selector: "kendo-toolbar-button[kendoEditorIndentButton]" }, { type: i19.EditorOutdentButtonDirective, selector: "kendo-toolbar-button[kendoEditorOutdentButton]" }, { type: i20.EditorCreateLinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorCreateLinkButton]" }, { type: i21.EditorUnlinkButtonDirective, selector: "kendo-toolbar-button[kendoEditorUnlinkButton]" }, { type: i22.EditorInsertImageButtonDirective, selector: "kendo-toolbar-button[kendoEditorInsertImageButton]" }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-editor',
                    providers: [
                        EditorLocalizationService,
                        ProviderService,
                        EditorToolsService,
                        {
                            provide: LocalizationService,
                            useExisting: EditorLocalizationService
                        },
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.editor'
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => EditorComponent),
                            multi: true
                        },
                        {
                            provide: KendoInput,
                            useExisting: forwardRef(() => EditorComponent)
                        }
                    ],
                    template: `
        <ng-container
            kendoEditorLocalizedMessages
            i18n-alignCenter="kendo.editor.alignCenter|The title of the tool that aligns text in the center."
            alignCenter="Center text"
            i18n-alignJustify="kendo.editor.alignJustify|The title of the tool that justifies text both left and right."
            alignJustify="Justify"
            i18n-alignLeft="kendo.editor.alignLeft|The title of the tool that aligns text on the left."
            alignLeft="Align text left"
            i18n-alignRight="kendo.editor.alignRight|The title of the tool that aligns text on the right."
            alignRight="Align text right"
            i18n-backColor="kendo.editor.backColor|The title of the tool that changes the text background color."
            backColor="Background color"
            i18n-blockquote="kendo.editor.blockquote|The title of the tool that wraps an element in a blockquote"
            blockquote="Quotation"
            i18n-bold="kendo.editor.bold|The title of the tool that makes text bold."
            bold="Bold"
            i18n-cleanFormatting="kendo.editor.cleanFormatting|The title of the Clean Formatting tool."
            cleanFormatting="Clean formatting"
            i18n-createLink="kendo.editor.createLink|The title of the tool that creates hyperlinks."
            createLink="Insert link"
            i18n-dialogApply="kendo.editor.dialogApply|The label of the **Apply** button in all editor dialogs."
            dialogApply="Apply"
            i18n-dialogCancel="kendo.editor.dialogCancel|The label of the **Cancel** button in all editor dialogs."
            dialogCancel="Cancel"
            i18n-dialogInsert="kendo.editor.dialogInsert|The label of the **Insert** button in all editor dialogs."
            dialogInsert="Insert"
            i18n-dialogUpdate="kendo.editor.dialogUpdate|The label of the **Update** button in all editor dialogs."
            dialogUpdate="Update"
            i18n-fileText="kendo.editor.fileText|The caption for the file text in the insertFile dialog."
            fileText="Text"
            i18n-fileTitle="kendo.editor.fileTitle|The caption for the file Title in the insertFile dialog."
            fileTitle="Title"
            i18n-fileWebAddress="kendo.editor.fileWebAddress|The caption for the file URL in the insertFile dialog."
            fileWebAddress="Web address"
            i18n-fontFamily="kendo.editor.fontFamily|The title of the tool that changes the text font."
            fontFamily="Select font family"
            i18n-fontSize="kendo.editor.fontSize|The title of the tool that changes the text size."
            fontSize="Select font size"
            i18n-foreColor="kendo.editor.foreColor|The title of the tool that changes the text color."
            foreColor="Color"
            i18n-format="kendo.editor.format|The title of the tool that lets users choose block formats."
            format="Format"
            i18n-imageAltText="kendo.editor.imageAltText|The caption for the image alternate text in the insertImage dialog."
            imageAltText="Alternate text"
            i18n-imageHeight="kendo.editor.imageHeight|The caption for the image height in the insertImage dialog."
            imageHeight="Height (px)"
            i18n-imageWebAddress="kendo.editor.imageWebAddress|The caption for the image URL in the insertImage dialog."
            imageWebAddress="Web address"
            i18n-imageWidth="kendo.editor.imageWidth|The caption for the image width in the insertImage dialog."
            imageWidth="Width (px)"
            i18n-indent="kendo.editor.indent|The title of the tool that indents the content."
            indent="Indent"
            i18n-insertFile="kendo.editor.insertFile|The title of the tool that inserts links to files."
            insertFile="Insert file"
            i18n-insertImage="kendo.editor.insertImage|The title of the tool that inserts images."
            insertImage="Insert image"
            i18n-insertOrderedList="kendo.editor.insertOrderedList|The title of the tool that inserts an ordered list."
            insertOrderedList="Insert ordered list"
            i18n-insertUnorderedList="kendo.editor.insertUnorderedList|The title of the tool that inserts an unordered list."
            insertUnorderedList="Insert unordered list"
            i18n-italic="kendo.editor.italic|The title of the tool that makes text italicized."
            italic="Italic"
            i18n-linkOpenInNewWindow="kendo.editor.linkOpenInNewWindow|The caption for the checkbox for opening the link in a new window in the createLink dialog."
            linkOpenInNewWindow="Open link in new window"
            i18n-linkText="kendo.editor.linkText|The caption for the link text in the createLink dialog."
            linkText="Text"
            i18n-linkTitle="kendo.editor.linkTitle|The caption for the link title in the createLink dialog."
            linkTitle="Title"
            i18n-linkWebAddress="kendo.editor.linkWebAddress|The caption for the URL in the createLink dialog."
            linkWebAddress="Web address"
            i18n-outdent="kendo.editor.outdent|The title of the tool that outdents the content."
            outdent="Outdent"
            i18n-print="kendo.editor.print|The title of the print tool."
            print="Print"
            i18n-redo="kendo.editor.redo|The title of the tool that undos the last action."
            redo="Redo"
            i18n-selectAll="kendo.editor.selectAll|The title of the tool that selects all content."
            selectAll="Select All"
            i18n-strikethrough="kendo.editor.strikethrough|The title of the tool that strikes through text."
            strikethrough="Strikethrough"
            i18n-subscript="kendo.editor.subscript|The title of the tool that makes text subscript."
            subscript="Subscript"
            i18n-superscript="kendo.editor.superscript|The title of the tool that makes text superscript."
            superscript="Superscript"
            i18n-underline="kendo.editor.underline|The title of the tool that underlines text."
            underline="Underline"
            i18n-unlink="kendo.editor.unlink|The title of the tool that removes hyperlinks."
            unlink="Remove Link"
            i18n-undo="kendo.editor.undo|The title of the tool that undos the last action."
            undo="Undo"
            i18n-viewSource="kendo.editor.viewSource|The title of the tool that shows the editor value as HTML."
            viewSource="View source"
            i18n-insertTable="kendo.editor.insertTable|The title of the tool that inserts table."
            insertTable="Insert Table"
            i18n-addColumnBefore="kendo.editor.addColumnBefore|The title of the tool that adds new column before currently selected column."
            addColumnBefore="Add column before"
            i18n-addColumnAfter="kendo.editor.addColumnAfter|The title of the tool that adds new column after currently selected column."
            addColumnAfter="Add column after"
            i18n-addRowBefore="kendo.editor.addRowBefore|The title of the tool that adds new row before currently selected row."
            addRowBefore="Add row before"
            i18n-addRowAfter="kendo.editor.addRowAfter|The title of the tool that adds new row after currently selected row."
            addRowAfter="Add row after"
            i18n-mergeCells="kendo.editor.mergeCells|The title of the tool that merges the currently selected cells."
            mergeCells="Merge cells"
            i18n-splitCell="kendo.editor.splitCell|The title of the tool that splits the currently selected cell."
            splitCell="Split cell"
            i18n-deleteColumn="kendo.editor.deleteColumn|The title of the tool that deletes a table column."
            deleteColumn="Delete column"
            i18n-deleteRow="kendo.editor.deleteRow|The title of the tool that deletes a table row."
            deleteRow="Delete row"
            i18n-deleteTable="kendo.editor.deleteTable|The title of the tool that deletes a table."
            deleteTable="Delete table"
        >
        </ng-container>
        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar [overflow]="true" [tabindex]="readonly ? -1 : 0" *ngIf="!userToolBarElement" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
        </kendo-toolbar>

        <div *ngIf="!iframe" #content [attr.dir]="direction" class="k-editor-content"></div>

        <div class="k-editor-content" *ngIf="iframe">
            <iframe #content srcdoc="<!DOCTYPE html>" frameborder="0" class="k-iframe" (load)="iframeOnLoad()"></iframe>
        </div>

        <ng-container #dialogsContainer></ng-container>
    `,
                    styles: [`
        .k-editor-content > .ProseMirror {
            height: 100%;
            width: 100%;
            box-sizing: border-box;
            outline: none;
            overflow: auto;
        }

        .k-iframe {
            width: 100%;
            height: 100%;
            display: block;
        }


        .k-editor-content .ProseMirror[contenteditable="false"] .k-editor-resize-handles-wrapper,
        .k-editor-content .ProseMirror[contenteditable="false"] .k-editor-resize-handle,
        .k-editor-content .ProseMirror[contenteditable="false"] .row-resize-handle,
        .k-editor-content .ProseMirror[contenteditable="false"] .column-resize-handle {
            display: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] img,
        .k-editor-content .ProseMirror[contenteditable="false"] table {
            pointer-events: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] .ProseMirror-selectednode {
            outline: none;
        }
        
        .k-editor-content .ProseMirror[contenteditable="false"] {
            cursor: unset !important;
        }
    `]
                }]
        }], ctorParameters: function () { return [{ type: i1.DialogService }, { type: i2.LocalizationService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: i3.ProviderService }, { type: i4.EditorToolsService }]; }, propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], iframe: [{
                type: Input
            }], applyToWord: [{
                type: Input
            }], schema: [{
                type: Input
            }], plugins: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], preserveWhitespace: [{
                type: Input
            }], pasteCleanupSettings: [{
                type: Input
            }], resizable: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], onFocus: [{
                type: Output,
                args: ['focus']
            }], paste: [{
                type: Output
            }], onBlur: [{
                type: Output,
                args: ['blur']
            }], hostClass: [{
                type: HostBinding,
                args: ['class.k-editor']
            }], resizableClass: [{
                type: HostBinding,
                args: ['class.k-editor-resizable']
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.k-disabled']
            }], isReadonly: [{
                type: HostBinding,
                args: ['class.k-readonly']
            }], isIE: [{
                type: HostBinding,
                args: ['class.k-ie']
            }], dir: [{
                type: HostBinding,
                args: ['attr.dir']
            }], ariaDisabled: [{
                type: HostBinding,
                args: ['attr.ariaDisabled']
            }], minWidth: [{
                type: HostBinding,
                args: ['style.minWidth']
            }], maxWidth: [{
                type: HostBinding,
                args: ['style.maxWidth']
            }], minHeight: [{
                type: HostBinding,
                args: ['style.minHeight']
            }], maxHeight: [{
                type: HostBinding,
                args: ['style.maxHeight']
            }], userToolBarComponent: [{
                type: ContentChild,
                args: [ToolBarComponent]
            }], userToolBarElement: [{
                type: ContentChild,
                args: [ToolBarComponent, { read: ElementRef }]
            }], dialogContainer: [{
                type: ViewChild,
                args: ['dialogsContainer', { read: ViewContainerRef }]
            }], container: [{
                type: ViewChild,
                args: ['content', { read: ViewContainerRef }]
            }], defaultToolbar: [{
                type: ViewChild,
                args: ['defaultToolbar', { read: ElementRef, static: false }]
            }], defaultToolbarComponent: [{
                type: ViewChild,
                args: ['defaultToolbar', { read: ToolBarComponent, static: false }]
            }] } });
