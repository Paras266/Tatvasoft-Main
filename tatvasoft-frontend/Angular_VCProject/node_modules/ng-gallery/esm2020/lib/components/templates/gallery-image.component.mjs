import { Component, Input, Output, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { imageFailedSvg } from './svg-assets';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
export class GalleryImageComponent {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.state = 'loading';
        /** Progress value */
        this.progress = 0;
        this.errorIcon = imageFailedSvg;
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        this.loaded = new EventEmitter();
    }
    get imageState() {
        return this.state;
    }
    ngOnInit() {
        if (this.loadingIcon) {
            this.loaderTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
        if (this.loadingError) {
            this.errorTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingError);
        }
        if (this.errorIcon) {
            this.errorSvg = this._sanitizer.bypassSecurityTrustHtml(this.errorIcon);
        }
    }
}
GalleryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryImageComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
GalleryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: GalleryImageComponent, selector: "gallery-image", inputs: { isThumbnail: "isThumbnail", alt: "alt", src: "src", loadingIcon: "loadingIcon", loadingError: "loadingError", errorIcon: "errorIcon" }, outputs: { error: "error", loaded: "loaded" }, host: { properties: { "attr.imageState": "this.imageState" } }, ngImport: i0, template: `
    <ng-container [ngSwitch]="state">
      <img [@fadeIn]="state"
           [src]="src"
           [attr.alt]="alt"
           [attr.loading]="isThumbnail ? 'eager' : 'lazy'"
           [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
           class="g-image-item"
           (load)="state = 'success'; loaded.emit()"
           (error)="state = 'failed'; error.emit($event)"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], animations: [
        trigger('fadeIn', [
            transition('* => success', [
                style({ opacity: 0 }),
                animate('300ms ease-in', style({ opacity: 1 }))
            ])
        ])
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: GalleryImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        trigger('fadeIn', [
                            transition('* => success', [
                                style({ opacity: 0 }),
                                animate('300ms ease-in', style({ opacity: 1 }))
                            ])
                        ])
                    ],
                    template: `
    <ng-container [ngSwitch]="state">
      <img [@fadeIn]="state"
           [src]="src"
           [attr.alt]="alt"
           [attr.loading]="isThumbnail ? 'eager' : 'lazy'"
           [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
           class="g-image-item"
           (load)="state = 'success'; loaded.emit()"
           (error)="state = 'failed'; error.emit($event)"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { isThumbnail: [{
                type: Input
            }], alt: [{
                type: Input
            }], src: [{
                type: Input
            }], loadingIcon: [{
                type: Input
            }], loadingError: [{
                type: Input
            }], errorIcon: [{
                type: Input
            }], error: [{
                type: Output
            }], loaded: [{
                type: Output
            }], imageState: [{
                type: HostBinding,
                args: ['attr.imageState']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxZQUFZLEVBRVosdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7O0FBd0Q5QyxNQUFNLE9BQU8scUJBQXFCO0lBd0NoQyxZQUFvQixVQUF3QjtRQUF4QixlQUFVLEdBQVYsVUFBVSxDQUFjO1FBdEM1QyxVQUFLLEdBQXFDLFNBQVMsQ0FBQztRQUVwRCxxQkFBcUI7UUFDckIsYUFBUSxHQUFXLENBQUMsQ0FBQztRQXVCWixjQUFTLEdBQVcsY0FBYyxDQUFDO1FBRzVDLDZDQUE2QztRQUNuQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQztRQUV2QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQU81QyxDQUFDO0lBTEQsSUFBb0MsVUFBVTtRQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUtELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqRjtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDOztrSEFyRFUscUJBQXFCO3NHQUFyQixxQkFBcUIsc1RBM0N0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdDVCw4VUFoRFc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2hCLFVBQVUsQ0FBQyxjQUFjLEVBQUU7Z0JBQ3pCLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDckIsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNoRCxDQUFDO1NBQ0gsQ0FBQztLQUNIOzJGQTRDVSxxQkFBcUI7a0JBdERqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFO3dCQUNWLE9BQU8sQ0FBQyxRQUFRLEVBQUU7NEJBQ2hCLFVBQVUsQ0FBQyxjQUFjLEVBQUU7Z0NBQ3pCLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztnQ0FDckIsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzs2QkFDaEQsQ0FBQzt5QkFDSCxDQUFDO3FCQUNIO29CQUNELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdDVDtpQkFDRjttR0FVVSxXQUFXO3NCQUFuQixLQUFLO2dCQUdHLEdBQUc7c0JBQVgsS0FBSztnQkFHRyxHQUFHO3NCQUFYLEtBQUs7Z0JBS0csV0FBVztzQkFBbkIsS0FBSztnQkFLRyxZQUFZO3NCQUFwQixLQUFLO2dCQUlHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBSUksS0FBSztzQkFBZCxNQUFNO2dCQUVHLE1BQU07c0JBQWYsTUFBTTtnQkFFNkIsVUFBVTtzQkFBN0MsV0FBVzt1QkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIE9uSW5pdCxcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sLCBTYWZlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IGFuaW1hdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IGltYWdlRmFpbGVkU3ZnIH0gZnJvbSAnLi9zdmctYXNzZXRzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1pbWFnZScsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgYW5pbWF0aW9uczogW1xyXG4gICAgdHJpZ2dlcignZmFkZUluJywgW1xyXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IHN1Y2Nlc3MnLCBbXHJcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwIH0pLFxyXG4gICAgICAgIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4nLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpXHJcbiAgICAgIF0pXHJcbiAgICBdKVxyXG4gIF0sXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cInN0YXRlXCI+XHJcbiAgICAgIDxpbWcgW0BmYWRlSW5dPVwic3RhdGVcIlxyXG4gICAgICAgICAgIFtzcmNdPVwic3JjXCJcclxuICAgICAgICAgICBbYXR0ci5hbHRdPVwiYWx0XCJcclxuICAgICAgICAgICBbYXR0ci5sb2FkaW5nXT1cImlzVGh1bWJuYWlsID8gJ2VhZ2VyJyA6ICdsYXp5J1wiXHJcbiAgICAgICAgICAgW3N0eWxlLnZpc2liaWxpdHldPVwic3RhdGUgPT09ICdzdWNjZXNzJyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nXCJcclxuICAgICAgICAgICBjbGFzcz1cImctaW1hZ2UtaXRlbVwiXHJcbiAgICAgICAgICAgKGxvYWQpPVwic3RhdGUgPSAnc3VjY2Vzcyc7IGxvYWRlZC5lbWl0KClcIlxyXG4gICAgICAgICAgIChlcnJvcik9XCJzdGF0ZSA9ICdmYWlsZWQnOyBlcnJvci5lbWl0KCRldmVudClcIi8+XHJcblxyXG4gICAgICA8ZGl2ICpuZ1N3aXRjaENhc2U9XCInZmFpbGVkJ1wiXHJcbiAgICAgICAgICAgY2xhc3M9XCJnLWltYWdlLWVycm9yLW1lc3NhZ2VcIj5cclxuICAgICAgICA8ZGl2ICpuZ0lmPVwiZXJyb3JUZW1wbGF0ZTsgZWxzZSBkZWZhdWx0RXJyb3JcIlxyXG4gICAgICAgICAgICAgW2lubmVySFRNTF09XCJlcnJvclRlbXBsYXRlXCI+PC9kaXY+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0RXJyb3I+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXNUaHVtYm5haWw7IGVsc2UgaXNMYXJnZVwiPlxyXG4gICAgICAgICAgICA8aDQ+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdhbGxlcnktdGh1bWItZXJyb3JcIiBbaW5uZXJIVE1MXT1cImVycm9yU3ZnXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvaDQ+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjaXNMYXJnZT5cclxuICAgICAgICAgICAgPGgyPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnYWxsZXJ5LWltYWdlLWVycm9yXCIgW2lubmVySFRNTF09XCJlcnJvclN2Z1wiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2gyPlxyXG4gICAgICAgICAgICA8cD5VbmFibGUgdG8gbG9hZCB0aGUgaW1hZ2UhPC9wPlxyXG4gICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cIidsb2FkaW5nJ1wiPlxyXG4gICAgICAgIDxkaXYgKm5nSWY9XCJsb2FkZXJUZW1wbGF0ZTsgZWxzZSBkZWZhdWx0TG9hZGVyXCJcclxuICAgICAgICAgICAgIGNsYXNzPVwiZy1sb2FkaW5nXCJcclxuICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwibG9hZGVyVGVtcGxhdGVcIj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRMb2FkZXI+XHJcbiAgICAgICAgICA8ZGl2ICpuZ0lmPVwiaXNUaHVtYm5haWxcIiBjbGFzcz1cImctdGh1bWItbG9hZGluZ1wiPjwvZGl2PlxyXG4gICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcbiAgYFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlJbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIHN0YXRlOiAnbG9hZGluZycgfCAnc3VjY2VzcycgfCAnZmFpbGVkJyA9ICdsb2FkaW5nJztcclxuXHJcbiAgLyoqIFByb2dyZXNzIHZhbHVlICovXHJcbiAgcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblxyXG4gIC8qKiBJcyB0aHVtYm5haWwgKi9cclxuICBASW5wdXQoKSBpc1RodW1ibmFpbDogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEltYWdlIGFsdCAqL1xyXG4gIEBJbnB1dCgpIGFsdDogc3RyaW5nO1xyXG5cclxuICAvKiogSW1hZ2Ugc291cmNlIFVSTCAqL1xyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nO1xyXG4gIC8qKiBMb2FkZWQgaW1hZ2UgVVJMICovXHJcbiAgaW1hZ2VVcmw6IFNhZmVVcmw7XHJcblxyXG4gIC8qKiBDdXN0b20gbG9hZGVyIHRlbXBsYXRlICovXHJcbiAgQElucHV0KCkgbG9hZGluZ0ljb246IHN0cmluZztcclxuICAvKiogQ3VzdG9tIGxvYWRlciBzYWZlIHRlbXBsYXRlICovXHJcbiAgbG9hZGVyVGVtcGxhdGU6IFNhZmVIdG1sO1xyXG5cclxuICAvKiogQ3VzdG9tIGVycm9yIHRlbXBsYXRlICovXHJcbiAgQElucHV0KCkgbG9hZGluZ0Vycm9yOiBzdHJpbmc7XHJcbiAgLyoqIEN1c3RvbSBlcnJvciBzYWZlIHRlbXBsYXRlICovXHJcbiAgZXJyb3JUZW1wbGF0ZTogU2FmZUh0bWw7XHJcblxyXG4gIEBJbnB1dCgpIGVycm9ySWNvbjogc3RyaW5nID0gaW1hZ2VGYWlsZWRTdmc7XHJcbiAgZXJyb3JTdmc6IFNhZmVIdG1sO1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yRXZlbnQ+KCk7XHJcblxyXG4gIEBPdXRwdXQoKSBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5pbWFnZVN0YXRlJykgZ2V0IGltYWdlU3RhdGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMubG9hZGluZ0ljb24pIHtcclxuICAgICAgdGhpcy5sb2FkZXJUZW1wbGF0ZSA9IHRoaXMuX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLmxvYWRpbmdJY29uKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmxvYWRpbmdFcnJvcikge1xyXG4gICAgICB0aGlzLmVycm9yVGVtcGxhdGUgPSB0aGlzLl9zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodGhpcy5sb2FkaW5nRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZXJyb3JJY29uKSB7XHJcbiAgICAgIHRoaXMuZXJyb3JTdmcgPSB0aGlzLl9zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodGhpcy5lcnJvckljb24pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=