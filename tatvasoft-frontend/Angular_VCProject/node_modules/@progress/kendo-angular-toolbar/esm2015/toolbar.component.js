/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, ViewChild, ContentChildren, Input, ViewChildren, HostListener, Output, EventEmitter, ViewContainerRef } from '@angular/core';
import { guid } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
import { RefreshService } from './refresh.service';
import { NavigationService } from './navigation.service';
import { ToolBarToolComponent } from './tools/toolbar-tool.component';
import { innerWidth, closest, isPresent } from './util';
import { Keys } from '@progress/kendo-angular-common';
import { PreventableEvent } from './common/preventable-event';
import { Subscription, fromEvent, Subject, merge } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { filter } from 'rxjs/operators';
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { defaultPopupWidth } from './common/constants';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
import * as i2 from "@progress/kendo-angular-popup";
import * as i3 from "./refresh.service";
import * as i4 from "./navigation.service";
import * as i5 from "./renderer.component";
import * as i6 from "@progress/kendo-angular-common";
import * as i7 from "./localization/localized-toolbar-messages.directive";
import * as i8 from "@angular/common";
const getInitialPopupSettings = (isRtl) => ({
    animate: true,
    anchorAlign: { horizontal: isRtl ? 'left' : 'right', vertical: 'bottom' },
    popupAlign: { horizontal: isRtl ? 'left' : 'right', vertical: 'top' }
});
/**
 * Represents the [Kendo UI ToolBar component for Angular]({% slug overview_toolbar %}).
 */
export class ToolBarComponent {
    constructor(localization, popupService, refreshService, navigationService, element, zone, renderer, _cdr) {
        this.localization = localization;
        this.popupService = popupService;
        this.refreshService = refreshService;
        this.navigationService = navigationService;
        this.element = element;
        this.zone = zone;
        this.renderer = renderer;
        this._cdr = _cdr;
        /**
         * Hides the overflowing tools in a popup.
         */
        this.overflow = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the ToolBar.
         */
        this.tabindex = 0;
        /**
         * Fires when the overflow popup of the ToolBar is opened.
         */
        this.open = new EventEmitter();
        /**
         * Fires when the overflow popup of the ToolBar is closed.
         */
        this.close = new EventEmitter();
        this.hostClasses = true;
        this.cancelRenderedToolsSubscription$ = new Subject();
        this.subscriptions = new Subscription();
        this.popupSubs = new Subscription();
        this.role = 'toolbar';
        /**
         * @hidden
         */
        this.overflowBtnId = guid();
        /**
         * @hidden
         */
        this.popupId = guid();
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    /**
     * @hidden
     */
    set resizable(value) {
        this.overflow = value;
    }
    get resizable() {
        return this.overflow;
    }
    /**
     * Configures the popup of the ToolBar drop-down list.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, getInitialPopupSettings(this.localization.rtl), settings);
    }
    get popupSettings() {
        return this._popupSettings || getInitialPopupSettings(this.localization.rtl);
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    set popupOpen(open) {
        if (this.popupOpen === open) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this.toggle(open);
    }
    get popupOpen() {
        return this._open;
    }
    /**
     * @hidden
     */
    onFocus(ev) {
        this.navigationService.resetNavigation();
        this.navigationService.focusFirst(ev);
        // prevents ExpressionChangedAfterItHasBeenCheckedError when tools with popup are opened/closed asynchronously
        this.element.nativeElement.setAttribute('tabindex', '-1');
    }
    /**
     * @hidden
     */
    onFocusOut(event) {
        // prevents ExpressionChangedAfterItHasBeenCheckedError when tools with popup are opened/closed asynchronously
        if (closest(event.relatedTarget, (el) => el === this.element.nativeElement)) {
            this.element.nativeElement.setAttribute('tabindex', '-1');
            return;
        }
        this.element.nativeElement.setAttribute('tabindex', this.tabindex.toString());
    }
    get getDir() {
        return this.direction;
    }
    get resizableClass() {
        return this.overflow;
    }
    ngAfterViewInit() {
        const element = this.element.nativeElement;
        if (!element.getAttribute('tabindex')) {
            this.element.nativeElement.setAttribute('tabindex', '0');
        }
        this.zone.runOutsideAngular(() => {
            this.toolbarKeydownListener = this.renderer.listen(this.element.nativeElement, 'keydown', (ev) => {
                switch (ev.keyCode) {
                    case Keys.ArrowLeft:
                        this.zone.run(() => {
                            ev.preventDefault();
                            if (this.direction === 'ltr') {
                                this.navigationService.focusPrev(ev);
                            }
                            else {
                                this.navigationService.focusNext(ev);
                            }
                            // prevents ExpressionChangedAfterItHasBeenCheckedError when tools with popup are opened/closed asynchronously
                            this.element.nativeElement.setAttribute('tabindex', '-1');
                        });
                        break;
                    case Keys.ArrowRight:
                        this.zone.run(() => {
                            ev.preventDefault();
                            if (this.direction === 'ltr') {
                                this.navigationService.focusNext(ev);
                            }
                            else {
                                this.navigationService.focusPrev(ev);
                            }
                            // prevents ExpressionChangedAfterItHasBeenCheckedError when tools with popup are opened/closed asynchronously
                            this.element.nativeElement.setAttribute('tabindex', '-1');
                        });
                        break;
                    case Keys.Tab:
                        this.zone.run(() => this.navigationService.resetNavigation());
                        break;
                    case Keys.Escape:
                        this.zone.run(() => this.toggle(false));
                        break;
                    case Keys.Home:
                        this.zone.run(() => this.navigationService.focusFirst(ev));
                        break;
                    case Keys.End:
                        this.zone.run(() => this.navigationService.focusLast(ev));
                        break;
                    default:
                        break;
                }
            });
        });
        if (this.overflow) {
            this.subscriptions.add(merge(this.resizeSensor.resize, this.renderedTools.changes).subscribe(() => this.onResize()));
            this.navigationService.overflowButton = this.overflowButton;
            // because of https://github.com/telerik/kendo-angular-buttons/pull/276
            // button icons are not rendered until onResize() is called
            this.onResize();
        }
        this.navigationService.setRenderedTools(this.renderedTools.toArray());
        this.subscriptions.add(this.renderedTools.changes.subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray())));
    }
    ngOnInit() {
        this.subscriptions.add(this.localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr')));
        if (isDocumentAvailable()) {
            this.zone.runOutsideAngular(() => this.subscriptions.add(fromEvent(document, 'click')
                .pipe(filter(() => !!this.popupRef), filter((ev) => !this.popupRef.popup.instance.container.nativeElement.contains(ev.target)), filter((ev) => !this.overflowButton.nativeElement.contains(ev.target)))
                .subscribe(() => {
                this.zone.run(() => {
                    this.popupOpen = false;
                });
            })));
        }
    }
    ngOnChanges(changes) {
        if (changes.tabindex) {
            // prevents ExpressionChangedAfterItHasBeenCheckedError when tools with popup are opened/closed asynchronously
            this.element.nativeElement.setAttribute('tabindex', changes.tabindex.currentValue.toString());
        }
    }
    ngOnDestroy() {
        this.destroyPopup();
        if (this.toolbarKeydownListener) {
            this.toolbarKeydownListener();
        }
        this.cancelRenderedToolsSubscription$.next();
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    get moreToolsTitle() {
        return this.localization.get('moreToolsTitle');
    }
    /**
     * @hidden
     */
    get cdr() {
        return this._cdr;
    }
    /**
     * @hidden
     */
    onRendererClick(data) {
        this.navigationService.click(data);
        this.element.nativeElement.setAttribute('tabindex', '-1');
    }
    /**
     * @hidden
     */
    showPopup() {
        this.popupOpen = !this.popupOpen;
        this.navigationService.click({ context: undefined, event: undefined });
    }
    /**
     * Toggles the visibility of the overflow popup.
     */
    toggle(popupOpen) {
        this._open = popupOpen !== undefined ? popupOpen : !this.popupOpen;
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this.popupOpen) {
            this.popupRef = this.popupService.open({
                anchor: this.overflowButton,
                anchorAlign: this.popupSettings.anchorAlign,
                popupAlign: this.popupSettings.popupAlign,
                content: this.popupTemplate,
                appendTo: this.appendTo,
                animate: this.popupSettings.animate,
                popupClass: this.popupSettings.popupClass,
                positionMode: 'absolute'
            });
            this.setPopupContentDimensions();
            this.popupSubs.add(this.popupRef.popupOpen.subscribe(this.onPopupOpen.bind(this)));
            this.popupSubs.add(this.popupRef.popupClose.subscribe(this.onPopupClose.bind(this)));
        }
    }
    /**
     * @hidden
     */
    onResize() {
        if (isDocumentAvailable()) {
            const containerWidth = innerWidth(this.element.nativeElement) - this.overflowAnchorWidth;
            this.shrink(containerWidth, this.childrenWidth);
            this.stretch(containerWidth, this.childrenWidth);
            this.displayAnchor();
            this.resizeSensor.acceptSize();
        }
    }
    /**
     * @hidden
     */
    onPopupOpen() {
        this.zone.runOutsideAngular(() => {
            this.overflowKeydownListener = this.renderer.listen(this.popupRef.popupElement, 'keydown', (ev) => {
                switch (ev.keyCode) {
                    case Keys.ArrowUp:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.navigationService.focusPrev(ev);
                        });
                        break;
                    case Keys.ArrowDown:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.navigationService.focusNext(ev);
                        });
                        break;
                    case Keys.Escape:
                        this.zone.run(() => this.toggle(false));
                        break;
                    case Keys.Tab:
                        this.zone.run(() => {
                            this.toggle(false);
                            this.navigationService.resetNavigation();
                        });
                        break;
                    default:
                        break;
                }
            });
        });
        this.cancelRenderedToolsSubscription$.next();
        this.navigationService.moveFocusToPopup();
        this.navigationService.setRenderedTools(this.overflowRenderedTools.toArray());
        this.overflowRenderedTools.changes
            .pipe(takeUntil(this.cancelRenderedToolsSubscription$))
            .subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray()));
        this.renderer.setAttribute(this.overflowButton.nativeElement, 'aria-controls', this.popupId);
    }
    /**
     * @hidden
     */
    onPopupClose() {
        this.cancelRenderedToolsSubscription$.next();
        this.navigationService.setRenderedTools(this.renderedTools.toArray());
        this.renderedTools.changes
            .pipe(takeUntil(this.cancelRenderedToolsSubscription$))
            .subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray()));
        this.navigationService.moveFocusToToolBar();
        if (this.overflowKeydownListener) {
            this.overflowKeydownListener();
        }
        this.renderer.removeAttribute(this.overflowButton.nativeElement, 'aria-controls');
    }
    displayAnchor() {
        const visibility = this.allTools.filter(t => t.overflows && t.responsive).length > 0 ? 'visible' : 'hidden';
        this.renderer.setStyle(this.overflowButton.nativeElement, 'visibility', visibility);
    }
    get popupWidth() {
        if (!this.popupSettings || !this.popupSettings.width) {
            return defaultPopupWidth;
        }
        return isNaN(this.popupSettings.width) ? this.popupSettings.width : `${this.popupSettings.width}px`;
    }
    get popupHeight() {
        if (!this.popupSettings || !this.popupSettings.height) {
            return;
        }
        return isNaN(this.popupSettings.height) ? this.popupSettings.height : `${this.popupSettings.height}px`;
    }
    get overflowAnchorWidth() {
        if (!this.overflow) {
            return 0;
        }
        if (!this.cachedOverflowAnchorWidth) {
            this.cachedOverflowAnchorWidth = this.overflowButton.nativeElement.offsetWidth;
        }
        return this.cachedOverflowAnchorWidth;
    }
    get gap() {
        if (isPresent(this.cachedGap)) {
            return this.cachedGap;
        }
        const computedGap = getComputedStyle(this.element.nativeElement).gap;
        this.cachedGap = isPresent(computedGap) ? parseInt(computedGap, 10) : 0;
        return this.cachedGap;
    }
    get childrenWidth() {
        const width = this.renderedTools.reduce((totalWidth, tool) => tool.width + totalWidth + (tool.isDisplayed() ? this.gap : 0), 0);
        return Math.ceil(width);
    }
    get visibleTools() {
        return this.allTools.filter((tool) => {
            return tool.overflows === false;
        });
    }
    get overflowTools() {
        return this.allTools.filter((tool) => {
            return tool.overflows === true;
        });
    }
    shrink(containerWidth, childrenWidth) {
        let width;
        if (containerWidth < childrenWidth) {
            for (var i = this.visibleTools.length - 1; i >= 0; i--) {
                if (containerWidth > childrenWidth) {
                    break;
                }
                else {
                    width = this.hideLastVisibleTool();
                    childrenWidth -= width;
                }
            }
        }
    }
    stretch(containerWidth, childrenWidth) {
        let width;
        if (containerWidth > childrenWidth) {
            for (var i = this.overflowTools.length - 1; i >= 0; i--) {
                width = this.showFirstHiddenTool(containerWidth, childrenWidth);
                if (width) {
                    childrenWidth += width;
                }
                else {
                    break;
                }
            }
        }
    }
    hideLastVisibleTool() {
        const tool = this.visibleTools[this.visibleTools.length - 1];
        const renderedElement = this.renderedTools.find((r) => {
            return r.tool === tool;
        });
        const width = renderedElement.width;
        tool.overflows = true;
        this.refreshService.refresh(tool);
        return width;
    }
    showFirstHiddenTool(containerWidth, childrenWidth) {
        const tool = this.overflowTools[0];
        const renderedElement = this.renderedTools.find(r => r.tool === tool);
        tool.overflows = false;
        tool.visibility = 'hidden';
        this.refreshService.refresh(tool);
        if (containerWidth > childrenWidth + renderedElement.width) {
            tool.visibility = 'visible';
            this.refreshService.refresh(tool);
        }
        else {
            tool.overflows = true;
            this.refreshService.refresh(tool);
        }
        return renderedElement.width; // returns 0 if `overflows` is true
    }
    setPopupContentDimensions() {
        const popupContentContainer = this.popupRef.popup.instance.contentContainer.nativeElement;
        popupContentContainer.style.width = this.popupWidth;
        popupContentContainer.style.height = this.popupHeight;
        popupContentContainer.style.overflow = 'auto';
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupSubs.unsubscribe();
            this.popupRef.close();
            this.popupRef = null;
        }
    }
}
ToolBarComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToolBarComponent, deps: [{ token: i1.LocalizationService }, { token: i2.PopupService }, { token: i3.RefreshService }, { token: i4.NavigationService }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ÉµÉµFactoryTarget.Component });
ToolBarComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ToolBarComponent, selector: "kendo-toolbar", inputs: { overflow: "overflow", resizable: "resizable", popupSettings: "popupSettings", tabindex: "tabindex", tabIndex: "tabIndex" }, outputs: { open: "open", close: "close" }, host: { listeners: { "focus": "onFocus($event)", "focusout": "onFocusOut($event)" }, properties: { "class.k-widget": "this.hostClasses", "class.k-toolbar": "this.hostClasses", "attr.role": "this.role", "attr.dir": "this.getDir", "class.k-toolbar-resizable": "this.resizableClass" } }, providers: [
        RefreshService,
        NavigationService,
        LocalizationService,
        {
            provide: L10N_PREFIX,
            useValue: 'kendo.toolbar'
        }
    ], queries: [{ propertyName: "allTools", predicate: ToolBarToolComponent }], viewQueries: [{ propertyName: "overflowButton", first: true, predicate: ["overflowButton"], descendants: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "resizeSensor", first: true, predicate: ["resizeSensor"], descendants: true }, { propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "renderedTools", predicate: ["toolbarRenderer"], descendants: true }, { propertyName: "overflowRenderedTools", predicate: ["overflowRenderer"], descendants: true }], exportAs: ["kendoToolBar"], usesOnChanges: true, ngImport: i0, template: `
        <ng-container kendoToolbarLocalizedMessages
        i18n-moreToolsTitle="kendo.toolbar.moreToolsTitle|The title of the **more tools** button in a responsive ToolBar"
        moreToolsTitle="More tools"
        >
        </ng-container>
        <ng-container *ngFor="let tool of allTools; let index = index">
            <kendo-toolbar-renderer
                #toolbarRenderer
                (rendererClick)="onRendererClick($event)"
                [location]="'toolbar'"
                [resizable]="overflow"
                [tool]="tool"
            ></kendo-toolbar-renderer>
        </ng-container>
        <button
            #overflowButton
            type="button"
            tabindex="-1"
            [title]="moreToolsTitle"
            [attr.aria-label]="moreToolsTitle"
            [attr.aria-expanded]="popupOpen"
            [id]="overflowBtnId"
            aria-haspopup="menu"
            *ngIf="overflow"
            [style.visibility]="'hidden'"
            [style.position]="'relative'"
            [style.margin-inline-start]="'auto'"
            class="k-overflow-anchor k-button k-button-flat"
            (click)="showPopup()"
        >
            <span class="k-icon k-i-more-vertical"></span>
        </button>
        <ng-template #popupTemplate>
            <ul
                class="k-overflow-container k-list-container k-reset"
                role="menu"
                [id]="popupId"
                [attr.aria-labelledby]="overflowBtnId">
                <ng-container *ngFor="let tool of allTools; let index = index">
                    <li class="k-item" role="menuitem">
                        <kendo-toolbar-renderer
                            #overflowRenderer
                            (rendererClick)="onRendererClick($event)"
                            [location]="'overflow'"
                            [resizable]="overflow"
                            [tool]="tool"
                        ></kendo-toolbar-renderer>
                    </li>
                </ng-container>
            </ul>
        </ng-template>
        <ng-container #container></ng-container>
        <kendo-resize-sensor *ngIf="overflow" #resizeSensor></kendo-resize-sensor>
    `, isInline: true, components: [{ type: i5.ToolBarRendererComponent, selector: "kendo-toolbar-renderer", inputs: ["tool", "location", "resizable"], outputs: ["rendererClick"], exportAs: ["kendoToolBarRenderer"] }, { type: i6.ResizeSensorComponent, selector: "kendo-resize-sensor", inputs: ["rateLimit"], outputs: ["resize"] }], directives: [{ type: i7.LocalizedToolbarMessagesDirective, selector: "[kendoToolbarLocalizedMessages]" }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ToolBarComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoToolBar',
                    providers: [
                        RefreshService,
                        NavigationService,
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.toolbar'
                        }
                    ],
                    selector: 'kendo-toolbar',
                    template: `
        <ng-container kendoToolbarLocalizedMessages
        i18n-moreToolsTitle="kendo.toolbar.moreToolsTitle|The title of the **more tools** button in a responsive ToolBar"
        moreToolsTitle="More tools"
        >
        </ng-container>
        <ng-container *ngFor="let tool of allTools; let index = index">
            <kendo-toolbar-renderer
                #toolbarRenderer
                (rendererClick)="onRendererClick($event)"
                [location]="'toolbar'"
                [resizable]="overflow"
                [tool]="tool"
            ></kendo-toolbar-renderer>
        </ng-container>
        <button
            #overflowButton
            type="button"
            tabindex="-1"
            [title]="moreToolsTitle"
            [attr.aria-label]="moreToolsTitle"
            [attr.aria-expanded]="popupOpen"
            [id]="overflowBtnId"
            aria-haspopup="menu"
            *ngIf="overflow"
            [style.visibility]="'hidden'"
            [style.position]="'relative'"
            [style.margin-inline-start]="'auto'"
            class="k-overflow-anchor k-button k-button-flat"
            (click)="showPopup()"
        >
            <span class="k-icon k-i-more-vertical"></span>
        </button>
        <ng-template #popupTemplate>
            <ul
                class="k-overflow-container k-list-container k-reset"
                role="menu"
                [id]="popupId"
                [attr.aria-labelledby]="overflowBtnId">
                <ng-container *ngFor="let tool of allTools; let index = index">
                    <li class="k-item" role="menuitem">
                        <kendo-toolbar-renderer
                            #overflowRenderer
                            (rendererClick)="onRendererClick($event)"
                            [location]="'overflow'"
                            [resizable]="overflow"
                            [tool]="tool"
                        ></kendo-toolbar-renderer>
                    </li>
                </ng-container>
            </ul>
        </ng-template>
        <ng-container #container></ng-container>
        <kendo-resize-sensor *ngIf="overflow" #resizeSensor></kendo-resize-sensor>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }, { type: i2.PopupService }, { type: i3.RefreshService }, { type: i4.NavigationService }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { overflow: [{
                type: Input
            }], resizable: [{
                type: Input
            }], popupSettings: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], tabIndex: [{
                type: Input,
                args: ['tabIndex']
            }], open: [{
                type: Output
            }], close: [{
                type: Output
            }], allTools: [{
                type: ContentChildren,
                args: [ToolBarToolComponent]
            }], overflowButton: [{
                type: ViewChild,
                args: ['overflowButton', { static: false }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], resizeSensor: [{
                type: ViewChild,
                args: ['resizeSensor', { static: false }]
            }], container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }], renderedTools: [{
                type: ViewChildren,
                args: ['toolbarRenderer']
            }], overflowRenderedTools: [{
                type: ViewChildren,
                args: ['overflowRenderer']
            }], hostClasses: [{
                type: HostBinding,
                args: ['class.k-widget']
            }, {
                type: HostBinding,
                args: ['class.k-toolbar']
            }], onFocus: [{
                type: HostListener,
                args: ['focus', ['$event']]
            }], onFocusOut: [{
                type: HostListener,
                args: ['focusout', ['$event']]
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], getDir: [{
                type: HostBinding,
                args: ['attr.dir']
            }], resizableClass: [{
                type: HostBinding,
                args: ['class.k-toolbar-resizable']
            }] } });
