/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
// eslint-disable no-forward-ref
import { Component, Input, forwardRef, ViewChild, ElementRef } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { ColorPickerComponent } from '@progress/kendo-angular-inputs';
import { outerWidth } from '../../util';
import { ColorPickerDialogComponent } from '../../dialogs/colorpicker-dialog.component';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../localization/editor-localization.service";
import * as i2 from "@progress/kendo-angular-dialog";
import * as i3 from "../../common/provider.service";
import * as i4 from "@progress/kendo-angular-inputs";
import * as i5 from "@progress/kendo-angular-buttons";
/**
 * A component which configures an existing ColorPickerComponent as a ToolBar tool.
 * To associate a `kendo-toolbar-colorpicker` with an Editor command that changes the
 * foreground or the background color of the text, use the `kendoEditorForeColor` or `kendoEditorBackColor` directive.
 */
export class EditorColorPickerComponent extends ToolBarToolComponent {
    constructor(localization, dialogService, ngZone, providerService) {
        super();
        this.localization = localization;
        this.dialogService = dialogService;
        this.ngZone = ngZone;
        this.tabindex = -1;
        /**
         * Specifies if the component should be disabled.
         */
        this.disabled = false;
        /**
         * Specifies whether the ColorPicker will render a gradient, palette, or both in its popup.
         *
         * @default ['palette']
         */
        this.views = ['palette'];
        this.editor = providerService.editor;
    }
    /**
     * @hidden
     *
     * For backward compatibility with configurations using the deprecated "view" input.
     */
    set view(view) {
        this.views = [view];
    }
    get view() {
        return (this.views && this.views.length > 0) ? this.views[0] : null;
    }
    /**
     * @hidden
     */
    get title() {
        return this.localization.get(this.editorCommand);
    }
    ngOnInit() {
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            this.disabled = style.disabled;
        });
        this.activeView = this.view;
    }
    ngOnDestroy() {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    handleValueChange(color) {
        this.editor.exec(this.editorCommand, color);
        if (this.activeView === 'palette') {
            this.editor.view.focus();
        }
    }
    /**
     * @hidden
     */
    handleActiveColorClick(event) {
        event.preventOpen();
        this.handleValueChange(event.color);
    }
    /**
     * @hidden
     */
    onOpen(picker) {
        this.valueCache = picker.value;
        picker.reset();
    }
    /**
     * @hidden
     */
    onClose(picker) {
        if (!picker.value) {
            picker.value = this.valueCache;
        }
        this.editor.shouldEmitFocus = true;
        this.ngZone.onStable.pipe(take(1)).subscribe(() => this.editor.view.focus());
        this.activeView = this.view;
    }
    /**
     * @hidden
     */
    onActiveViewChange(view) {
        this.activeView = view;
    }
    /**
     * @hidden
     */
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: ColorPickerDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            value: this.value,
            title: this.title,
            editorCommand: this.editorCommand,
            paletteSettings: this.paletteSettings,
            icon: this.icon,
            views: this.views
        });
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus() {
        this.tabindex = 0;
        if (this.overflows) {
            this.colorPickerButton.nativeElement.focus();
        }
        else {
            this.colorPicker.focus();
        }
    }
    /**
     * @hidden
     */
    handleKey() {
        this.tabindex = -1;
        return false;
    }
}
EditorColorPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorColorPickerComponent, deps: [{ token: i1.EditorLocalizationService }, { token: i2.DialogService }, { token: i0.NgZone }, { token: i3.ProviderService }], target: i0.ɵɵFactoryTarget.Component });
EditorColorPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditorColorPickerComponent, selector: "kendo-toolbar-colorpicker", inputs: { value: "value", icon: "icon", paletteSettings: "paletteSettings", editorCommand: "editorCommand", disabled: "disabled", views: "views", view: "view" }, providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorColorPickerComponent) }], viewQueries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true, static: true }, { propertyName: "popupTemplate", first: true, predicate: ["popupTemplate"], descendants: true, static: true }, { propertyName: "element", first: true, predicate: ["colorpicker"], descendants: true, read: ElementRef }, { propertyName: "colorPicker", first: true, predicate: ["colorpicker"], descendants: true, read: ColorPickerComponent }, { propertyName: "colorPickerButton", first: true, predicate: ["colorPickerButton"], descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #toolbarTemplate>
            <kendo-colorpicker
                #colorpicker
                [attr.title]="title"
                [icon]="icon"
                [views]="views"
                [format]="'hex'"
                [value]="value"
                [paletteSettings]="paletteSettings"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="handleValueChange($event)"
                (activeColorClick)="handleActiveColorClick($event)"
                (open)="onOpen(colorpicker)"
                (close)="onClose(colorpicker)"
                (activeViewChange)="onActiveViewChange($event)"
            >
            </kendo-colorpicker>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #colorPickerButton
                class="k-overflow-button"
                [icon]="icon"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `, isInline: true, components: [{ type: i4.ColorPickerComponent, selector: "kendo-colorpicker", inputs: ["views", "view", "activeView", "readonly", "disabled", "format", "value", "popupSettings", "paletteSettings", "gradientSettings", "icon", "iconClass", "clearButton", "tabindex", "preview", "actionsLayout", "size", "rounded", "fillMode"], outputs: ["valueChange", "open", "close", "focus", "blur", "cancel", "activeColorClick", "activeViewChange"], exportAs: ["kendoColorPicker"] }], directives: [{ type: i5.ButtonDirective, selector: "button[kendoButton], span[kendoButton]", inputs: ["toggleable", "togglable", "selected", "tabIndex", "icon", "iconClass", "imageUrl", "disabled", "size", "rounded", "fillMode", "themeColor", "role", "primary", "look"], outputs: ["selectedChange", "click"], exportAs: ["kendoButton"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditorColorPickerComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorColorPickerComponent) }],
                    selector: 'kendo-toolbar-colorpicker',
                    template: `
        <ng-template #toolbarTemplate>
            <kendo-colorpicker
                #colorpicker
                [attr.title]="title"
                [icon]="icon"
                [views]="views"
                [format]="'hex'"
                [value]="value"
                [paletteSettings]="paletteSettings"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (valueChange)="handleValueChange($event)"
                (activeColorClick)="handleActiveColorClick($event)"
                (open)="onOpen(colorpicker)"
                (close)="onClose(colorpicker)"
                (activeViewChange)="onActiveViewChange($event)"
            >
            </kendo-colorpicker>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                #colorPickerButton
                class="k-overflow-button"
                [icon]="icon"
                [attr.title]="title"
                [disabled]="disabled"
                [tabindex]="tabindex"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.EditorLocalizationService }, { type: i2.DialogService }, { type: i0.NgZone }, { type: i3.ProviderService }]; }, propDecorators: { value: [{
                type: Input
            }], icon: [{
                type: Input
            }], paletteSettings: [{
                type: Input
            }], editorCommand: [{
                type: Input
            }], disabled: [{
                type: Input
            }], views: [{
                type: Input
            }], view: [{
                type: Input
            }], toolbarTemplate: [{
                type: ViewChild,
                args: ['toolbarTemplate', { static: true }]
            }], popupTemplate: [{
                type: ViewChild,
                args: ['popupTemplate', { static: true }]
            }], element: [{
                type: ViewChild,
                args: ['colorpicker', { read: ElementRef, static: false }]
            }], colorPicker: [{
                type: ViewChild,
                args: ['colorpicker', { read: ColorPickerComponent, static: false }]
            }], colorPickerButton: [{
                type: ViewChild,
                args: ['colorPickerButton', { read: ElementRef, static: false }]
            }] } });
